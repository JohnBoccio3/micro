
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000114  00800100  00001614  000016a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001614  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000028  00800214  00800214  000017bc  2**0
                  ALLOC
  3 .stab         000017ac  00000000  00000000  000017bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000a6e  00000000  00000000  00002f68  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000022  00000000  00000000  000039d6  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000004f8  00000000  00000000  000039f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000ae76  00000000  00000000  00003ef0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002b6a  00000000  00000000  0000ed66  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000041bf  00000000  00000000  000118d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00001038  00000000  00000000  00015a90  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000394d  00000000  00000000  00016ac8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000658b  00000000  00000000  0001a415  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000008a0  00000000  00000000  000209a0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
       0:	9b c0       	rjmp	.+310    	; 0x138 <__ctors_end>
       2:	00 00       	nop
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
       4:	b5 c0       	rjmp	.+362    	; 0x170 <__bad_interrupt>
       6:	00 00       	nop
void USB_Device_SendRemoteWakeup(void)
{
	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		USB_PLL_On();
		while (!(USB_PLL_IsReady()));
       8:	b3 c0       	rjmp	.+358    	; 0x170 <__bad_interrupt>
       a:	00 00       	nop
       c:	b1 c0       	rjmp	.+354    	; 0x170 <__bad_interrupt>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
       e:	00 00       	nop
      10:	af c0       	rjmp	.+350    	; 0x170 <__bad_interrupt>
      12:	00 00       	nop
      14:	ad c0       	rjmp	.+346    	; 0x170 <__bad_interrupt>
      16:	00 00       	nop
	}

	USB_CLK_Unfreeze();

	UDCON |= (1 << RMWKUP);
      18:	ab c0       	rjmp	.+342    	; 0x170 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	a9 c0       	rjmp	.+338    	; 0x170 <__bad_interrupt>
      1e:	00 00       	nop
      20:	a7 c0       	rjmp	.+334    	; 0x170 <__bad_interrupt>
	while (UDCON & (1 << RMWKUP));
      22:	00 00       	nop
      24:	a5 c0       	rjmp	.+330    	; 0x170 <__bad_interrupt>
      26:	00 00       	nop
      28:	54 c5       	rjmp	.+2728   	; 0xad2 <__vector_10>
}
      2a:	00 00       	nop
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
      2c:	a1 c0       	rjmp	.+322    	; 0x170 <__bad_interrupt>
      2e:	00 00       	nop
      30:	9f c0       	rjmp	.+318    	; 0x170 <__bad_interrupt>
      32:	00 00       	nop
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
      34:	9d c0       	rjmp	.+314    	; 0x170 <__bad_interrupt>
      36:	00 00       	nop
			{
				*CurrConfigLoc = PrevDescLoc;
      38:	9b c0       	rjmp	.+310    	; 0x170 <__bad_interrupt>
      3a:	00 00       	nop
				*BytesRem      = PrevBytesRem;
      3c:	99 c0       	rjmp	.+306    	; 0x170 <__bad_interrupt>
      3e:	00 00       	nop
      40:	97 c0       	rjmp	.+302    	; 0x170 <__bad_interrupt>
      42:	00 00       	nop
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
	uint8_t ErrorCode;

	while (*BytesRem)
      44:	95 c0       	rjmp	.+298    	; 0x170 <__bad_interrupt>
      46:	00 00       	nop
      48:	93 c0       	rjmp	.+294    	; 0x170 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	91 c0       	rjmp	.+290    	; 0x170 <__bad_interrupt>
      4e:	00 00       	nop

			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
      50:	8f c0       	rjmp	.+286    	; 0x170 <__bad_interrupt>
}
      52:	00 00       	nop
      54:	8d c0       	rjmp	.+282    	; 0x170 <__bad_interrupt>
      56:	00 00       	nop
      58:	8b c0       	rjmp	.+278    	; 0x170 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0e c1       	rjmp	.+540    	; 0x27a <__vector_23>
      5e:	00 00       	nop
      60:	87 c0       	rjmp	.+270    	; 0x170 <__bad_interrupt>
      62:	00 00       	nop
      64:	85 c0       	rjmp	.+266    	; 0x170 <__bad_interrupt>
      66:	00 00       	nop
	uint8_t               UsageListSize           = 0;
	HID_MinMax_t          UsageMinMax             = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
      68:	83 c0       	rjmp	.+262    	; 0x170 <__bad_interrupt>
      6a:	00 00       	nop

	ParserData->TotalDeviceReports = 1;
      6c:	81 c0       	rjmp	.+258    	; 0x170 <__bad_interrupt>
      6e:	00 00       	nop
      70:	7f c0       	rjmp	.+254    	; 0x170 <__bad_interrupt>
      72:	00 00       	nop
      74:	7d c0       	rjmp	.+250    	; 0x170 <__bad_interrupt>
	HID_StateTable_t*     CurrStateTable          = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath      = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo        = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize           = 0;
	HID_MinMax_t          UsageMinMax             = {0, 0};
      76:	00 00       	nop
      78:	7b c0       	rjmp	.+246    	; 0x170 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	79 c0       	rjmp	.+242    	; 0x170 <__bad_interrupt>
      7e:	00 00       	nop
      80:	77 c0       	rjmp	.+238    	; 0x170 <__bad_interrupt>
      82:	00 00       	nop
      84:	75 c0       	rjmp	.+234    	; 0x170 <__bad_interrupt>
      86:	00 00       	nop
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable          = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath      = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo        = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize           = 0;
      88:	73 c0       	rjmp	.+230    	; 0x170 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	71 c0       	rjmp	.+226    	; 0x170 <__bad_interrupt>
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable          = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath      = NULL;
      8e:	00 00       	nop
      90:	6f c0       	rjmp	.+222    	; 0x170 <__bad_interrupt>
uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable          = &StateTable[0];
      92:	00 00       	nop

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
      94:	6d c0       	rjmp	.+218    	; 0x170 <__bad_interrupt>
      96:	00 00       	nop
      98:	6b c0       	rjmp	.+214    	; 0x170 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	69 c0       	rjmp	.+210    	; 0x170 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	67 c0       	rjmp	.+206    	; 0x170 <__bad_interrupt>
				}
				else
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];
      a2:	00 00       	nop
      a4:	65 c0       	rjmp	.+202    	; 0x170 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	63 c0       	rjmp	.+198    	; 0x170 <__bad_interrupt>
      aa:	00 00       	nop

000000ac <ProductString>:
      ac:	1c 03 4c 00 55 00 46 00 41 00 20 00 43 00 44 00     ..L.U.F.A. .C.D.

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
      bc:	43 00 20 00 44 00 65 00 6d 00 6f 00 00 00           C. .D.e.m.o...

000000ca <ManufacturerString>:

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
	{
		uint8_t  HIDReportItem  = *ReportData;
      ca:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
		uint32_t ReportItemData = 0;

		ReportData++;
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
      da:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

000000e4 <LanguageString>:
      e4:	04 03 09 04                                         ....

000000e8 <ConfigurationDescriptor>:
	while (ReportSize)
	{
		uint8_t  HIDReportItem  = *ReportData;
		uint32_t ReportItemData = 0;

		ReportData++;
      e8:	09 02 3e 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..>.....2.......
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = le32_to_cpu(*((uint32_t*)ReportData));
      f8:	01 00 05 24 00 10 01 04 24 02 06 05 24 06 00 01     ...$....$...$...
				ReportSize     -= 4;
     108:	07 05 82 03 08 00 ff 09 04 01 00 02 0a 00 00 00     ................
				ReportData     += 4;
				break;
			case HID_RI_DATA_BITS_16:
				ReportItemData  = le16_to_cpu(*((uint16_t*)ReportData));
     118:	07 05 04 02 10 00 01 07 05 83 02 10 00 01           ..............

00000126 <DeviceDescriptor>:
				ReportSize     -= 2;
				ReportData     += 2;
     126:	12 01 10 01 02 00 00 08 eb 03 44 20 01 00 01 02     ..........D ....
				break;
			case HID_RI_DATA_BITS_8:
				ReportItemData  = *((uint8_t*)ReportData);
     136:	dc 01                                               ..

00000138 <__ctors_end>:
     138:	11 24       	eor	r1, r1
				ReportSize     -= 1;
     13a:	1f be       	out	0x3f, r1	; 63
     13c:	cf ef       	ldi	r28, 0xFF	; 255
     13e:	da e0       	ldi	r29, 0x0A	; 10
				ReportData     += 1;
     140:	de bf       	out	0x3e, r29	; 62
     142:	cd bf       	out	0x3d, r28	; 61

00000144 <__do_copy_data>:
     144:	12 e0       	ldi	r17, 0x02	; 2
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     146:	a0 e0       	ldi	r26, 0x00	; 0
     148:	b1 e0       	ldi	r27, 0x01	; 1
     14a:	e4 e1       	ldi	r30, 0x14	; 20
     14c:	f6 e1       	ldi	r31, 0x16	; 22
     14e:	02 c0       	rjmp	.+4      	; 0x154 <__do_copy_data+0x10>
     150:	05 90       	lpm	r0, Z+
     152:	0d 92       	st	X+, r0
     154:	a4 31       	cpi	r26, 0x14	; 20
     156:	b1 07       	cpc	r27, r17
     158:	d9 f7       	brne	.-10     	; 0x150 <__do_copy_data+0xc>

0000015a <__do_clear_bss>:
     15a:	12 e0       	ldi	r17, 0x02	; 2
     15c:	a4 e1       	ldi	r26, 0x14	; 20
     15e:	b2 e0       	ldi	r27, 0x02	; 2
     160:	01 c0       	rjmp	.+2      	; 0x164 <.do_clear_bss_start>

00000162 <.do_clear_bss_loop>:
     162:	1d 92       	st	X+, r1

00000164 <.do_clear_bss_start>:
     164:	ac 33       	cpi	r26, 0x3C	; 60
     166:	b1 07       	cpc	r27, r17
     168:	e1 f7       	brne	.-8      	; 0x162 <.do_clear_bss_loop>
     16a:	03 d0       	rcall	.+6      	; 0x172 <main>
     16c:	0c 94 08 0b 	jmp	0x1610	; 0x1610 <_exit>

00000170 <__bad_interrupt>:
     170:	47 cf       	rjmp	.-370    	; 0x0 <__vectors>

00000172 <main>:
     172:	e3 d0       	rcall	.+454    	; 0x33a <SetupHardware>
     174:	61 e2       	ldi	r22, 0x21	; 33
     176:	72 e0       	ldi	r23, 0x02	; 2
     178:	80 e0       	ldi	r24, 0x00	; 0
     17a:	91 e0       	ldi	r25, 0x01	; 1
     17c:	0e 94 97 09 	call	0x132e	; 0x132e <CDC_Device_CreateStream>
     180:	85 e0       	ldi	r24, 0x05	; 5
     182:	85 bd       	out	0x25, r24	; 37
     184:	81 e0       	ldi	r24, 0x01	; 1
     186:	80 93 6e 00 	sts	0x006E, r24
     18a:	78 94       	sei
     18c:	09 c0       	rjmp	.+18     	; 0x1a0 <main+0x2e>
     18e:	61 e2       	ldi	r22, 0x21	; 33
     190:	72 e0       	ldi	r23, 0x02	; 2
     192:	8e e2       	ldi	r24, 0x2E	; 46
     194:	90 e0       	ldi	r25, 0x00	; 0
     196:	0e 94 75 0a 	call	0x14ea	; 0x14ea <fputc>
     19a:	84 e6       	ldi	r24, 0x64	; 100
     19c:	90 e0       	ldi	r25, 0x00	; 0
     19e:	ad d3       	rcall	.+1882   	; 0x8fa <delay_ms>
     1a0:	80 91 14 02 	lds	r24, 0x0214
     1a4:	90 91 15 02 	lds	r25, 0x0215
     1a8:	80 97       	sbiw	r24, 0x20	; 32
     1aa:	89 f7       	brne	.-30     	; 0x18e <main+0x1c>
     1ac:	10 92 15 02 	sts	0x0215, r1
     1b0:	10 92 14 02 	sts	0x0214, r1
     1b4:	fd d0       	rcall	.+506    	; 0x3b0 <nrf_init>
     1b6:	84 ef       	ldi	r24, 0xF4	; 244
     1b8:	91 e0       	ldi	r25, 0x01	; 1
     1ba:	9f d3       	rcall	.+1854   	; 0x8fa <delay_ms>
     1bc:	64 d2       	rcall	.+1224   	; 0x686 <nrf_spillRegisters>
     1be:	61 e2       	ldi	r22, 0x21	; 33
     1c0:	72 e0       	ldi	r23, 0x02	; 2
     1c2:	89 e1       	ldi	r24, 0x19	; 25
     1c4:	91 e0       	ldi	r25, 0x01	; 1
     1c6:	0e 94 a1 0a 	call	0x1542	; 0x1542 <fputs>
     1ca:	4a e0       	ldi	r20, 0x0A	; 10
     1cc:	50 e0       	ldi	r21, 0x00	; 0
     1ce:	6a e1       	ldi	r22, 0x1A	; 26
     1d0:	72 e0       	ldi	r23, 0x02	; 2
     1d2:	80 e0       	ldi	r24, 0x00	; 0
     1d4:	90 e0       	ldi	r25, 0x00	; 0
     1d6:	0e 94 56 0a 	call	0x14ac	; 0x14ac <itoa>
     1da:	61 e2       	ldi	r22, 0x21	; 33
     1dc:	72 e0       	ldi	r23, 0x02	; 2
     1de:	8a e1       	ldi	r24, 0x1A	; 26
     1e0:	92 e0       	ldi	r25, 0x02	; 2
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
     1e2:	0e 94 a1 0a 	call	0x1542	; 0x1542 <fputs>
     1e6:	c0 e0       	ldi	r28, 0x00	; 0
     1e8:	d0 e0       	ldi	r29, 0x00	; 0
     1ea:	1f ef       	ldi	r17, 0xFF	; 255
     1ec:	07 e2       	ldi	r16, 0x27	; 39
				  return HID_PARSE_HIDStackOverflow;

				memcpy((CurrStateTable + 1),
     1ee:	80 e1       	ldi	r24, 0x10	; 16
     1f0:	f8 2e       	mov	r15, r24
     1f2:	21 96       	adiw	r28, 0x01	; 1
     1f4:	ce 01       	movw	r24, r28
     1f6:	1d d2       	rcall	.+1082   	; 0x632 <nrf_tx>
     1f8:	61 e2       	ldi	r22, 0x21	; 33
     1fa:	72 e0       	ldi	r23, 0x02	; 2
     1fc:	88 e1       	ldi	r24, 0x18	; 24
     1fe:	91 e0       	ldi	r25, 0x01	; 1
				       CurrStateTable,
				       sizeof(HID_ReportItem_t));

				CurrStateTable++;
     200:	0e 94 a1 0a 	call	0x1542	; 0x1542 <fputs>
				break;
			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
     204:	4a e0       	ldi	r20, 0x0A	; 10
     206:	50 e0       	ldi	r21, 0x00	; 0
     208:	6a e1       	ldi	r22, 0x1A	; 26
     20a:	72 e0       	ldi	r23, 0x02	; 2
     20c:	ce 01       	movw	r24, r28
     20e:	0e 94 56 0a 	call	0x14ac	; 0x14ac <itoa>
				  return HID_PARSE_HIDStackUnderflow;

				CurrStateTable--;
     212:	61 e2       	ldi	r22, 0x21	; 33
				break;
     214:	72 e0       	ldi	r23, 0x02	; 2
			case HID_RI_USAGE_PAGE(0):
				if ((HIDReportItem & HID_RI_DATA_SIZE_MASK) == HID_RI_DATA_BITS_32)
				  CurrStateTable->Attributes.Usage.Page = (ReportItemData >> 16);

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
     216:	8a e1       	ldi	r24, 0x1A	; 26
     218:	92 e0       	ldi	r25, 0x02	; 2
     21a:	0e 94 a1 0a 	call	0x1542	; 0x1542 <fputs>
     21e:	81 e0       	ldi	r24, 0x01	; 1
				break;
     220:	90 e0       	ldi	r25, 0x00	; 0
			case HID_RI_LOGICAL_MINIMUM(0):
				CurrStateTable->Attributes.Logical.Minimum  = ReportItemData;
     222:	62 d3       	rcall	.+1732   	; 0x8e8 <delay_us>
     224:	28 98       	cbi	0x05, 0	; 5
     226:	1e bd       	out	0x2e, r17	; 46
     228:	85 e0       	ldi	r24, 0x05	; 5
     22a:	90 e0       	ldi	r25, 0x00	; 0
				break;
     22c:	5d d3       	rcall	.+1722   	; 0x8e8 <delay_us>
			case HID_RI_LOGICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Logical.Maximum  = ReportItemData;
     22e:	0d b4       	in	r0, 0x2d	; 45
     230:	07 fe       	sbrs	r0, 7
     232:	fa cf       	rjmp	.-12     	; 0x228 <main+0xb6>
     234:	8e b5       	in	r24, 0x2e	; 46
     236:	80 93 16 02 	sts	0x0216, r24
     23a:	28 9a       	sbi	0x05, 0	; 5
				break;
     23c:	84 ff       	sbrs	r24, 4
			case HID_RI_PHYSICAL_MINIMUM(0):
				CurrStateTable->Attributes.Physical.Minimum = ReportItemData;
     23e:	19 c0       	rjmp	.+50     	; 0x272 <main+0x100>
     240:	61 e2       	ldi	r22, 0x21	; 33
     242:	72 e0       	ldi	r23, 0x02	; 2
     244:	8d e2       	ldi	r24, 0x2D	; 45
     246:	91 e0       	ldi	r25, 0x01	; 1
				break;
     248:	0e 94 a1 0a 	call	0x1542	; 0x1542 <fputs>
			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
     24c:	81 e0       	ldi	r24, 0x01	; 1
     24e:	90 e0       	ldi	r25, 0x00	; 0
     250:	4b d3       	rcall	.+1686   	; 0x8e8 <delay_us>
     252:	28 98       	cbi	0x05, 0	; 5
     254:	0e bd       	out	0x2e, r16	; 46
     256:	85 e0       	ldi	r24, 0x05	; 5
				break;
     258:	90 e0       	ldi	r25, 0x00	; 0
			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
     25a:	46 d3       	rcall	.+1676   	; 0x8e8 <delay_us>
     25c:	0d b4       	in	r0, 0x2d	; 45
				break;
     25e:	07 fe       	sbrs	r0, 7
			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
     260:	fa cf       	rjmp	.-12     	; 0x256 <main+0xe4>
     262:	fe bc       	out	0x2e, r15	; 46
     264:	85 e0       	ldi	r24, 0x05	; 5
     266:	90 e0       	ldi	r25, 0x00	; 0
     268:	3f d3       	rcall	.+1662   	; 0x8e8 <delay_us>
     26a:	0d b4       	in	r0, 0x2d	; 45
     26c:	07 fe       	sbrs	r0, 7
				break;
     26e:	fa cf       	rjmp	.-12     	; 0x264 <main+0xf2>
			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
     270:	28 9a       	sbi	0x05, 0	; 5
     272:	84 ef       	ldi	r24, 0xF4	; 244
				break;
     274:	91 e0       	ldi	r25, 0x01	; 1
			case HID_RI_REPORT_COUNT(0):
				CurrStateTable->ReportCount                 = ReportItemData;
     276:	41 d3       	rcall	.+1666   	; 0x8fa <delay_ms>
     278:	bc cf       	rjmp	.-136    	; 0x1f2 <main+0x80>

0000027a <__vector_23>:
     27a:	1f 92       	push	r1
				break;
     27c:	0f 92       	push	r0
			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;
     27e:	0f b6       	in	r0, 0x3f	; 63
     280:	0f 92       	push	r0
     282:	11 24       	eor	r1, r1

				if (ParserData->UsingReportIDs)
     284:	2f 93       	push	r18
     286:	3f 93       	push	r19
     288:	4f 93       	push	r20
     28a:	5f 93       	push	r21
     28c:	6f 93       	push	r22
     28e:	7f 93       	push	r23
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
     290:	8f 93       	push	r24
     292:	9f 93       	push	r25
     294:	af 93       	push	r26
     296:	bf 93       	push	r27
     298:	ef 93       	push	r30
     29a:	ff 93       	push	r31
     29c:	65 d0       	rcall	.+202    	; 0x368 <usb_ops>
     29e:	ff 91       	pop	r31
					{
						if (ParserData->ReportIDSizes[i].ReportID == CurrStateTable->ReportID)
     2a0:	ef 91       	pop	r30

#define  __INCLUDE_FROM_USB_DRIVER
#define  __INCLUDE_FROM_HID_DRIVER
#include "HIDParser.h"

uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
     2a2:	bf 91       	pop	r27
     2a4:	af 91       	pop	r26
     2a6:	9f 91       	pop	r25
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
					{
						if (ParserData->ReportIDSizes[i].ReportID == CurrStateTable->ReportID)
     2a8:	8f 91       	pop	r24
     2aa:	7f 91       	pop	r23
     2ac:	6f 91       	pop	r22
     2ae:	5f 91       	pop	r21
     2b0:	4f 91       	pop	r20
     2b2:	3f 91       	pop	r19
						{
							CurrReportIDInfo = &ParserData->ReportIDSizes[i];
     2b4:	2f 91       	pop	r18
     2b6:	0f 90       	pop	r0
     2b8:	0f be       	out	0x3f, r0	; 63
     2ba:	0f 90       	pop	r0
     2bc:	1f 90       	pop	r1
     2be:	18 95       	reti

000002c0 <CALLBACK_USB_GetDescriptor>:
     2c0:	29 2f       	mov	r18, r25
     2c2:	33 27       	eor	r19, r19
     2c4:	22 30       	cpi	r18, 0x02	; 2
     2c6:	31 05       	cpc	r19, r1
     2c8:	39 f0       	breq	.+14     	; 0x2d8 <CALLBACK_USB_GetDescriptor+0x18>
     2ca:	23 30       	cpi	r18, 0x03	; 3
     2cc:	31 05       	cpc	r19, r1

				if (ParserData->UsingReportIDs)
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
     2ce:	49 f0       	breq	.+18     	; 0x2e2 <CALLBACK_USB_GetDescriptor+0x22>
     2d0:	21 30       	cpi	r18, 0x01	; 1
     2d2:	31 05       	cpc	r19, r1
					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
						  return HID_PARSE_InsufficientReportIDItems;

						CurrReportIDInfo = &ParserData->ReportIDSizes[ParserData->TotalDeviceReports++];
     2d4:	21 f1       	breq	.+72     	; 0x31e <CALLBACK_USB_GetDescriptor+0x5e>
     2d6:	28 c0       	rjmp	.+80     	; 0x328 <CALLBACK_USB_GetDescriptor+0x68>
     2d8:	ee e3       	ldi	r30, 0x3E	; 62
     2da:	f0 e0       	ldi	r31, 0x00	; 0
     2dc:	88 ee       	ldi	r24, 0xE8	; 232
     2de:	90 e0       	ldi	r25, 0x00	; 0
     2e0:	27 c0       	rjmp	.+78     	; 0x330 <CALLBACK_USB_GetDescriptor+0x70>
     2e2:	99 27       	eor	r25, r25
     2e4:	81 30       	cpi	r24, 0x01	; 1
     2e6:	91 05       	cpc	r25, r1
     2e8:	61 f0       	breq	.+24     	; 0x302 <CALLBACK_USB_GetDescriptor+0x42>
     2ea:	82 30       	cpi	r24, 0x02	; 2
     2ec:	91 05       	cpc	r25, r1
     2ee:	81 f0       	breq	.+32     	; 0x310 <CALLBACK_USB_GetDescriptor+0x50>
     2f0:	89 2b       	or	r24, r25
						memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
     2f2:	d1 f4       	brne	.+52     	; 0x328 <CALLBACK_USB_GetDescriptor+0x68>
     2f4:	e4 ee       	ldi	r30, 0xE4	; 228
     2f6:	f0 e0       	ldi	r31, 0x00	; 0
     2f8:	e4 91       	lpm	r30, Z
					}
				}

				ParserData->UsingReportIDs = true;
     2fa:	f0 e0       	ldi	r31, 0x00	; 0
     2fc:	84 ee       	ldi	r24, 0xE4	; 228
     2fe:	90 e0       	ldi	r25, 0x00	; 0
     300:	17 c0       	rjmp	.+46     	; 0x330 <CALLBACK_USB_GetDescriptor+0x70>
     302:	ea ec       	ldi	r30, 0xCA	; 202

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
     304:	f0 e0       	ldi	r31, 0x00	; 0
     306:	e4 91       	lpm	r30, Z
     308:	f0 e0       	ldi	r31, 0x00	; 0
     30a:	8a ec       	ldi	r24, 0xCA	; 202
				break;
     30c:	90 e0       	ldi	r25, 0x00	; 0
			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
     30e:	10 c0       	rjmp	.+32     	; 0x330 <CALLBACK_USB_GetDescriptor+0x70>
     310:	ec ea       	ldi	r30, 0xAC	; 172
     312:	f0 e0       	ldi	r31, 0x00	; 0
     314:	e4 91       	lpm	r30, Z
     316:	f0 e0       	ldi	r31, 0x00	; 0
     318:	8c ea       	ldi	r24, 0xAC	; 172
				  return HID_PARSE_UsageListOverflow;

				UsageList[UsageListSize++] = ReportItemData;
     31a:	90 e0       	ldi	r25, 0x00	; 0
     31c:	09 c0       	rjmp	.+18     	; 0x330 <CALLBACK_USB_GetDescriptor+0x70>
     31e:	e2 e1       	ldi	r30, 0x12	; 18
     320:	f0 e0       	ldi	r31, 0x00	; 0
     322:	86 e2       	ldi	r24, 0x26	; 38
     324:	91 e0       	ldi	r25, 0x01	; 1
     326:	04 c0       	rjmp	.+8      	; 0x330 <CALLBACK_USB_GetDescriptor+0x70>
     328:	e0 e0       	ldi	r30, 0x00	; 0
     32a:	f0 e0       	ldi	r31, 0x00	; 0
     32c:	80 e0       	ldi	r24, 0x00	; 0
     32e:	90 e0       	ldi	r25, 0x00	; 0
     330:	da 01       	movw	r26, r20
     332:	8d 93       	st	X+, r24
				break;
     334:	9c 93       	st	X, r25
			case HID_RI_USAGE_MINIMUM(0):
				UsageMinMax.Minimum = ReportItemData;
				break;
			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;
     336:	cf 01       	movw	r24, r30
     338:	08 95       	ret

0000033a <SetupHardware>:
     33a:	84 b7       	in	r24, 0x34	; 52
     33c:	87 7f       	andi	r24, 0xF7	; 247
     33e:	84 bf       	out	0x34, r24	; 52
     340:	88 e1       	ldi	r24, 0x18	; 24
     342:	0f b6       	in	r0, 0x3f	; 63
			case HID_RI_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     344:	f8 94       	cli
     346:	80 93 60 00 	sts	0x0060, r24
				{
					CurrCollectionPath = &ParserData->CollectionPaths[0];
     34a:	10 92 60 00 	sts	0x0060, r1
     34e:	0f be       	out	0x3f, r0	; 63
     350:	90 e0       	ldi	r25, 0x00	; 0
     352:	80 e8       	ldi	r24, 0x80	; 128
     354:	0f b6       	in	r0, 0x3f	; 63
				}
				else
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];
     356:	f8 94       	cli
     358:	80 93 61 00 	sts	0x0061, r24
     35c:	90 93 61 00 	sts	0x0061, r25
     360:	0f be       	out	0x3f, r0	; 63

					while (CurrCollectionPath->Parent != NULL)
     362:	6e 9a       	sbi	0x0d, 6	; 13
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
     364:	76 98       	cbi	0x0e, 6	; 14
     366:	9d c3       	rjmp	.+1850   	; 0xaa2 <USB_Init>

00000368 <usb_ops>:
     368:	80 e0       	ldi	r24, 0x00	; 0
     36a:	91 e0       	ldi	r25, 0x01	; 1
     36c:	70 d7       	rcall	.+3808   	; 0x124e <CDC_Device_BytesReceived>
     36e:	89 2b       	or	r24, r25
     370:	39 f0       	breq	.+14     	; 0x380 <usb_ops+0x18>
     372:	80 e0       	ldi	r24, 0x00	; 0
     374:	91 e0       	ldi	r25, 0x01	; 1
     376:	9a d7       	rcall	.+3892   	; 0x12ac <CDC_Device_ReceiveByte>
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
     378:	90 93 15 02 	sts	0x0215, r25
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
     37c:	80 93 14 02 	sts	0x0214, r24
     380:	80 e0       	ldi	r24, 0x00	; 0
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
					}

					CurrCollectionPath->Parent = ParentCollectionPath;
     382:	91 e0       	ldi	r25, 0x01	; 1
     384:	55 d7       	rcall	.+3754   	; 0x1230 <CDC_Device_USBTask>
     386:	91 c6       	rjmp	.+3362   	; 0x10aa <USB_USBTask>

00000388 <EVENT_USB_Device_Connect>:
				}

				CurrCollectionPath->Type       = ReportItemData;
     388:	76 98       	cbi	0x0e, 6	; 14
     38a:	08 95       	ret

0000038c <EVENT_USB_Device_Disconnect>:
				CurrCollectionPath->Usage.Page = CurrStateTable->Attributes.Usage.Page;
     38c:	76 9a       	sbi	0x0e, 6	; 14
     38e:	08 95       	ret

00000390 <EVENT_USB_Device_ConfigurationChanged>:
     390:	80 e0       	ldi	r24, 0x00	; 0
     392:	91 e0       	ldi	r25, 0x01	; 1
     394:	9c d6       	rcall	.+3384   	; 0x10ce <CDC_Device_ConfigureEndpoints>
     396:	88 23       	and	r24, r24
     398:	11 f0       	breq	.+4      	; 0x39e <EVENT_USB_Device_ConfigurationChanged+0xe>

				if (UsageListSize)
     39a:	90 e0       	ldi	r25, 0x00	; 0
     39c:	01 c0       	rjmp	.+2      	; 0x3a0 <EVENT_USB_Device_ConfigurationChanged+0x10>
     39e:	90 e4       	ldi	r25, 0x40	; 64
     3a0:	8e b1       	in	r24, 0x0e	; 14
     3a2:	8f 7b       	andi	r24, 0xBF	; 191
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];
     3a4:	89 2b       	or	r24, r25
     3a6:	8e b9       	out	0x0e, r24	; 14
     3a8:	08 95       	ret

000003aa <EVENT_USB_Device_ControlRequest>:
     3aa:	80 e0       	ldi	r24, 0x00	; 0
     3ac:	91 e0       	ldi	r25, 0x01	; 1
     3ae:	d3 c7       	rjmp	.+4006   	; 0x1356 <CDC_Device_ProcessControlRequest>

000003b0 <nrf_init>:
     3b0:	61 e2       	ldi	r22, 0x21	; 33
     3b2:	72 e0       	ldi	r23, 0x02	; 2
     3b4:	80 e6       	ldi	r24, 0x60	; 96
     3b6:	91 e0       	ldi	r25, 0x01	; 1
     3b8:	0e 94 a1 0a 	call	0x1542	; 0x1542 <fputs>

					for (uint8_t i = 0; i < UsageListSize; i++)
					  UsageList[i] = UsageList[i + 1];
     3bc:	20 9a       	sbi	0x04, 0	; 4
     3be:	28 9a       	sbi	0x05, 0	; 5
     3c0:	24 9a       	sbi	0x04, 4	; 4
     3c2:	2c 98       	cbi	0x05, 4	; 5

				if (UsageListSize)
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];

					for (uint8_t i = 0; i < UsageListSize; i++)
     3c4:	84 b1       	in	r24, 0x04	; 4
     3c6:	86 60       	ori	r24, 0x06	; 6
     3c8:	84 b9       	out	0x04, r24	; 4
     3ca:	23 98       	cbi	0x04, 3	; 4
     3cc:	81 e5       	ldi	r24, 0x51	; 81
     3ce:	8c bd       	out	0x2c, r24	; 44
					  UsageList[i] = UsageList[i + 1];

					UsageListSize--;
     3d0:	88 ec       	ldi	r24, 0xC8	; 200
     3d2:	90 e0       	ldi	r25, 0x00	; 0
     3d4:	89 d2       	rcall	.+1298   	; 0x8e8 <delay_us>
     3d6:	28 98       	cbi	0x05, 0	; 5
     3d8:	8f ef       	ldi	r24, 0xFF	; 255
				}
				else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     3da:	8e bd       	out	0x2e, r24	; 46
     3dc:	85 e0       	ldi	r24, 0x05	; 5
     3de:	90 e0       	ldi	r25, 0x00	; 0
     3e0:	83 d2       	rcall	.+1286   	; 0x8e8 <delay_us>
     3e2:	0d b4       	in	r0, 0x2d	; 45
     3e4:	07 fe       	sbrs	r0, 7
     3e6:	fa cf       	rjmp	.-12     	; 0x3dc <nrf_init+0x2c>
     3e8:	8e b5       	in	r24, 0x2e	; 46
     3ea:	80 93 16 02 	sts	0x0216, r24
     3ee:	28 9a       	sbi	0x05, 0	; 5
     3f0:	40 e1       	ldi	r20, 0x10	; 16
				{
					CurrCollectionPath->Usage.Usage = UsageMinMax.Minimum++;
     3f2:	50 e0       	ldi	r21, 0x00	; 0
     3f4:	6a e1       	ldi	r22, 0x1A	; 26
     3f6:	72 e0       	ldi	r23, 0x02	; 2
     3f8:	90 e0       	ldi	r25, 0x00	; 0
     3fa:	0e 94 56 0a 	call	0x14ac	; 0x14ac <itoa>
     3fe:	61 e2       	ldi	r22, 0x21	; 33
     400:	72 e0       	ldi	r23, 0x02	; 2
     402:	8f ef       	ldi	r24, 0xFF	; 255
     404:	91 e0       	ldi	r25, 0x01	; 1
     406:	0e 94 a1 0a 	call	0x1542	; 0x1542 <fputs>
				}

				break;
			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     40a:	61 e2       	ldi	r22, 0x21	; 33
     40c:	72 e0       	ldi	r23, 0x02	; 2
     40e:	8a e1       	ldi	r24, 0x1A	; 26
				  return HID_PARSE_UnexpectedEndCollection;

				CurrCollectionPath = CurrCollectionPath->Parent;
     410:	92 e0       	ldi	r25, 0x02	; 2
     412:	0e 94 a1 0a 	call	0x1542	; 0x1542 <fputs>
				break;
     416:	61 e2       	ldi	r22, 0x21	; 33
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
     418:	72 e0       	ldi	r23, 0x02	; 2
     41a:	85 e7       	ldi	r24, 0x75	; 117
     41c:	91 e0       	ldi	r25, 0x01	; 1
     41e:	0e 94 a1 0a 	call	0x1542	; 0x1542 <fputs>
     422:	80 91 16 02 	lds	r24, 0x0216
     426:	18 16       	cp	r1, r24
     428:	4c f0       	brlt	.+18     	; 0x43c <nrf_init+0x8c>
					       &CurrStateTable->Attributes,
					       sizeof(HID_ReportItem_Attributes_t));

					NewReportItem.ItemFlags      = ReportItemData;
     42a:	61 e2       	ldi	r22, 0x21	; 33
     42c:	72 e0       	ldi	r23, 0x02	; 2
					NewReportItem.CollectionPath = CurrCollectionPath;
     42e:	88 e7       	ldi	r24, 0x78	; 120
     430:	91 e0       	ldi	r25, 0x01	; 1
     432:	0e 94 a1 0a 	call	0x1542	; 0x1542 <fputs>
					NewReportItem.ReportID       = CurrStateTable->ReportID;
     436:	80 ed       	ldi	r24, 0xD0	; 208
     438:	97 e0       	ldi	r25, 0x07	; 7
     43a:	5f c2       	rjmp	.+1214   	; 0x8fa <delay_ms>
     43c:	28 98       	cbi	0x05, 0	; 5

					if (UsageListSize)
     43e:	83 e2       	ldi	r24, 0x23	; 35
     440:	8e bd       	out	0x2e, r24	; 46
     442:	85 e0       	ldi	r24, 0x05	; 5
     444:	90 e0       	ldi	r25, 0x00	; 0
     446:	50 d2       	rcall	.+1184   	; 0x8e8 <delay_us>
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];
     448:	0d b4       	in	r0, 0x2d	; 45
     44a:	07 fe       	sbrs	r0, 7
     44c:	fa cf       	rjmp	.-12     	; 0x442 <nrf_init+0x92>
     44e:	83 e0       	ldi	r24, 0x03	; 3
     450:	8e bd       	out	0x2e, r24	; 46
     452:	85 e0       	ldi	r24, 0x05	; 5
     454:	90 e0       	ldi	r25, 0x00	; 0
     456:	48 d2       	rcall	.+1168   	; 0x8e8 <delay_us>
     458:	0d b4       	in	r0, 0x2d	; 45
     45a:	07 fe       	sbrs	r0, 7
     45c:	fa cf       	rjmp	.-12     	; 0x452 <nrf_init+0xa2>

						for (uint8_t i = 0; i < UsageListSize; i++)
     45e:	28 9a       	sbi	0x05, 0	; 5
						  UsageList[i] = UsageList[i + 1];
     460:	81 e0       	ldi	r24, 0x01	; 1
     462:	90 e0       	ldi	r25, 0x00	; 0
     464:	41 d2       	rcall	.+1154   	; 0x8e8 <delay_us>
     466:	28 98       	cbi	0x05, 0	; 5

					if (UsageListSize)
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];

						for (uint8_t i = 0; i < UsageListSize; i++)
     468:	80 e3       	ldi	r24, 0x30	; 48
     46a:	8e bd       	out	0x2e, r24	; 46
     46c:	85 e0       	ldi	r24, 0x05	; 5
     46e:	90 e0       	ldi	r25, 0x00	; 0
     470:	3b d2       	rcall	.+1142   	; 0x8e8 <delay_us>
     472:	0d b4       	in	r0, 0x2d	; 45
						  UsageList[i] = UsageList[i + 1];

						UsageListSize--;
     474:	07 fe       	sbrs	r0, 7
     476:	fa cf       	rjmp	.-12     	; 0x46c <nrf_init+0xbc>
     478:	8a ea       	ldi	r24, 0xAA	; 170
     47a:	8e bd       	out	0x2e, r24	; 46
     47c:	85 e0       	ldi	r24, 0x05	; 5
					}
					else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     47e:	90 e0       	ldi	r25, 0x00	; 0
     480:	33 d2       	rcall	.+1126   	; 0x8e8 <delay_us>
     482:	0d b4       	in	r0, 0x2d	; 45
     484:	07 fe       	sbrs	r0, 7
     486:	fa cf       	rjmp	.-12     	; 0x47c <nrf_init+0xcc>
     488:	82 e2       	ldi	r24, 0x22	; 34
     48a:	8e bd       	out	0x2e, r24	; 46
     48c:	85 e0       	ldi	r24, 0x05	; 5
     48e:	90 e0       	ldi	r25, 0x00	; 0
     490:	2b d2       	rcall	.+1110   	; 0x8e8 <delay_us>
     492:	0d b4       	in	r0, 0x2d	; 45
					{
						NewReportItem.Attributes.Usage.Usage = UsageMinMax.Minimum++;
     494:	07 fe       	sbrs	r0, 7
     496:	fa cf       	rjmp	.-12     	; 0x48c <nrf_init+0xdc>
     498:	84 e4       	ldi	r24, 0x44	; 68
     49a:	8e bd       	out	0x2e, r24	; 46
     49c:	85 e0       	ldi	r24, 0x05	; 5
     49e:	90 e0       	ldi	r25, 0x00	; 0
     4a0:	23 d2       	rcall	.+1094   	; 0x8e8 <delay_us>
     4a2:	0d b4       	in	r0, 0x2d	; 45
     4a4:	07 fe       	sbrs	r0, 7
					}

					uint8_t ItemTypeTag = (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK));

					if (ItemTypeTag == HID_RI_INPUT(0))
     4a6:	fa cf       	rjmp	.-12     	; 0x49c <nrf_init+0xec>
     4a8:	1e bc       	out	0x2e, r1	; 46
					  NewReportItem.ItemType = HID_REPORT_ITEM_In;
     4aa:	85 e0       	ldi	r24, 0x05	; 5
     4ac:	90 e0       	ldi	r25, 0x00	; 0
					else if (ItemTypeTag == HID_RI_OUTPUT(0))
     4ae:	1c d2       	rcall	.+1080   	; 0x8e8 <delay_us>
     4b0:	0d b4       	in	r0, 0x2d	; 45
					  NewReportItem.ItemType = HID_REPORT_ITEM_Out;
     4b2:	07 fe       	sbrs	r0, 7
     4b4:	fa cf       	rjmp	.-12     	; 0x4aa <nrf_init+0xfa>
     4b6:	81 e1       	ldi	r24, 0x11	; 17
					else
					  NewReportItem.ItemType = HID_REPORT_ITEM_Feature;
     4b8:	8e bd       	out	0x2e, r24	; 46
     4ba:	85 e0       	ldi	r24, 0x05	; 5

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];
     4bc:	90 e0       	ldi	r25, 0x00	; 0
     4be:	14 d2       	rcall	.+1064   	; 0x8e8 <delay_us>
     4c0:	0d b4       	in	r0, 0x2d	; 45
     4c2:	07 fe       	sbrs	r0, 7
     4c4:	fa cf       	rjmp	.-12     	; 0x4ba <nrf_init+0x10a>
     4c6:	28 9a       	sbi	0x05, 0	; 5
     4c8:	81 e0       	ldi	r24, 0x01	; 1
     4ca:	90 e0       	ldi	r25, 0x00	; 0
     4cc:	0d d2       	rcall	.+1050   	; 0x8e8 <delay_us>
     4ce:	28 98       	cbi	0x05, 0	; 5

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;
     4d0:	8a e2       	ldi	r24, 0x2A	; 42
     4d2:	8e bd       	out	0x2e, r24	; 46
     4d4:	85 e0       	ldi	r24, 0x05	; 5
     4d6:	90 e0       	ldi	r25, 0x00	; 0
     4d8:	07 d2       	rcall	.+1038   	; 0x8e8 <delay_us>
     4da:	0d b4       	in	r0, 0x2d	; 45
     4dc:	07 fe       	sbrs	r0, 7
     4de:	fa cf       	rjmp	.-12     	; 0x4d4 <nrf_init+0x124>

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
     4e0:	8a ea       	ldi	r24, 0xAA	; 170
     4e2:	8e bd       	out	0x2e, r24	; 46
     4e4:	85 e0       	ldi	r24, 0x05	; 5
     4e6:	90 e0       	ldi	r25, 0x00	; 0
     4e8:	ff d1       	rcall	.+1022   	; 0x8e8 <delay_us>
     4ea:	0d b4       	in	r0, 0x2d	; 45
     4ec:	07 fe       	sbrs	r0, 7
     4ee:	fa cf       	rjmp	.-12     	; 0x4e4 <nrf_init+0x134>
     4f0:	82 e2       	ldi	r24, 0x22	; 34
     4f2:	8e bd       	out	0x2e, r24	; 46
     4f4:	85 e0       	ldi	r24, 0x05	; 5
     4f6:	90 e0       	ldi	r25, 0x00	; 0
     4f8:	f7 d1       	rcall	.+1006   	; 0x8e8 <delay_us>
     4fa:	0d b4       	in	r0, 0x2d	; 45
     4fc:	07 fe       	sbrs	r0, 7
     4fe:	fa cf       	rjmp	.-12     	; 0x4f4 <nrf_init+0x144>
     500:	84 e4       	ldi	r24, 0x44	; 68
     502:	8e bd       	out	0x2e, r24	; 46
     504:	85 e0       	ldi	r24, 0x05	; 5
     506:	90 e0       	ldi	r25, 0x00	; 0
     508:	ef d1       	rcall	.+990    	; 0x8e8 <delay_us>
     50a:	0d b4       	in	r0, 0x2d	; 45
     50c:	07 fe       	sbrs	r0, 7
     50e:	fa cf       	rjmp	.-12     	; 0x504 <nrf_init+0x154>
     510:	1e bc       	out	0x2e, r1	; 46

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
     512:	85 e0       	ldi	r24, 0x05	; 5
     514:	90 e0       	ldi	r25, 0x00	; 0
     516:	e8 d1       	rcall	.+976    	; 0x8e8 <delay_us>
     518:	0d b4       	in	r0, 0x2d	; 45
					  return HID_PARSE_InsufficientReportItems;
     51a:	07 fe       	sbrs	r0, 7
     51c:	fa cf       	rjmp	.-12     	; 0x512 <nrf_init+0x162>

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
     51e:	81 e1       	ldi	r24, 0x11	; 17
     520:	8e bd       	out	0x2e, r24	; 46
     522:	85 e0       	ldi	r24, 0x05	; 5
     524:	90 e0       	ldi	r25, 0x00	; 0
     526:	e0 d1       	rcall	.+960    	; 0x8e8 <delay_us>
     528:	0d b4       	in	r0, 0x2d	; 45
     52a:	07 fe       	sbrs	r0, 7
     52c:	fa cf       	rjmp	.-12     	; 0x522 <nrf_init+0x172>
     52e:	28 9a       	sbi	0x05, 0	; 5
     530:	81 e0       	ldi	r24, 0x01	; 1
     532:	90 e0       	ldi	r25, 0x00	; 0
     534:	d9 d1       	rcall	.+946    	; 0x8e8 <delay_us>
     536:	28 98       	cbi	0x05, 0	; 5
     538:	81 e3       	ldi	r24, 0x31	; 49
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     53a:	8e bd       	out	0x2e, r24	; 46
     53c:	85 e0       	ldi	r24, 0x05	; 5
     53e:	90 e0       	ldi	r25, 0x00	; 0
     540:	d3 d1       	rcall	.+934    	; 0x8e8 <delay_us>
     542:	0d b4       	in	r0, 0x2d	; 45
     544:	07 fe       	sbrs	r0, 7
     546:	fa cf       	rjmp	.-12     	; 0x53c <nrf_init+0x18c>
     548:	82 e0       	ldi	r24, 0x02	; 2
     54a:	8e bd       	out	0x2e, r24	; 46
     54c:	85 e0       	ldi	r24, 0x05	; 5
     54e:	90 e0       	ldi	r25, 0x00	; 0
     550:	cb d1       	rcall	.+918    	; 0x8e8 <delay_us>
     552:	0d b4       	in	r0, 0x2d	; 45
     554:	07 fe       	sbrs	r0, 7
     556:	fa cf       	rjmp	.-12     	; 0x54c <nrf_init+0x19c>
     558:	28 9a       	sbi	0x05, 0	; 5
     55a:	81 e0       	ldi	r24, 0x01	; 1
     55c:	90 e0       	ldi	r25, 0x00	; 0
     55e:	c4 d1       	rcall	.+904    	; 0x8e8 <delay_us>
     560:	28 98       	cbi	0x05, 0	; 5
     562:	82 e2       	ldi	r24, 0x22	; 34
     564:	8e bd       	out	0x2e, r24	; 46
     566:	85 e0       	ldi	r24, 0x05	; 5
     568:	90 e0       	ldi	r25, 0x00	; 0
     56a:	be d1       	rcall	.+892    	; 0x8e8 <delay_us>
     56c:	0d b4       	in	r0, 0x2d	; 45
     56e:	07 fe       	sbrs	r0, 7
     570:	fa cf       	rjmp	.-12     	; 0x566 <nrf_init+0x1b6>
     572:	81 e0       	ldi	r24, 0x01	; 1
     574:	8e bd       	out	0x2e, r24	; 46
     576:	85 e0       	ldi	r24, 0x05	; 5
     578:	90 e0       	ldi	r25, 0x00	; 0
     57a:	b6 d1       	rcall	.+876    	; 0x8e8 <delay_us>
     57c:	0d b4       	in	r0, 0x2d	; 45
     57e:	07 fe       	sbrs	r0, 7
     580:	fa cf       	rjmp	.-12     	; 0x576 <nrf_init+0x1c6>
     582:	28 9a       	sbi	0x05, 0	; 5
     584:	81 e0       	ldi	r24, 0x01	; 1
     586:	90 e0       	ldi	r25, 0x00	; 0
     588:	af d1       	rcall	.+862    	; 0x8e8 <delay_us>
     58a:	28 98       	cbi	0x05, 0	; 5
     58c:	85 e2       	ldi	r24, 0x25	; 37
     58e:	8e bd       	out	0x2e, r24	; 46
     590:	85 e0       	ldi	r24, 0x05	; 5
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a9 d1       	rcall	.+850    	; 0x8e8 <delay_us>
     596:	0d b4       	in	r0, 0x2d	; 45
     598:	07 fe       	sbrs	r0, 7
     59a:	fa cf       	rjmp	.-12     	; 0x590 <nrf_init+0x1e0>
     59c:	88 e1       	ldi	r24, 0x18	; 24
     59e:	8e bd       	out	0x2e, r24	; 46
     5a0:	85 e0       	ldi	r24, 0x05	; 5
     5a2:	90 e0       	ldi	r25, 0x00	; 0
     5a4:	a1 d1       	rcall	.+834    	; 0x8e8 <delay_us>
     5a6:	0d b4       	in	r0, 0x2d	; 45
     5a8:	07 fe       	sbrs	r0, 7
     5aa:	fa cf       	rjmp	.-12     	; 0x5a0 <nrf_init+0x1f0>
     5ac:	28 9a       	sbi	0x05, 0	; 5
     5ae:	81 e0       	ldi	r24, 0x01	; 1
     5b0:	90 e0       	ldi	r25, 0x00	; 0
     5b2:	9a d1       	rcall	.+820    	; 0x8e8 <delay_us>
     5b4:	28 98       	cbi	0x05, 0	; 5
     5b6:	86 e2       	ldi	r24, 0x26	; 38
     5b8:	8e bd       	out	0x2e, r24	; 46
     5ba:	85 e0       	ldi	r24, 0x05	; 5
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	94 d1       	rcall	.+808    	; 0x8e8 <delay_us>
     5c0:	0d b4       	in	r0, 0x2d	; 45
     5c2:	07 fe       	sbrs	r0, 7
     5c4:	fa cf       	rjmp	.-12     	; 0x5ba <nrf_init+0x20a>
     5c6:	87 e0       	ldi	r24, 0x07	; 7
     5c8:	8e bd       	out	0x2e, r24	; 46
     5ca:	85 e0       	ldi	r24, 0x05	; 5
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	8c d1       	rcall	.+792    	; 0x8e8 <delay_us>
     5d0:	0d b4       	in	r0, 0x2d	; 45
     5d2:	07 fe       	sbrs	r0, 7
					  ParserData->TotalReportItems++;
     5d4:	fa cf       	rjmp	.-12     	; 0x5ca <nrf_init+0x21a>
     5d6:	28 9a       	sbi	0x05, 0	; 5
     5d8:	81 e0       	ldi	r24, 0x01	; 1
     5da:	90 e0       	ldi	r25, 0x00	; 0
				CurrCollectionPath = CurrCollectionPath->Parent;
				break;
			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
     5dc:	85 d1       	rcall	.+778    	; 0x8e8 <delay_us>
     5de:	28 98       	cbi	0x05, 0	; 5
				ReportSize     -= 1;
				ReportData     += 1;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     5e0:	81 e2       	ldi	r24, 0x21	; 33
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     5e2:	8e bd       	out	0x2e, r24	; 46
     5e4:	85 e0       	ldi	r24, 0x05	; 5
     5e6:	90 e0       	ldi	r25, 0x00	; 0
     5e8:	7f d1       	rcall	.+766    	; 0x8e8 <delay_us>
     5ea:	0d b4       	in	r0, 0x2d	; 45
     5ec:	07 fe       	sbrs	r0, 7
     5ee:	fa cf       	rjmp	.-12     	; 0x5e4 <nrf_init+0x234>
     5f0:	81 e0       	ldi	r24, 0x01	; 1
     5f2:	8e bd       	out	0x2e, r24	; 46
     5f4:	85 e0       	ldi	r24, 0x05	; 5
     5f6:	90 e0       	ldi	r25, 0x00	; 0
     5f8:	77 d1       	rcall	.+750    	; 0x8e8 <delay_us>
				CurrCollectionPath = CurrCollectionPath->Parent;
				break;
			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
     5fa:	0d b4       	in	r0, 0x2d	; 45
     5fc:	07 fe       	sbrs	r0, 7
     5fe:	fa cf       	rjmp	.-12     	; 0x5f4 <nrf_init+0x244>
     600:	28 9a       	sbi	0x05, 0	; 5
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	90 e0       	ldi	r25, 0x00	; 0
     606:	70 d1       	rcall	.+736    	; 0x8e8 <delay_us>
				ReportSize     -= 1;
				ReportData     += 1;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     608:	28 98       	cbi	0x05, 0	; 5
     60a:	80 e2       	ldi	r24, 0x20	; 32
				}

				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
     60c:	8e bd       	out	0x2e, r24	; 46
     60e:	85 e0       	ldi	r24, 0x05	; 5
     610:	90 e0       	ldi	r25, 0x00	; 0
     612:	6a d1       	rcall	.+724    	; 0x8e8 <delay_us>
     614:	0d b4       	in	r0, 0x2d	; 45
		{
			UsageMinMax.Minimum = 0;
			UsageMinMax.Maximum = 0;
     616:	07 fe       	sbrs	r0, 7
     618:	fa cf       	rjmp	.-12     	; 0x60e <nrf_init+0x25e>
     61a:	8a e7       	ldi	r24, 0x7A	; 122
     61c:	8e bd       	out	0x2e, r24	; 46
     61e:	85 e0       	ldi	r24, 0x05	; 5
     620:	90 e0       	ldi	r25, 0x00	; 0
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
		{
			UsageMinMax.Minimum = 0;
     622:	62 d1       	rcall	.+708    	; 0x8e8 <delay_us>
     624:	0d b4       	in	r0, 0x2d	; 45
     626:	07 fe       	sbrs	r0, 7
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
     628:	fa cf       	rjmp	.-12     	; 0x61e <nrf_init+0x26e>
     62a:	28 9a       	sbi	0x05, 0	; 5
     62c:	8a e0       	ldi	r24, 0x0A	; 10
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
     62e:	90 e0       	ldi	r25, 0x00	; 0
     630:	5b c1       	rjmp	.+694    	; 0x8e8 <delay_us>

00000632 <nrf_tx>:
     632:	cf 93       	push	r28
     634:	df 93       	push	r29
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
		}
	}

	if (!(ParserData->TotalReportItems))
     636:	d8 2f       	mov	r29, r24
     638:	c9 2f       	mov	r28, r25
     63a:	28 98       	cbi	0x05, 0	; 5
     63c:	80 ea       	ldi	r24, 0xA0	; 160
	  return HID_PARSE_NoUnfilteredReportItems;
     63e:	8e bd       	out	0x2e, r24	; 46
     640:	85 e0       	ldi	r24, 0x05	; 5

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
				  return HID_PARSE_HIDStackOverflow;
     642:	90 e0       	ldi	r25, 0x00	; 0
     644:	51 d1       	rcall	.+674    	; 0x8e8 <delay_us>

				CurrStateTable++;
				break;
			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
				  return HID_PARSE_HIDStackUnderflow;
     646:	0d b4       	in	r0, 0x2d	; 45
     648:	07 fe       	sbrs	r0, 7

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
				break;
			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
				  return HID_PARSE_UsageListOverflow;
     64a:	fa cf       	rjmp	.-12     	; 0x640 <nrf_tx+0xe>
     64c:	8e b5       	in	r24, 0x2e	; 46
					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
						  return HID_PARSE_InsufficientCollectionPaths;
     64e:	80 93 16 02 	sts	0x0216, r24
				}

				break;
			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
				  return HID_PARSE_UnexpectedEndCollection;
     652:	de bd       	out	0x2e, r29	; 46
     654:	85 e0       	ldi	r24, 0x05	; 5
	}

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
     656:	90 e0       	ldi	r25, 0x00	; 0
     658:	47 d1       	rcall	.+654    	; 0x8e8 <delay_us>
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
						  return HID_PARSE_InsufficientReportIDItems;
     65a:	0d b4       	in	r0, 0x2d	; 45
     65c:	07 fe       	sbrs	r0, 7
						}
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
     65e:	fa cf       	rjmp	.-12     	; 0x654 <nrf_tx+0x22>
     660:	ce bd       	out	0x2e, r28	; 46
     662:	85 e0       	ldi	r24, 0x05	; 5
     664:	90 e0       	ldi	r25, 0x00	; 0

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
}
     666:	40 d1       	rcall	.+640    	; 0x8e8 <delay_us>
     668:	0d b4       	in	r0, 0x2d	; 45
     66a:	07 fe       	sbrs	r0, 7
     66c:	fa cf       	rjmp	.-12     	; 0x662 <nrf_tx+0x30>
     66e:	28 9a       	sbi	0x05, 0	; 5
     670:	85 e0       	ldi	r24, 0x05	; 5
     672:	90 e0       	ldi	r25, 0x00	; 0
     674:	39 d1       	rcall	.+626    	; 0x8e8 <delay_us>
     676:	2c 9a       	sbi	0x05, 4	; 5
     678:	84 e1       	ldi	r24, 0x14	; 20
     67a:	90 e0       	ldi	r25, 0x00	; 0
     67c:	35 d1       	rcall	.+618    	; 0x8e8 <delay_us>
     67e:	2c 98       	cbi	0x05, 4	; 5
     680:	df 91       	pop	r29
     682:	cf 91       	pop	r28
     684:	08 95       	ret

00000686 <nrf_spillRegisters>:
     686:	61 e2       	ldi	r22, 0x21	; 33
     688:	72 e0       	ldi	r23, 0x02	; 2
     68a:	8d e8       	ldi	r24, 0x8D	; 141
     68c:	91 e0       	ldi	r25, 0x01	; 1
     68e:	59 d7       	rcall	.+3762   	; 0x1542 <fputs>
     690:	81 e0       	ldi	r24, 0x01	; 1
     692:	90 e0       	ldi	r25, 0x00	; 0
     694:	29 d1       	rcall	.+594    	; 0x8e8 <delay_us>
     696:	28 98       	cbi	0x05, 0	; 5
     698:	1e bc       	out	0x2e, r1	; 46
void nrf_spillRegisters(void)
{
	fputs("Spilling registers...\r\n", &USBSerialStream);
	
	delay_us(1);
	SS_DOWN;
     69a:	85 e0       	ldi	r24, 0x05	; 5
	SPI_WRITE(R_REGISTER | NRG_CONFIG);
     69c:	90 e0       	ldi	r25, 0x00	; 0
     69e:	24 d1       	rcall	.+584    	; 0x8e8 <delay_us>
     6a0:	0d b4       	in	r0, 0x2d	; 45
     6a2:	07 fe       	sbrs	r0, 7
     6a4:	fa cf       	rjmp	.-12     	; 0x69a <nrf_spillRegisters+0x14>
     6a6:	8f ef       	ldi	r24, 0xFF	; 255
     6a8:	8e bd       	out	0x2e, r24	; 46
     6aa:	85 e0       	ldi	r24, 0x05	; 5
	SPI_WRITE(0xFF);
     6ac:	90 e0       	ldi	r25, 0x00	; 0
     6ae:	1c d1       	rcall	.+568    	; 0x8e8 <delay_us>
     6b0:	0d b4       	in	r0, 0x2d	; 45
     6b2:	07 fe       	sbrs	r0, 7
     6b4:	fa cf       	rjmp	.-12     	; 0x6aa <nrf_spillRegisters+0x24>
     6b6:	28 9a       	sbi	0x05, 0	; 5
     6b8:	8e b5       	in	r24, 0x2e	; 46
     6ba:	40 e1       	ldi	r20, 0x10	; 16
     6bc:	50 e0       	ldi	r21, 0x00	; 0
	SS_UP;
     6be:	6a e1       	ldi	r22, 0x1A	; 26
	itoa(SPDR, buffer, 16);
     6c0:	72 e0       	ldi	r23, 0x02	; 2
     6c2:	90 e0       	ldi	r25, 0x00	; 0
     6c4:	f3 d6       	rcall	.+3558   	; 0x14ac <itoa>
     6c6:	61 e2       	ldi	r22, 0x21	; 33
     6c8:	72 e0       	ldi	r23, 0x02	; 2
     6ca:	8f ef       	ldi	r24, 0xFF	; 255
     6cc:	91 e0       	ldi	r25, 0x01	; 1
     6ce:	39 d7       	rcall	.+3698   	; 0x1542 <fputs>
	fputs("Status register: 0x", &USBSerialStream);
     6d0:	61 e2       	ldi	r22, 0x21	; 33
     6d2:	72 e0       	ldi	r23, 0x02	; 2
     6d4:	8a e1       	ldi	r24, 0x1A	; 26
     6d6:	92 e0       	ldi	r25, 0x02	; 2
     6d8:	34 d7       	rcall	.+3688   	; 0x1542 <fputs>
     6da:	61 e2       	ldi	r22, 0x21	; 33
	fputs(buffer, &USBSerialStream);
     6dc:	72 e0       	ldi	r23, 0x02	; 2
     6de:	85 e7       	ldi	r24, 0x75	; 117
     6e0:	91 e0       	ldi	r25, 0x01	; 1
     6e2:	2f d7       	rcall	.+3678   	; 0x1542 <fputs>
     6e4:	81 e0       	ldi	r24, 0x01	; 1
     6e6:	90 e0       	ldi	r25, 0x00	; 0
	fputs("\r\n", &USBSerialStream);
     6e8:	ff d0       	rcall	.+510    	; 0x8e8 <delay_us>
     6ea:	28 98       	cbi	0x05, 0	; 5
     6ec:	81 e0       	ldi	r24, 0x01	; 1
     6ee:	8e bd       	out	0x2e, r24	; 46
     6f0:	85 e0       	ldi	r24, 0x05	; 5
     6f2:	90 e0       	ldi	r25, 0x00	; 0
	
	delay_us(1);
     6f4:	f9 d0       	rcall	.+498    	; 0x8e8 <delay_us>
     6f6:	0d b4       	in	r0, 0x2d	; 45
     6f8:	07 fe       	sbrs	r0, 7
     6fa:	fa cf       	rjmp	.-12     	; 0x6f0 <nrf_spillRegisters+0x6a>
	SS_DOWN;
     6fc:	8f ef       	ldi	r24, 0xFF	; 255
	SPI_WRITE(R_REGISTER | NRG_EN_AA);
     6fe:	8e bd       	out	0x2e, r24	; 46
     700:	85 e0       	ldi	r24, 0x05	; 5
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	f1 d0       	rcall	.+482    	; 0x8e8 <delay_us>
     706:	0d b4       	in	r0, 0x2d	; 45
     708:	07 fe       	sbrs	r0, 7
     70a:	fa cf       	rjmp	.-12     	; 0x700 <nrf_spillRegisters+0x7a>
     70c:	28 9a       	sbi	0x05, 0	; 5
     70e:	8e b5       	in	r24, 0x2e	; 46
	SPI_WRITE(0xFF);
     710:	40 e1       	ldi	r20, 0x10	; 16
     712:	50 e0       	ldi	r21, 0x00	; 0
     714:	6a e1       	ldi	r22, 0x1A	; 26
     716:	72 e0       	ldi	r23, 0x02	; 2
     718:	90 e0       	ldi	r25, 0x00	; 0
     71a:	c8 d6       	rcall	.+3472   	; 0x14ac <itoa>
     71c:	61 e2       	ldi	r22, 0x21	; 33
     71e:	72 e0       	ldi	r23, 0x02	; 2
     720:	85 ea       	ldi	r24, 0xA5	; 165
	SS_UP;
     722:	91 e0       	ldi	r25, 0x01	; 1
	itoa(SPDR, buffer, 16);
     724:	0e d7       	rcall	.+3612   	; 0x1542 <fputs>
     726:	61 e2       	ldi	r22, 0x21	; 33
     728:	72 e0       	ldi	r23, 0x02	; 2
     72a:	8a e1       	ldi	r24, 0x1A	; 26
     72c:	92 e0       	ldi	r25, 0x02	; 2
     72e:	09 d7       	rcall	.+3602   	; 0x1542 <fputs>
     730:	61 e2       	ldi	r22, 0x21	; 33
     732:	72 e0       	ldi	r23, 0x02	; 2
	fputs("EN_AA register: 0x", &USBSerialStream);
     734:	85 e7       	ldi	r24, 0x75	; 117
     736:	91 e0       	ldi	r25, 0x01	; 1
     738:	04 d7       	rcall	.+3592   	; 0x1542 <fputs>
     73a:	81 e0       	ldi	r24, 0x01	; 1
     73c:	90 e0       	ldi	r25, 0x00	; 0
     73e:	d4 d0       	rcall	.+424    	; 0x8e8 <delay_us>
	fputs(buffer, &USBSerialStream);
     740:	28 98       	cbi	0x05, 0	; 5
     742:	82 e0       	ldi	r24, 0x02	; 2
     744:	8e bd       	out	0x2e, r24	; 46
     746:	85 e0       	ldi	r24, 0x05	; 5
     748:	90 e0       	ldi	r25, 0x00	; 0
     74a:	ce d0       	rcall	.+412    	; 0x8e8 <delay_us>
	fputs("\r\n", &USBSerialStream);
     74c:	0d b4       	in	r0, 0x2d	; 45
     74e:	07 fe       	sbrs	r0, 7
     750:	fa cf       	rjmp	.-12     	; 0x746 <nrf_spillRegisters+0xc0>
     752:	8f ef       	ldi	r24, 0xFF	; 255
     754:	8e bd       	out	0x2e, r24	; 46
     756:	85 e0       	ldi	r24, 0x05	; 5

	delay_us(1);
     758:	90 e0       	ldi	r25, 0x00	; 0
     75a:	c6 d0       	rcall	.+396    	; 0x8e8 <delay_us>
     75c:	0d b4       	in	r0, 0x2d	; 45
     75e:	07 fe       	sbrs	r0, 7
	SS_DOWN;
     760:	fa cf       	rjmp	.-12     	; 0x756 <nrf_spillRegisters+0xd0>
	SPI_WRITE(R_REGISTER | NRG_EN_RXADDR);
     762:	28 9a       	sbi	0x05, 0	; 5
     764:	8e b5       	in	r24, 0x2e	; 46
     766:	40 e1       	ldi	r20, 0x10	; 16
     768:	50 e0       	ldi	r21, 0x00	; 0
     76a:	6a e1       	ldi	r22, 0x1A	; 26
     76c:	72 e0       	ldi	r23, 0x02	; 2
     76e:	90 e0       	ldi	r25, 0x00	; 0
     770:	9d d6       	rcall	.+3386   	; 0x14ac <itoa>
     772:	61 e2       	ldi	r22, 0x21	; 33
	SPI_WRITE(0xFF);
     774:	72 e0       	ldi	r23, 0x02	; 2
     776:	88 eb       	ldi	r24, 0xB8	; 184
     778:	91 e0       	ldi	r25, 0x01	; 1
     77a:	e3 d6       	rcall	.+3526   	; 0x1542 <fputs>
     77c:	61 e2       	ldi	r22, 0x21	; 33
     77e:	72 e0       	ldi	r23, 0x02	; 2
     780:	8a e1       	ldi	r24, 0x1A	; 26
     782:	92 e0       	ldi	r25, 0x02	; 2
     784:	de d6       	rcall	.+3516   	; 0x1542 <fputs>
	SS_UP;
     786:	61 e2       	ldi	r22, 0x21	; 33
	itoa(SPDR, buffer, 16);
     788:	72 e0       	ldi	r23, 0x02	; 2
     78a:	85 e7       	ldi	r24, 0x75	; 117
     78c:	91 e0       	ldi	r25, 0x01	; 1
     78e:	d9 d6       	rcall	.+3506   	; 0x1542 <fputs>
     790:	81 e0       	ldi	r24, 0x01	; 1
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	a9 d0       	rcall	.+338    	; 0x8e8 <delay_us>
     796:	28 98       	cbi	0x05, 0	; 5
	fputs("EN_RXADDR register: 0x", &USBSerialStream);
     798:	85 e0       	ldi	r24, 0x05	; 5
     79a:	8e bd       	out	0x2e, r24	; 46
     79c:	85 e0       	ldi	r24, 0x05	; 5
     79e:	90 e0       	ldi	r25, 0x00	; 0
     7a0:	a3 d0       	rcall	.+326    	; 0x8e8 <delay_us>
     7a2:	0d b4       	in	r0, 0x2d	; 45
	fputs(buffer, &USBSerialStream);
     7a4:	07 fe       	sbrs	r0, 7
     7a6:	fa cf       	rjmp	.-12     	; 0x79c <nrf_spillRegisters+0x116>
     7a8:	8f ef       	ldi	r24, 0xFF	; 255
     7aa:	8e bd       	out	0x2e, r24	; 46
     7ac:	85 e0       	ldi	r24, 0x05	; 5
     7ae:	90 e0       	ldi	r25, 0x00	; 0
	fputs("\r\n", &USBSerialStream);
     7b0:	9b d0       	rcall	.+310    	; 0x8e8 <delay_us>
     7b2:	0d b4       	in	r0, 0x2d	; 45
     7b4:	07 fe       	sbrs	r0, 7
     7b6:	fa cf       	rjmp	.-12     	; 0x7ac <nrf_spillRegisters+0x126>
     7b8:	28 9a       	sbi	0x05, 0	; 5
     7ba:	8e b5       	in	r24, 0x2e	; 46
	
	delay_us(1);
     7bc:	40 e1       	ldi	r20, 0x10	; 16
     7be:	50 e0       	ldi	r21, 0x00	; 0
     7c0:	6a e1       	ldi	r22, 0x1A	; 26
     7c2:	72 e0       	ldi	r23, 0x02	; 2
	SS_DOWN;
     7c4:	90 e0       	ldi	r25, 0x00	; 0
	SPI_WRITE(R_REGISTER | NRG_RF_CH);
     7c6:	72 d6       	rcall	.+3300   	; 0x14ac <itoa>
     7c8:	61 e2       	ldi	r22, 0x21	; 33
     7ca:	72 e0       	ldi	r23, 0x02	; 2
     7cc:	8f ec       	ldi	r24, 0xCF	; 207
     7ce:	91 e0       	ldi	r25, 0x01	; 1
     7d0:	b8 d6       	rcall	.+3440   	; 0x1542 <fputs>
     7d2:	61 e2       	ldi	r22, 0x21	; 33
     7d4:	72 e0       	ldi	r23, 0x02	; 2
     7d6:	8a e1       	ldi	r24, 0x1A	; 26
	SPI_WRITE(0xFF);
     7d8:	92 e0       	ldi	r25, 0x02	; 2
     7da:	b3 d6       	rcall	.+3430   	; 0x1542 <fputs>
     7dc:	61 e2       	ldi	r22, 0x21	; 33
     7de:	72 e0       	ldi	r23, 0x02	; 2
     7e0:	85 e7       	ldi	r24, 0x75	; 117
     7e2:	91 e0       	ldi	r25, 0x01	; 1
     7e4:	ae d6       	rcall	.+3420   	; 0x1542 <fputs>
     7e6:	81 e0       	ldi	r24, 0x01	; 1
     7e8:	90 e0       	ldi	r25, 0x00	; 0
	SS_UP;
     7ea:	7e d0       	rcall	.+252    	; 0x8e8 <delay_us>
	itoa(SPDR, buffer, 16);
     7ec:	28 98       	cbi	0x05, 0	; 5
     7ee:	87 e0       	ldi	r24, 0x07	; 7
     7f0:	8e bd       	out	0x2e, r24	; 46
     7f2:	85 e0       	ldi	r24, 0x05	; 5
     7f4:	90 e0       	ldi	r25, 0x00	; 0
     7f6:	78 d0       	rcall	.+240    	; 0x8e8 <delay_us>
     7f8:	0d b4       	in	r0, 0x2d	; 45
     7fa:	07 fe       	sbrs	r0, 7
	fputs("RC_CH register: 0x", &USBSerialStream);
     7fc:	fa cf       	rjmp	.-12     	; 0x7f2 <nrf_spillRegisters+0x16c>
     7fe:	8f ef       	ldi	r24, 0xFF	; 255
     800:	8e bd       	out	0x2e, r24	; 46
     802:	85 e0       	ldi	r24, 0x05	; 5
     804:	90 e0       	ldi	r25, 0x00	; 0
     806:	70 d0       	rcall	.+224    	; 0x8e8 <delay_us>
	fputs(buffer, &USBSerialStream);
     808:	0d b4       	in	r0, 0x2d	; 45
     80a:	07 fe       	sbrs	r0, 7
     80c:	fa cf       	rjmp	.-12     	; 0x802 <nrf_spillRegisters+0x17c>
     80e:	28 9a       	sbi	0x05, 0	; 5
     810:	8e b5       	in	r24, 0x2e	; 46
     812:	40 e1       	ldi	r20, 0x10	; 16
	fputs("\r\n", &USBSerialStream);
     814:	50 e0       	ldi	r21, 0x00	; 0
     816:	6a e1       	ldi	r22, 0x1A	; 26
     818:	72 e0       	ldi	r23, 0x02	; 2
     81a:	90 e0       	ldi	r25, 0x00	; 0
     81c:	47 d6       	rcall	.+3214   	; 0x14ac <itoa>
     81e:	61 e2       	ldi	r22, 0x21	; 33
	
	delay_us(1);
     820:	72 e0       	ldi	r23, 0x02	; 2
     822:	8f ef       	ldi	r24, 0xFF	; 255
     824:	91 e0       	ldi	r25, 0x01	; 1
     826:	8d d6       	rcall	.+3354   	; 0x1542 <fputs>
	SS_DOWN;
     828:	61 e2       	ldi	r22, 0x21	; 33
	SPI_WRITE(R_REGISTER | NRG_STATUS);
     82a:	72 e0       	ldi	r23, 0x02	; 2
     82c:	8a e1       	ldi	r24, 0x1A	; 26
     82e:	92 e0       	ldi	r25, 0x02	; 2
     830:	88 d6       	rcall	.+3344   	; 0x1542 <fputs>
     832:	61 e2       	ldi	r22, 0x21	; 33
     834:	72 e0       	ldi	r23, 0x02	; 2
     836:	85 e7       	ldi	r24, 0x75	; 117
     838:	91 e0       	ldi	r25, 0x01	; 1
     83a:	83 d6       	rcall	.+3334   	; 0x1542 <fputs>
	SPI_WRITE(0xFF);
     83c:	81 e0       	ldi	r24, 0x01	; 1
     83e:	90 e0       	ldi	r25, 0x00	; 0
     840:	53 d0       	rcall	.+166    	; 0x8e8 <delay_us>
     842:	28 98       	cbi	0x05, 0	; 5
     844:	88 e0       	ldi	r24, 0x08	; 8
     846:	8e bd       	out	0x2e, r24	; 46
     848:	85 e0       	ldi	r24, 0x05	; 5
     84a:	90 e0       	ldi	r25, 0x00	; 0
     84c:	4d d0       	rcall	.+154    	; 0x8e8 <delay_us>
	SS_UP;
     84e:	0d b4       	in	r0, 0x2d	; 45
	itoa(SPDR, buffer, 16);
     850:	07 fe       	sbrs	r0, 7
     852:	fa cf       	rjmp	.-12     	; 0x848 <nrf_spillRegisters+0x1c2>
     854:	8f ef       	ldi	r24, 0xFF	; 255
     856:	8e bd       	out	0x2e, r24	; 46
     858:	85 e0       	ldi	r24, 0x05	; 5
     85a:	90 e0       	ldi	r25, 0x00	; 0
     85c:	45 d0       	rcall	.+138    	; 0x8e8 <delay_us>
     85e:	0d b4       	in	r0, 0x2d	; 45
	fputs("Status register: 0x", &USBSerialStream);
     860:	07 fe       	sbrs	r0, 7
     862:	fa cf       	rjmp	.-12     	; 0x858 <nrf_spillRegisters+0x1d2>
     864:	28 9a       	sbi	0x05, 0	; 5
     866:	8e b5       	in	r24, 0x2e	; 46
     868:	40 e1       	ldi	r20, 0x10	; 16
     86a:	50 e0       	ldi	r21, 0x00	; 0
	fputs(buffer, &USBSerialStream);
     86c:	6a e1       	ldi	r22, 0x1A	; 26
     86e:	72 e0       	ldi	r23, 0x02	; 2
     870:	90 e0       	ldi	r25, 0x00	; 0
     872:	1c d6       	rcall	.+3128   	; 0x14ac <itoa>
     874:	61 e2       	ldi	r22, 0x21	; 33
     876:	72 e0       	ldi	r23, 0x02	; 2
	fputs("\r\n", &USBSerialStream);
     878:	82 ee       	ldi	r24, 0xE2	; 226
     87a:	91 e0       	ldi	r25, 0x01	; 1
     87c:	62 d6       	rcall	.+3268   	; 0x1542 <fputs>
     87e:	61 e2       	ldi	r22, 0x21	; 33
     880:	72 e0       	ldi	r23, 0x02	; 2
     882:	8a e1       	ldi	r24, 0x1A	; 26
	
	delay_us(1);
     884:	92 e0       	ldi	r25, 0x02	; 2
     886:	5d d6       	rcall	.+3258   	; 0x1542 <fputs>
     888:	61 e2       	ldi	r22, 0x21	; 33
     88a:	72 e0       	ldi	r23, 0x02	; 2
	SS_DOWN;
     88c:	85 e7       	ldi	r24, 0x75	; 117
	SPI_WRITE(R_REGISTER | NRG_OBSERVE_TX);
     88e:	91 e0       	ldi	r25, 0x01	; 1
     890:	58 d6       	rcall	.+3248   	; 0x1542 <fputs>
     892:	81 e0       	ldi	r24, 0x01	; 1
     894:	90 e0       	ldi	r25, 0x00	; 0
     896:	28 d0       	rcall	.+80     	; 0x8e8 <delay_us>
     898:	28 98       	cbi	0x05, 0	; 5
     89a:	87 e1       	ldi	r24, 0x17	; 23
     89c:	8e bd       	out	0x2e, r24	; 46
     89e:	85 e0       	ldi	r24, 0x05	; 5
	SPI_WRITE(0xFF);
     8a0:	90 e0       	ldi	r25, 0x00	; 0
     8a2:	22 d0       	rcall	.+68     	; 0x8e8 <delay_us>
     8a4:	0d b4       	in	r0, 0x2d	; 45
     8a6:	07 fe       	sbrs	r0, 7
     8a8:	fa cf       	rjmp	.-12     	; 0x89e <nrf_spillRegisters+0x218>
     8aa:	8f ef       	ldi	r24, 0xFF	; 255
     8ac:	8e bd       	out	0x2e, r24	; 46
     8ae:	85 e0       	ldi	r24, 0x05	; 5
     8b0:	90 e0       	ldi	r25, 0x00	; 0
	SS_UP;
     8b2:	1a d0       	rcall	.+52     	; 0x8e8 <delay_us>
	itoa(SPDR, buffer, 16);
     8b4:	0d b4       	in	r0, 0x2d	; 45
     8b6:	07 fe       	sbrs	r0, 7
     8b8:	fa cf       	rjmp	.-12     	; 0x8ae <nrf_spillRegisters+0x228>
     8ba:	28 9a       	sbi	0x05, 0	; 5
     8bc:	8e b5       	in	r24, 0x2e	; 46
     8be:	40 e1       	ldi	r20, 0x10	; 16
     8c0:	50 e0       	ldi	r21, 0x00	; 0
     8c2:	6a e1       	ldi	r22, 0x1A	; 26
	fputs("Observe TX register: 0x", &USBSerialStream);
     8c4:	72 e0       	ldi	r23, 0x02	; 2
     8c6:	90 e0       	ldi	r25, 0x00	; 0
     8c8:	f1 d5       	rcall	.+3042   	; 0x14ac <itoa>
     8ca:	61 e2       	ldi	r22, 0x21	; 33
     8cc:	72 e0       	ldi	r23, 0x02	; 2
     8ce:	8a ef       	ldi	r24, 0xFA	; 250
	fputs(buffer, &USBSerialStream);
     8d0:	91 e0       	ldi	r25, 0x01	; 1
     8d2:	37 d6       	rcall	.+3182   	; 0x1542 <fputs>
     8d4:	61 e2       	ldi	r22, 0x21	; 33
     8d6:	72 e0       	ldi	r23, 0x02	; 2
     8d8:	8a e1       	ldi	r24, 0x1A	; 26
     8da:	92 e0       	ldi	r25, 0x02	; 2
	fputs("\r\n", &USBSerialStream);
     8dc:	32 d6       	rcall	.+3172   	; 0x1542 <fputs>
     8de:	61 e2       	ldi	r22, 0x21	; 33
     8e0:	72 e0       	ldi	r23, 0x02	; 2
     8e2:	85 e7       	ldi	r24, 0x75	; 117
     8e4:	91 e0       	ldi	r25, 0x01	; 1
     8e6:	2d c6       	rjmp	.+3162   	; 0x1542 <fputs>

000008e8 <delay_us>:
#include "util.h"

void delay_us(uint16_t delah)
{
	while(delah)
     8e8:	05 c0       	rjmp	.+10     	; 0x8f4 <delay_us+0xc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     8ea:	25 e0       	ldi	r18, 0x05	; 5
     8ec:	2a 95       	dec	r18
     8ee:	f1 f7       	brne	.-4      	; 0x8ec <delay_us+0x4>
     8f0:	00 00       	nop
	{
		_delay_us(1);
		delah--;
     8f2:	01 97       	sbiw	r24, 0x01	; 1
#include "util.h"

void delay_us(uint16_t delah)
{
	while(delah)
     8f4:	00 97       	sbiw	r24, 0x00	; 0
     8f6:	c9 f7       	brne	.-14     	; 0x8ea <delay_us+0x2>
	{
		_delay_us(1);
		delah--;
	}
}
     8f8:	08 95       	ret

000008fa <delay_ms>:

void delay_ms(uint16_t delah)
{
	while(delah)
     8fa:	07 c0       	rjmp	.+14     	; 0x90a <delay_ms+0x10>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     8fc:	ef e9       	ldi	r30, 0x9F	; 159
     8fe:	ff e0       	ldi	r31, 0x0F	; 15
     900:	31 97       	sbiw	r30, 0x01	; 1
     902:	f1 f7       	brne	.-4      	; 0x900 <delay_ms+0x6>
     904:	00 c0       	rjmp	.+0      	; 0x906 <delay_ms+0xc>
     906:	00 00       	nop
	{
		_delay_ms(1);
		delah--;
     908:	01 97       	sbiw	r24, 0x01	; 1
	}
}

void delay_ms(uint16_t delah)
{
	while(delah)
     90a:	00 97       	sbiw	r24, 0x00	; 0
     90c:	b9 f7       	brne	.-18     	; 0x8fc <delay_ms+0x2>
	{
		_delay_ms(1);
		delah--;
	}
}
     90e:	08 95       	ret

00000910 <Endpoint_ConfigureEndpoint_Prv>:
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
     910:	98 2f       	mov	r25, r24
     912:	2c c0       	rjmp	.+88     	; 0x96c <Endpoint_ConfigureEndpoint_Prv+0x5c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     914:	90 93 e9 00 	sts	0x00E9, r25
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
     918:	98 17       	cp	r25, r24
     91a:	39 f0       	breq	.+14     	; 0x92a <Endpoint_ConfigureEndpoint_Prv+0x1a>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
     91c:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
     920:	20 91 ed 00 	lds	r18, 0x00ED
			UEIENXTemp  = UEIENX;
     924:	50 91 f0 00 	lds	r21, 0x00F0
     928:	03 c0       	rjmp	.+6      	; 0x930 <Endpoint_ConfigureEndpoint_Prv+0x20>
		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
			UECFG1XTemp = UECFG1XData;
     92a:	24 2f       	mov	r18, r20

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
     92c:	76 2f       	mov	r23, r22
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
     92e:	50 e0       	ldi	r21, 0x00	; 0
			UECFG0XTemp = UECFG0X;
			UECFG1XTemp = UECFG1X;
			UEIENXTemp  = UEIENX;
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
     930:	21 fd       	sbrc	r18, 1
     932:	02 c0       	rjmp	.+4      	; 0x938 <Endpoint_ConfigureEndpoint_Prv+0x28>
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
     934:	9f 5f       	subi	r25, 0xFF	; 255
     936:	1a c0       	rjmp	.+52     	; 0x96c <Endpoint_ConfigureEndpoint_Prv+0x5c>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
     938:	30 91 eb 00 	lds	r19, 0x00EB
     93c:	3e 7f       	andi	r19, 0xFE	; 254
     93e:	30 93 eb 00 	sts	0x00EB, r19

		if (!(UECFG1XTemp & (1 << ALLOC)))
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
     942:	30 91 ed 00 	lds	r19, 0x00ED
     946:	3d 7f       	andi	r19, 0xFD	; 253
     948:	30 93 ed 00 	sts	0x00ED, r19
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
     94c:	30 91 eb 00 	lds	r19, 0x00EB
     950:	31 60       	ori	r19, 0x01	; 1
     952:	30 93 eb 00 	sts	0x00EB, r19

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
     956:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
     95a:	20 93 ed 00 	sts	0x00ED, r18
		UEIENX  = UEIENXTemp;
     95e:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
     962:	20 91 ee 00 	lds	r18, 0x00EE

		if (!(Endpoint_IsConfigured()))
     966:	27 fd       	sbrc	r18, 7
     968:	e5 cf       	rjmp	.-54     	; 0x934 <Endpoint_ConfigureEndpoint_Prv+0x24>
     96a:	06 c0       	rjmp	.+12     	; 0x978 <Endpoint_ConfigureEndpoint_Prv+0x68>
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
     96c:	97 30       	cpi	r25, 0x07	; 7
     96e:	90 f2       	brcs	.-92     	; 0x914 <Endpoint_ConfigureEndpoint_Prv+0x4>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     970:	80 93 e9 00 	sts	0x00E9, r24
		if (!(Endpoint_IsConfigured()))
		  return false;
	}

	Endpoint_SelectEndpoint(Number);
	return true;
     974:	81 e0       	ldi	r24, 0x01	; 1
     976:	08 95       	ret
		UECFG0X = UECFG0XTemp;
		UECFG1X = UECFG1XTemp;
		UEIENX  = UEIENXTemp;

		if (!(Endpoint_IsConfigured()))
		  return false;
     978:	80 e0       	ldi	r24, 0x00	; 0
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
     97a:	08 95       	ret

0000097c <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     97c:	80 91 34 02 	lds	r24, 0x0234
     980:	87 fd       	sbrc	r24, 7
     982:	05 c0       	rjmp	.+10     	; 0x98e <Endpoint_ClearStatusStage+0x12>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     984:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
     988:	80 ff       	sbrs	r24, 0
     98a:	0e c0       	rjmp	.+28     	; 0x9a8 <Endpoint_ClearStatusStage+0x2c>
     98c:	12 c0       	rjmp	.+36     	; 0x9b2 <Endpoint_ClearStatusStage+0x36>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     98e:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
     992:	82 fd       	sbrc	r24, 2
     994:	05 c0       	rjmp	.+10     	; 0x9a0 <Endpoint_ClearStatusStage+0x24>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     996:	80 91 33 02 	lds	r24, 0x0233
     99a:	81 11       	cpse	r24, r1
     99c:	f8 cf       	rjmp	.-16     	; 0x98e <Endpoint_ClearStatusStage+0x12>
     99e:	08 95       	ret
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     9a0:	80 91 e8 00 	lds	r24, 0x00E8
     9a4:	8b 77       	andi	r24, 0x7B	; 123
     9a6:	08 c0       	rjmp	.+16     	; 0x9b8 <Endpoint_ClearStatusStage+0x3c>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     9a8:	80 91 33 02 	lds	r24, 0x0233
     9ac:	81 11       	cpse	r24, r1
     9ae:	ea cf       	rjmp	.-44     	; 0x984 <Endpoint_ClearStatusStage+0x8>
     9b0:	08 95       	ret
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     9b2:	80 91 e8 00 	lds	r24, 0x00E8
     9b6:	8e 77       	andi	r24, 0x7E	; 126
     9b8:	80 93 e8 00 	sts	0x00E8, r24
     9bc:	08 95       	ret

000009be <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
     9be:	80 91 e4 00 	lds	r24, 0x00E4
     9c2:	90 91 e5 00 	lds	r25, 0x00E5
     9c6:	45 e6       	ldi	r20, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     9c8:	20 91 ec 00 	lds	r18, 0x00EC
     9cc:	20 fd       	sbrc	r18, 0
     9ce:	1f c0       	rjmp	.+62     	; 0xa0e <Endpoint_WaitUntilReady+0x50>
     9d0:	23 c0       	rjmp	.+70     	; 0xa18 <Endpoint_WaitUntilReady+0x5a>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     9d2:	20 91 33 02 	lds	r18, 0x0233

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     9d6:	22 23       	and	r18, r18
     9d8:	91 f0       	breq	.+36     	; 0x9fe <Endpoint_WaitUntilReady+0x40>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     9da:	25 30       	cpi	r18, 0x05	; 5
     9dc:	91 f0       	breq	.+36     	; 0xa02 <Endpoint_WaitUntilReady+0x44>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     9de:	20 91 eb 00 	lds	r18, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
     9e2:	25 fd       	sbrc	r18, 5
     9e4:	10 c0       	rjmp	.+32     	; 0xa06 <Endpoint_WaitUntilReady+0x48>
     9e6:	20 91 e4 00 	lds	r18, 0x00E4
     9ea:	30 91 e5 00 	lds	r19, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     9ee:	28 17       	cp	r18, r24
     9f0:	39 07       	cpc	r19, r25
     9f2:	51 f3       	breq	.-44     	; 0x9c8 <Endpoint_WaitUntilReady+0xa>
     9f4:	41 50       	subi	r20, 0x01	; 1
     9f6:	c9 01       	movw	r24, r18
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     9f8:	39 f7       	brne	.-50     	; 0x9c8 <Endpoint_WaitUntilReady+0xa>
			  return ENDPOINT_READYWAIT_Timeout;
     9fa:	84 e0       	ldi	r24, 0x04	; 4
     9fc:	08 95       	ret
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
     9fe:	82 e0       	ldi	r24, 0x02	; 2
     a00:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
     a02:	83 e0       	ldi	r24, 0x03	; 3
     a04:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
     a06:	81 e0       	ldi	r24, 0x01	; 1
     a08:	08 95       	ret
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
     a0a:	80 e0       	ldi	r24, 0x00	; 0
     a0c:	08 95       	ret
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     a0e:	20 91 e8 00 	lds	r18, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
     a12:	20 ff       	sbrs	r18, 0
     a14:	de cf       	rjmp	.-68     	; 0x9d2 <Endpoint_WaitUntilReady+0x14>
     a16:	f9 cf       	rjmp	.-14     	; 0xa0a <Endpoint_WaitUntilReady+0x4c>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     a18:	20 91 e8 00 	lds	r18, 0x00E8
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
     a1c:	22 ff       	sbrs	r18, 2
     a1e:	d9 cf       	rjmp	.-78     	; 0x9d2 <Endpoint_WaitUntilReady+0x14>
     a20:	f4 cf       	rjmp	.-24     	; 0xa0a <Endpoint_WaitUntilReady+0x4c>

00000a22 <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
     a22:	0f 93       	push	r16
     a24:	1f 93       	push	r17
     a26:	cf 93       	push	r28
     a28:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     a2a:	46 d0       	rcall	.+140    	; 0xab8 <USB_INT_DisableAllInterrupts>
     a2c:	4d d0       	rcall	.+154    	; 0xac8 <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
     a2e:	c8 ed       	ldi	r28, 0xD8	; 216
     a30:	d0 e0       	ldi	r29, 0x00	; 0
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     a32:	88 81       	ld	r24, Y
     a34:	8f 77       	andi	r24, 0x7F	; 127
     a36:	88 83       	st	Y, r24
     a38:	88 81       	ld	r24, Y
     a3a:	80 68       	ori	r24, 0x80	; 128
				USBCON |=  (1 << USBE);
     a3c:	88 83       	st	Y, r24
     a3e:	88 81       	ld	r24, Y
     a40:	8f 7d       	andi	r24, 0xDF	; 223
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     a42:	88 83       	st	Y, r24
     a44:	19 bc       	out	0x29, r1	; 41
     a46:	10 92 33 02 	sts	0x0233, r1
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
     a4a:	10 92 2f 02 	sts	0x022F, r1
	USB_Device_ConfigurationNumber  = 0;
     a4e:	10 92 31 02 	sts	0x0231, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
     a52:	10 92 30 02 	sts	0x0230, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
     a56:	00 ee       	ldi	r16, 0xE0	; 224
     a58:	10 e0       	ldi	r17, 0x00	; 0
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
     a5a:	f8 01       	movw	r30, r16
     a5c:	80 81       	ld	r24, Z
     a5e:	8b 7f       	andi	r24, 0xFB	; 251
     a60:	80 83       	st	Z, r24
     a62:	88 81       	ld	r24, Y
     a64:	81 60       	ori	r24, 0x01	; 1
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
     a66:	88 83       	st	Y, r24
     a68:	42 e0       	ldi	r20, 0x02	; 2
     a6a:	60 e0       	ldi	r22, 0x00	; 0
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
     a6c:	80 e0       	ldi	r24, 0x00	; 0
     a6e:	50 df       	rcall	.-352    	; 0x910 <Endpoint_ConfigureEndpoint_Prv>
     a70:	e1 ee       	ldi	r30, 0xE1	; 225
     a72:	f0 e0       	ldi	r31, 0x00	; 0
     a74:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     a76:	8e 7f       	andi	r24, 0xFE	; 254
     a78:	80 83       	st	Z, r24
     a7a:	e2 ee       	ldi	r30, 0xE2	; 226
     a7c:	f0 e0       	ldi	r31, 0x00	; 0
     a7e:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     a80:	81 60       	ori	r24, 0x01	; 1
     a82:	80 83       	st	Z, r24
     a84:	80 81       	ld	r24, Z
     a86:	88 60       	ori	r24, 0x08	; 8
     a88:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
     a8a:	f8 01       	movw	r30, r16
     a8c:	80 81       	ld	r24, Z
     a8e:	8e 7f       	andi	r24, 0xFE	; 254
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     a90:	80 83       	st	Z, r24
     a92:	88 81       	ld	r24, Y
     a94:	80 61       	ori	r24, 0x10	; 16
     a96:	88 83       	st	Y, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     a98:	df 91       	pop	r29
     a9a:	cf 91       	pop	r28
     a9c:	1f 91       	pop	r17
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     a9e:	0f 91       	pop	r16
     aa0:	08 95       	ret

00000aa2 <USB_Init>:
     aa2:	e7 ed       	ldi	r30, 0xD7	; 215
     aa4:	f0 e0       	ldi	r31, 0x00	; 0
     aa6:	80 81       	ld	r24, Z

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
     aa8:	81 60       	ori	r24, 0x01	; 1
     aaa:	80 83       	st	Z, r24
	  USB_REG_Off();

	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = (1 << PDIV2);
     aac:	84 e0       	ldi	r24, 0x04	; 4
     aae:	82 bf       	out	0x32, r24	; 50
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     ab0:	81 e0       	ldi	r24, 0x01	; 1
     ab2:	80 93 32 02 	sts	0x0232, r24

	USB_ResetInterface();
     ab6:	b5 cf       	rjmp	.-150    	; 0xa22 <USB_ResetInterface>

00000ab8 <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
     ab8:	e8 ed       	ldi	r30, 0xD8	; 216
     aba:	f0 e0       	ldi	r31, 0x00	; 0
     abc:	80 81       	ld	r24, Z
     abe:	8e 7f       	andi	r24, 0xFE	; 254
     ac0:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
     ac2:	10 92 e2 00 	sts	0x00E2, r1
     ac6:	08 95       	ret

00000ac8 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     ac8:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
     acc:	10 92 e1 00 	sts	0x00E1, r1
     ad0:	08 95       	ret

00000ad2 <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
     ad2:	1f 92       	push	r1
     ad4:	0f 92       	push	r0
     ad6:	0f b6       	in	r0, 0x3f	; 63
     ad8:	0f 92       	push	r0
     ada:	11 24       	eor	r1, r1
     adc:	2f 93       	push	r18
     ade:	3f 93       	push	r19
     ae0:	4f 93       	push	r20
     ae2:	5f 93       	push	r21
     ae4:	6f 93       	push	r22
     ae6:	7f 93       	push	r23
     ae8:	8f 93       	push	r24
     aea:	9f 93       	push	r25
     aec:	af 93       	push	r26
     aee:	bf 93       	push	r27
     af0:	ef 93       	push	r30
     af2:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
     af4:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
     af8:	82 ff       	sbrs	r24, 2
     afa:	0a c0       	rjmp	.+20     	; 0xb10 <__stack+0x11>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
     afc:	80 91 e2 00 	lds	r24, 0x00E2
     b00:	82 ff       	sbrs	r24, 2
     b02:	06 c0       	rjmp	.+12     	; 0xb10 <__stack+0x11>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
     b04:	80 91 e1 00 	lds	r24, 0x00E1
     b08:	8b 7f       	andi	r24, 0xFB	; 251
     b0a:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
     b0e:	cc d2       	rcall	.+1432   	; 0x10a8 <USB_Event_Stub>
     b10:	80 91 da 00 	lds	r24, 0x00DA
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
     b14:	80 ff       	sbrs	r24, 0
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
     b16:	1d c0       	rjmp	.+58     	; 0xb52 <__stack+0x53>
     b18:	80 91 d8 00 	lds	r24, 0x00D8
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
     b1c:	80 ff       	sbrs	r24, 0
     b1e:	19 c0       	rjmp	.+50     	; 0xb52 <__stack+0x53>
     b20:	80 91 da 00 	lds	r24, 0x00DA
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
     b24:	8e 7f       	andi	r24, 0xFE	; 254
     b26:	80 93 da 00 	sts	0x00DA, r24
     b2a:	80 91 d9 00 	lds	r24, 0x00D9
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
     b2e:	80 ff       	sbrs	r24, 0
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
     b30:	0c c0       	rjmp	.+24     	; 0xb4a <__stack+0x4b>
     b32:	80 e1       	ldi	r24, 0x10	; 16

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     b34:	89 bd       	out	0x29, r24	; 41
     b36:	82 e1       	ldi	r24, 0x12	; 18
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     b38:	89 bd       	out	0x29, r24	; 41
     b3a:	09 b4       	in	r0, 0x29	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
     b3c:	00 fe       	sbrs	r0, 0
     b3e:	fd cf       	rjmp	.-6      	; 0xb3a <__stack+0x3b>
     b40:	81 e0       	ldi	r24, 0x01	; 1
			}

			USB_DeviceState = DEVICE_STATE_Powered;
     b42:	80 93 33 02 	sts	0x0233, r24
     b46:	20 dc       	rcall	.-1984   	; 0x388 <EVENT_USB_Device_Connect>
			EVENT_USB_Device_Connect();
     b48:	04 c0       	rjmp	.+8      	; 0xb52 <__stack+0x53>
     b4a:	19 bc       	out	0x29, r1	; 41
     b4c:	10 92 33 02 	sts	0x0233, r1
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
     b50:	1d dc       	rcall	.-1990   	; 0x38c <EVENT_USB_Device_Disconnect>
     b52:	80 91 e1 00 	lds	r24, 0x00E1
			EVENT_USB_Device_Disconnect();
     b56:	80 ff       	sbrs	r24, 0
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
     b58:	18 c0       	rjmp	.+48     	; 0xb8a <__stack+0x8b>
     b5a:	80 91 e2 00 	lds	r24, 0x00E2
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
     b5e:	80 ff       	sbrs	r24, 0
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
     b60:	14 c0       	rjmp	.+40     	; 0xb8a <__stack+0x8b>
     b62:	80 91 e2 00 	lds	r24, 0x00E2
     b66:	8e 7f       	andi	r24, 0xFE	; 254
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     b68:	80 93 e2 00 	sts	0x00E2, r24
     b6c:	80 91 e2 00 	lds	r24, 0x00E2
     b70:	80 61       	ori	r24, 0x10	; 16
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     b72:	80 93 e2 00 	sts	0x00E2, r24
     b76:	80 91 d8 00 	lds	r24, 0x00D8
     b7a:	80 62       	ori	r24, 0x20	; 32
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
     b7c:	80 93 d8 00 	sts	0x00D8, r24
     b80:	19 bc       	out	0x29, r1	; 41
     b82:	85 e0       	ldi	r24, 0x05	; 5
     b84:	80 93 33 02 	sts	0x0233, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
     b88:	8f d2       	rcall	.+1310   	; 0x10a8 <USB_Event_Stub>
     b8a:	80 91 e1 00 	lds	r24, 0x00E1
		EVENT_USB_Device_Suspend();
     b8e:	84 ff       	sbrs	r24, 4
     b90:	2d c0       	rjmp	.+90     	; 0xbec <__stack+0xed>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
     b92:	80 91 e2 00 	lds	r24, 0x00E2
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
     b96:	84 ff       	sbrs	r24, 4
     b98:	29 c0       	rjmp	.+82     	; 0xbec <__stack+0xed>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
     b9a:	80 e1       	ldi	r24, 0x10	; 16
     b9c:	89 bd       	out	0x29, r24	; 41
     b9e:	82 e1       	ldi	r24, 0x12	; 18
     ba0:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     ba2:	09 b4       	in	r0, 0x29	; 41
     ba4:	00 fe       	sbrs	r0, 0
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     ba6:	fd cf       	rjmp	.-6      	; 0xba2 <__stack+0xa3>
     ba8:	80 91 d8 00 	lds	r24, 0x00D8
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     bac:	8f 7d       	andi	r24, 0xDF	; 223
     bae:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     bb2:	80 91 e1 00 	lds	r24, 0x00E1
     bb6:	8f 7e       	andi	r24, 0xEF	; 239
     bb8:	80 93 e1 00 	sts	0x00E1, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
     bbc:	80 91 e2 00 	lds	r24, 0x00E2
     bc0:	8f 7e       	andi	r24, 0xEF	; 239
     bc2:	80 93 e2 00 	sts	0x00E2, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
     bc6:	80 91 e2 00 	lds	r24, 0x00E2
     bca:	81 60       	ori	r24, 0x01	; 1
     bcc:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     bd0:	80 91 2f 02 	lds	r24, 0x022F
     bd4:	81 11       	cpse	r24, r1
     bd6:	04 c0       	rjmp	.+8      	; 0xbe0 <__stack+0xe1>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
     bd8:	80 91 e3 00 	lds	r24, 0x00E3
     bdc:	87 ff       	sbrs	r24, 7
     bde:	02 c0       	rjmp	.+4      	; 0xbe4 <__stack+0xe5>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     be0:	84 e0       	ldi	r24, 0x04	; 4
     be2:	01 c0       	rjmp	.+2      	; 0xbe6 <__stack+0xe7>
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     be4:	81 e0       	ldi	r24, 0x01	; 1
     be6:	80 93 33 02 	sts	0x0233, r24
     bea:	5e d2       	rcall	.+1212   	; 0x10a8 <USB_Event_Stub>
     bec:	80 91 e1 00 	lds	r24, 0x00E1
     bf0:	83 ff       	sbrs	r24, 3

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
     bf2:	22 c0       	rjmp	.+68     	; 0xc38 <__stack+0x139>
     bf4:	80 91 e2 00 	lds	r24, 0x00E2
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
     bf8:	83 ff       	sbrs	r24, 3
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
     bfa:	1e c0       	rjmp	.+60     	; 0xc38 <__stack+0x139>
     bfc:	80 91 e1 00 	lds	r24, 0x00E1
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
     c00:	87 7f       	andi	r24, 0xF7	; 247
     c02:	80 93 e1 00 	sts	0x00E1, r24
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
     c06:	82 e0       	ldi	r24, 0x02	; 2
     c08:	80 93 33 02 	sts	0x0233, r24
     c0c:	10 92 2f 02 	sts	0x022F, r1
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
     c10:	80 91 e1 00 	lds	r24, 0x00E1
     c14:	8e 7f       	andi	r24, 0xFE	; 254
		USB_Device_ConfigurationNumber = 0;
     c16:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     c1a:	80 91 e2 00 	lds	r24, 0x00E2
     c1e:	8e 7f       	andi	r24, 0xFE	; 254
     c20:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     c24:	80 91 e2 00 	lds	r24, 0x00E2
     c28:	80 61       	ori	r24, 0x10	; 16
     c2a:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     c2e:	42 e0       	ldi	r20, 0x02	; 2
     c30:	60 e0       	ldi	r22, 0x00	; 0
     c32:	80 e0       	ldi	r24, 0x00	; 0
     c34:	6d de       	rcall	.-806    	; 0x910 <Endpoint_ConfigureEndpoint_Prv>
     c36:	38 d2       	rcall	.+1136   	; 0x10a8 <USB_Event_Stub>
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
     c38:	ff 91       	pop	r31
     c3a:	ef 91       	pop	r30
     c3c:	bf 91       	pop	r27
     c3e:	af 91       	pop	r26
     c40:	9f 91       	pop	r25

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
     c42:	8f 91       	pop	r24
     c44:	7f 91       	pop	r23
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     c46:	6f 91       	pop	r22
     c48:	5f 91       	pop	r21
     c4a:	4f 91       	pop	r20
     c4c:	3f 91       	pop	r19
     c4e:	2f 91       	pop	r18
     c50:	0f 90       	pop	r0
     c52:	0f be       	out	0x3f, r0	; 63
     c54:	0f 90       	pop	r0
     c56:	1f 90       	pop	r1
     c58:	18 95       	reti

00000c5a <Endpoint_Write_Control_Stream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     c5a:	40 91 3a 02 	lds	r20, 0x023A
     c5e:	50 91 3b 02 	lds	r21, 0x023B
     c62:	46 17       	cp	r20, r22
     c64:	57 07       	cpc	r21, r23
     c66:	48 f0       	brcs	.+18     	; 0xc7a <Endpoint_Write_Control_Stream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     c68:	61 15       	cp	r22, r1
     c6a:	71 05       	cpc	r23, r1
     c6c:	39 f4       	brne	.+14     	; 0xc7c <Endpoint_Write_Control_Stream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     c6e:	40 91 e8 00 	lds	r20, 0x00E8
     c72:	4e 77       	andi	r20, 0x7E	; 126
     c74:	40 93 e8 00 	sts	0x00E8, r20
     c78:	01 c0       	rjmp	.+2      	; 0xc7c <Endpoint_Write_Control_Stream_LE+0x22>
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     c7a:	ba 01       	movw	r22, r20
     c7c:	fc 01       	movw	r30, r24
     c7e:	40 e0       	ldi	r20, 0x00	; 0
     c80:	33 c0       	rjmp	.+102    	; 0xce8 <Endpoint_Write_Control_Stream_LE+0x8e>
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     c82:	80 91 33 02 	lds	r24, 0x0233

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     c86:	88 23       	and	r24, r24
     c88:	09 f4       	brne	.+2      	; 0xc8c <Endpoint_Write_Control_Stream_LE+0x32>
     c8a:	42 c0       	rjmp	.+132    	; 0xd10 <Endpoint_Write_Control_Stream_LE+0xb6>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     c8c:	85 30       	cpi	r24, 0x05	; 5
     c8e:	09 f4       	brne	.+2      	; 0xc92 <Endpoint_Write_Control_Stream_LE+0x38>
     c90:	41 c0       	rjmp	.+130    	; 0xd14 <Endpoint_Write_Control_Stream_LE+0xba>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     c92:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     c96:	83 fd       	sbrc	r24, 3
     c98:	39 c0       	rjmp	.+114    	; 0xd0c <Endpoint_Write_Control_Stream_LE+0xb2>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     c9a:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     c9e:	82 fd       	sbrc	r24, 2
     ca0:	2f c0       	rjmp	.+94     	; 0xd00 <Endpoint_Write_Control_Stream_LE+0xa6>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     ca2:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
     ca6:	80 ff       	sbrs	r24, 0
     ca8:	1f c0       	rjmp	.+62     	; 0xce8 <Endpoint_Write_Control_Stream_LE+0x8e>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
     caa:	90 91 f3 00 	lds	r25, 0x00F3
     cae:	80 91 f2 00 	lds	r24, 0x00F2
     cb2:	39 2f       	mov	r19, r25
     cb4:	20 e0       	ldi	r18, 0x00	; 0
     cb6:	a9 01       	movw	r20, r18
     cb8:	48 2b       	or	r20, r24
     cba:	ca 01       	movw	r24, r20
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     cbc:	06 c0       	rjmp	.+12     	; 0xcca <Endpoint_Write_Control_Stream_LE+0x70>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     cbe:	41 91       	ld	r20, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     cc0:	40 93 f1 00 	sts	0x00F1, r20
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
     cc4:	61 50       	subi	r22, 0x01	; 1
     cc6:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
     cc8:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     cca:	61 15       	cp	r22, r1
     ccc:	71 05       	cpc	r23, r1
     cce:	19 f0       	breq	.+6      	; 0xcd6 <Endpoint_Write_Control_Stream_LE+0x7c>
     cd0:	88 30       	cpi	r24, 0x08	; 8
     cd2:	91 05       	cpc	r25, r1
     cd4:	a0 f3       	brcs	.-24     	; 0xcbe <Endpoint_Write_Control_Stream_LE+0x64>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     cd6:	41 e0       	ldi	r20, 0x01	; 1
     cd8:	08 97       	sbiw	r24, 0x08	; 8
     cda:	09 f0       	breq	.+2      	; 0xcde <Endpoint_Write_Control_Stream_LE+0x84>
     cdc:	40 e0       	ldi	r20, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     cde:	80 91 e8 00 	lds	r24, 0x00E8
     ce2:	8e 77       	andi	r24, 0x7E	; 126
     ce4:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     ce8:	61 15       	cp	r22, r1
     cea:	71 05       	cpc	r23, r1
     cec:	51 f6       	brne	.-108    	; 0xc82 <Endpoint_Write_Control_Stream_LE+0x28>
     cee:	41 11       	cpse	r20, r1
     cf0:	c8 cf       	rjmp	.-112    	; 0xc82 <Endpoint_Write_Control_Stream_LE+0x28>
     cf2:	06 c0       	rjmp	.+12     	; 0xd00 <Endpoint_Write_Control_Stream_LE+0xa6>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     cf4:	80 91 33 02 	lds	r24, 0x0233

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     cf8:	88 23       	and	r24, r24
     cfa:	51 f0       	breq	.+20     	; 0xd10 <Endpoint_Write_Control_Stream_LE+0xb6>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     cfc:	85 30       	cpi	r24, 0x05	; 5
     cfe:	51 f0       	breq	.+20     	; 0xd14 <Endpoint_Write_Control_Stream_LE+0xba>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     d00:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     d04:	82 ff       	sbrs	r24, 2
     d06:	f6 cf       	rjmp	.-20     	; 0xcf4 <Endpoint_Write_Control_Stream_LE+0x9a>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     d08:	80 e0       	ldi	r24, 0x00	; 0
     d0a:	08 95       	ret
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     d0c:	81 e0       	ldi	r24, 0x01	; 1
     d0e:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     d10:	82 e0       	ldi	r24, 0x02	; 2
     d12:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     d14:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     d16:	08 95       	ret

00000d18 <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     d18:	40 91 3a 02 	lds	r20, 0x023A
     d1c:	50 91 3b 02 	lds	r21, 0x023B
     d20:	46 17       	cp	r20, r22
     d22:	57 07       	cpc	r21, r23
     d24:	48 f0       	brcs	.+18     	; 0xd38 <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     d26:	61 15       	cp	r22, r1
     d28:	71 05       	cpc	r23, r1
     d2a:	39 f4       	brne	.+14     	; 0xd3a <Endpoint_Write_Control_PStream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     d2c:	40 91 e8 00 	lds	r20, 0x00E8
     d30:	4e 77       	andi	r20, 0x7E	; 126
     d32:	40 93 e8 00 	sts	0x00E8, r20
     d36:	01 c0       	rjmp	.+2      	; 0xd3a <Endpoint_Write_Control_PStream_LE+0x22>
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     d38:	ba 01       	movw	r22, r20
     d3a:	fc 01       	movw	r30, r24
     d3c:	40 e0       	ldi	r20, 0x00	; 0
     d3e:	34 c0       	rjmp	.+104    	; 0xda8 <Endpoint_Write_Control_PStream_LE+0x90>
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     d40:	80 91 33 02 	lds	r24, 0x0233

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     d44:	88 23       	and	r24, r24
     d46:	09 f4       	brne	.+2      	; 0xd4a <Endpoint_Write_Control_PStream_LE+0x32>
     d48:	43 c0       	rjmp	.+134    	; 0xdd0 <Endpoint_Write_Control_PStream_LE+0xb8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     d4a:	85 30       	cpi	r24, 0x05	; 5
     d4c:	09 f4       	brne	.+2      	; 0xd50 <Endpoint_Write_Control_PStream_LE+0x38>
     d4e:	42 c0       	rjmp	.+132    	; 0xdd4 <Endpoint_Write_Control_PStream_LE+0xbc>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     d50:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     d54:	83 fd       	sbrc	r24, 3
     d56:	3a c0       	rjmp	.+116    	; 0xdcc <Endpoint_Write_Control_PStream_LE+0xb4>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     d58:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     d5c:	82 fd       	sbrc	r24, 2
     d5e:	30 c0       	rjmp	.+96     	; 0xdc0 <Endpoint_Write_Control_PStream_LE+0xa8>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     d60:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
     d64:	80 ff       	sbrs	r24, 0
     d66:	20 c0       	rjmp	.+64     	; 0xda8 <Endpoint_Write_Control_PStream_LE+0x90>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
     d68:	90 91 f3 00 	lds	r25, 0x00F3
     d6c:	80 91 f2 00 	lds	r24, 0x00F2
     d70:	39 2f       	mov	r19, r25
     d72:	20 e0       	ldi	r18, 0x00	; 0
     d74:	a9 01       	movw	r20, r18
     d76:	48 2b       	or	r20, r24
     d78:	ca 01       	movw	r24, r20
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     d7a:	07 c0       	rjmp	.+14     	; 0xd8a <Endpoint_Write_Control_PStream_LE+0x72>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     d7c:	44 91       	lpm	r20, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     d7e:	40 93 f1 00 	sts	0x00F1, r20
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
     d82:	31 96       	adiw	r30, 0x01	; 1
				Length--;
     d84:	61 50       	subi	r22, 0x01	; 1
     d86:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
     d88:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     d8a:	61 15       	cp	r22, r1
     d8c:	71 05       	cpc	r23, r1
     d8e:	19 f0       	breq	.+6      	; 0xd96 <Endpoint_Write_Control_PStream_LE+0x7e>
     d90:	88 30       	cpi	r24, 0x08	; 8
     d92:	91 05       	cpc	r25, r1
     d94:	98 f3       	brcs	.-26     	; 0xd7c <Endpoint_Write_Control_PStream_LE+0x64>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     d96:	41 e0       	ldi	r20, 0x01	; 1
     d98:	08 97       	sbiw	r24, 0x08	; 8
     d9a:	09 f0       	breq	.+2      	; 0xd9e <Endpoint_Write_Control_PStream_LE+0x86>
     d9c:	40 e0       	ldi	r20, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     d9e:	80 91 e8 00 	lds	r24, 0x00E8
     da2:	8e 77       	andi	r24, 0x7E	; 126
     da4:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     da8:	61 15       	cp	r22, r1
     daa:	71 05       	cpc	r23, r1
     dac:	49 f6       	brne	.-110    	; 0xd40 <Endpoint_Write_Control_PStream_LE+0x28>
     dae:	41 11       	cpse	r20, r1
     db0:	c7 cf       	rjmp	.-114    	; 0xd40 <Endpoint_Write_Control_PStream_LE+0x28>
     db2:	06 c0       	rjmp	.+12     	; 0xdc0 <Endpoint_Write_Control_PStream_LE+0xa8>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     db4:	80 91 33 02 	lds	r24, 0x0233

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     db8:	88 23       	and	r24, r24
     dba:	51 f0       	breq	.+20     	; 0xdd0 <Endpoint_Write_Control_PStream_LE+0xb8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     dbc:	85 30       	cpi	r24, 0x05	; 5
     dbe:	51 f0       	breq	.+20     	; 0xdd4 <Endpoint_Write_Control_PStream_LE+0xbc>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     dc0:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     dc4:	82 ff       	sbrs	r24, 2
     dc6:	f6 cf       	rjmp	.-20     	; 0xdb4 <Endpoint_Write_Control_PStream_LE+0x9c>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     dc8:	80 e0       	ldi	r24, 0x00	; 0
     dca:	08 95       	ret
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     dcc:	81 e0       	ldi	r24, 0x01	; 1
     dce:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     dd0:	82 e0       	ldi	r24, 0x02	; 2
     dd2:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     dd4:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     dd6:	08 95       	ret

00000dd8 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
     dd8:	ef 92       	push	r14
     dda:	ff 92       	push	r15
     ddc:	0f 93       	push	r16
     dde:	1f 93       	push	r17
     de0:	cf 93       	push	r28
     de2:	df 93       	push	r29
     de4:	cd b7       	in	r28, 0x3d	; 61
     de6:	de b7       	in	r29, 0x3e	; 62
     de8:	ac 97       	sbiw	r28, 0x2c	; 44
     dea:	0f b6       	in	r0, 0x3f	; 63
     dec:	f8 94       	cli
     dee:	de bf       	out	0x3e, r29	; 62
     df0:	0f be       	out	0x3f, r0	; 63
     df2:	cd bf       	out	0x3d, r28	; 61
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;
     df4:	e4 e3       	ldi	r30, 0x34	; 52
     df6:	f2 e0       	ldi	r31, 0x02	; 2
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     df8:	80 91 f1 00 	lds	r24, 0x00F1

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
     dfc:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
     dfe:	22 e0       	ldi	r18, 0x02	; 2
     e00:	ec 33       	cpi	r30, 0x3C	; 60
     e02:	f2 07       	cpc	r31, r18
     e04:	c9 f7       	brne	.-14     	; 0xdf8 <USB_Device_ProcessControlRequest+0x20>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
     e06:	d1 da       	rcall	.-2654   	; 0x3aa <EVENT_USB_Device_ControlRequest>
     e08:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     e0c:	83 ff       	sbrs	r24, 3

	if (Endpoint_IsSETUPReceived())
     e0e:	31 c1       	rjmp	.+610    	; 0x1072 <USB_Device_ProcessControlRequest+0x29a>
     e10:	80 91 34 02 	lds	r24, 0x0234
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
     e14:	90 91 35 02 	lds	r25, 0x0235

		switch (USB_ControlRequest.bRequest)
     e18:	95 30       	cpi	r25, 0x05	; 5
     e1a:	09 f4       	brne	.+2      	; 0xe1e <USB_Device_ProcessControlRequest+0x46>
     e1c:	87 c0       	rjmp	.+270    	; 0xf2c <USB_Device_ProcessControlRequest+0x154>
     e1e:	38 f4       	brcc	.+14     	; 0xe2e <USB_Device_ProcessControlRequest+0x56>
     e20:	91 30       	cpi	r25, 0x01	; 1
     e22:	b1 f1       	breq	.+108    	; 0xe90 <USB_Device_ProcessControlRequest+0xb8>
     e24:	70 f0       	brcs	.+28     	; 0xe42 <USB_Device_ProcessControlRequest+0x6a>
     e26:	93 30       	cpi	r25, 0x03	; 3
     e28:	09 f0       	breq	.+2      	; 0xe2c <USB_Device_ProcessControlRequest+0x54>
     e2a:	23 c1       	rjmp	.+582    	; 0x1072 <USB_Device_ProcessControlRequest+0x29a>
     e2c:	31 c0       	rjmp	.+98     	; 0xe90 <USB_Device_ProcessControlRequest+0xb8>
     e2e:	98 30       	cpi	r25, 0x08	; 8
     e30:	09 f4       	brne	.+2      	; 0xe34 <USB_Device_ProcessControlRequest+0x5c>
     e32:	f4 c0       	rjmp	.+488    	; 0x101c <USB_Device_ProcessControlRequest+0x244>
     e34:	99 30       	cpi	r25, 0x09	; 9
     e36:	09 f4       	brne	.+2      	; 0xe3a <USB_Device_ProcessControlRequest+0x62>
     e38:	00 c1       	rjmp	.+512    	; 0x103a <USB_Device_ProcessControlRequest+0x262>
     e3a:	96 30       	cpi	r25, 0x06	; 6
     e3c:	09 f0       	breq	.+2      	; 0xe40 <USB_Device_ProcessControlRequest+0x68>
     e3e:	19 c1       	rjmp	.+562    	; 0x1072 <USB_Device_ProcessControlRequest+0x29a>
     e40:	9c c0       	rjmp	.+312    	; 0xf7a <USB_Device_ProcessControlRequest+0x1a2>
     e42:	80 38       	cpi	r24, 0x80	; 128
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     e44:	21 f0       	breq	.+8      	; 0xe4e <USB_Device_ProcessControlRequest+0x76>
     e46:	82 38       	cpi	r24, 0x82	; 130
     e48:	09 f0       	breq	.+2      	; 0xe4c <USB_Device_ProcessControlRequest+0x74>
     e4a:	13 c1       	rjmp	.+550    	; 0x1072 <USB_Device_ProcessControlRequest+0x29a>
     e4c:	08 c0       	rjmp	.+16     	; 0xe5e <USB_Device_ProcessControlRequest+0x86>
     e4e:	80 91 30 02 	lds	r24, 0x0230
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
     e52:	90 91 31 02 	lds	r25, 0x0231
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
     e56:	99 23       	and	r25, r25
     e58:	89 f0       	breq	.+34     	; 0xe7c <USB_Device_ProcessControlRequest+0xa4>
     e5a:	82 60       	ori	r24, 0x02	; 2
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
     e5c:	0f c0       	rjmp	.+30     	; 0xe7c <USB_Device_ProcessControlRequest+0xa4>
     e5e:	80 91 38 02 	lds	r24, 0x0238
			#endif
			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     e62:	90 91 39 02 	lds	r25, 0x0239
     e66:	8f 70       	andi	r24, 0x0F	; 15
     e68:	99 27       	eor	r25, r25
     e6a:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     e6e:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     e72:	85 fb       	bst	r24, 5
     e74:	88 27       	eor	r24, r24
     e76:	80 f9       	bld	r24, 0
     e78:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     e7c:	90 91 e8 00 	lds	r25, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     e80:	97 7f       	andi	r25, 0xF7	; 247
     e82:	90 93 e8 00 	sts	0x00E8, r25
     e86:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
     e8a:	10 92 f1 00 	sts	0x00F1, r1
				UEDATX = (Data >> 8);
     e8e:	d1 c0       	rjmp	.+418    	; 0x1032 <USB_Device_ProcessControlRequest+0x25a>
     e90:	88 23       	and	r24, r24
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     e92:	19 f0       	breq	.+6      	; 0xe9a <USB_Device_ProcessControlRequest+0xc2>
     e94:	82 30       	cpi	r24, 0x02	; 2
     e96:	09 f0       	breq	.+2      	; 0xe9a <USB_Device_ProcessControlRequest+0xc2>
     e98:	ec c0       	rjmp	.+472    	; 0x1072 <USB_Device_ProcessControlRequest+0x29a>
     e9a:	8f 71       	andi	r24, 0x1F	; 31
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
     e9c:	21 f0       	breq	.+8      	; 0xea6 <USB_Device_ProcessControlRequest+0xce>
     e9e:	82 30       	cpi	r24, 0x02	; 2
     ea0:	09 f0       	breq	.+2      	; 0xea4 <USB_Device_ProcessControlRequest+0xcc>
     ea2:	e7 c0       	rjmp	.+462    	; 0x1072 <USB_Device_ProcessControlRequest+0x29a>
     ea4:	0b c0       	rjmp	.+22     	; 0xebc <USB_Device_ProcessControlRequest+0xe4>
     ea6:	80 91 36 02 	lds	r24, 0x0236
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
     eaa:	81 30       	cpi	r24, 0x01	; 1
     eac:	09 f0       	breq	.+2      	; 0xeb0 <USB_Device_ProcessControlRequest+0xd8>
     eae:	e1 c0       	rjmp	.+450    	; 0x1072 <USB_Device_ProcessControlRequest+0x29a>
     eb0:	93 30       	cpi	r25, 0x03	; 3
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
     eb2:	09 f0       	breq	.+2      	; 0xeb6 <USB_Device_ProcessControlRequest+0xde>
     eb4:	80 e0       	ldi	r24, 0x00	; 0
     eb6:	80 93 31 02 	sts	0x0231, r24
     eba:	2f c0       	rjmp	.+94     	; 0xf1a <USB_Device_ProcessControlRequest+0x142>
     ebc:	80 91 36 02 	lds	r24, 0x0236

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
     ec0:	81 11       	cpse	r24, r1
     ec2:	2b c0       	rjmp	.+86     	; 0xf1a <USB_Device_ProcessControlRequest+0x142>
     ec4:	80 91 38 02 	lds	r24, 0x0238
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     ec8:	90 91 39 02 	lds	r25, 0x0239
     ecc:	8f 70       	andi	r24, 0x0F	; 15
     ece:	99 27       	eor	r25, r25
     ed0:	00 97       	sbiw	r24, 0x00	; 0

				if (EndpointIndex == ENDPOINT_CONTROLEP)
     ed2:	09 f4       	brne	.+2      	; 0xed6 <USB_Device_ProcessControlRequest+0xfe>
     ed4:	ce c0       	rjmp	.+412    	; 0x1072 <USB_Device_ProcessControlRequest+0x29a>
     ed6:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     eda:	20 91 eb 00 	lds	r18, 0x00EB
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
     ede:	20 ff       	sbrs	r18, 0
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
     ee0:	1c c0       	rjmp	.+56     	; 0xf1a <USB_Device_ProcessControlRequest+0x142>
     ee2:	20 91 35 02 	lds	r18, 0x0235
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
     ee6:	23 30       	cpi	r18, 0x03	; 3
     ee8:	21 f4       	brne	.+8      	; 0xef2 <USB_Device_ProcessControlRequest+0x11a>
     eea:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     eee:	80 62       	ori	r24, 0x20	; 32
     ef0:	12 c0       	rjmp	.+36     	; 0xf16 <USB_Device_ProcessControlRequest+0x13e>
     ef2:	90 91 eb 00 	lds	r25, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
     ef6:	90 61       	ori	r25, 0x10	; 16
     ef8:	90 93 eb 00 	sts	0x00EB, r25
     efc:	21 e0       	ldi	r18, 0x01	; 1
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
     efe:	30 e0       	ldi	r19, 0x00	; 0
     f00:	01 c0       	rjmp	.+2      	; 0xf04 <USB_Device_ProcessControlRequest+0x12c>
     f02:	22 0f       	add	r18, r18
     f04:	8a 95       	dec	r24
     f06:	ea f7       	brpl	.-6      	; 0xf02 <USB_Device_ProcessControlRequest+0x12a>
     f08:	20 93 ea 00 	sts	0x00EA, r18
     f0c:	10 92 ea 00 	sts	0x00EA, r1
				UERST = 0;
     f10:	80 91 eb 00 	lds	r24, 0x00EB

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
     f14:	88 60       	ori	r24, 0x08	; 8
     f16:	80 93 eb 00 	sts	0x00EB, r24
     f1a:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     f1e:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     f22:	87 7f       	andi	r24, 0xF7	; 247
     f24:	80 93 e8 00 	sts	0x00E8, r24
     f28:	29 dd       	rcall	.-1454   	; 0x97c <Endpoint_ClearStatusStage>

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
     f2a:	a3 c0       	rjmp	.+326    	; 0x1072 <USB_Device_ProcessControlRequest+0x29a>
     f2c:	81 11       	cpse	r24, r1
     f2e:	a1 c0       	rjmp	.+322    	; 0x1072 <USB_Device_ProcessControlRequest+0x29a>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     f30:	00 91 36 02 	lds	r16, 0x0236
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t    DeviceAddress    = (USB_ControlRequest.wValue & 0x7F);
     f34:	10 91 37 02 	lds	r17, 0x0237
     f38:	0f 77       	andi	r16, 0x7F	; 127
     f3a:	11 27       	eor	r17, r17
     f3c:	e0 2e       	mov	r14, r16
     f3e:	ff b6       	in	r15, 0x3f	; 63
     f40:	f8 94       	cli
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     f42:	80 91 e8 00 	lds	r24, 0x00E8
     f46:	87 7f       	andi	r24, 0xF7	; 247
     f48:	80 93 e8 00 	sts	0x00E8, r24
     f4c:	17 dd       	rcall	.-1490   	; 0x97c <Endpoint_ClearStatusStage>
     f4e:	80 91 e8 00 	lds	r24, 0x00E8
	uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
	GlobalInterruptDisable();

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
     f52:	80 ff       	sbrs	r24, 0
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     f54:	fc cf       	rjmp	.-8      	; 0xf4e <USB_Device_ProcessControlRequest+0x176>
     f56:	80 91 e3 00 	lds	r24, 0x00E3

	while (!(Endpoint_IsINReady()));
     f5a:	80 78       	andi	r24, 0x80	; 128
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				uint8_t Temp = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
     f5c:	80 2b       	or	r24, r16
     f5e:	80 93 e3 00 	sts	0x00E3, r24
     f62:	80 68       	ori	r24, 0x80	; 128

				UDADDR = Temp;
     f64:	80 93 e3 00 	sts	0x00E3, r24
				UDADDR = Temp | (1 << ADDEN);
     f68:	ee 20       	and	r14, r14
     f6a:	11 f0       	breq	.+4      	; 0xf70 <USB_Device_ProcessControlRequest+0x198>
     f6c:	83 e0       	ldi	r24, 0x03	; 3

	USB_Device_SetDeviceAddress(DeviceAddress);
	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
     f6e:	01 c0       	rjmp	.+2      	; 0xf72 <USB_Device_ProcessControlRequest+0x19a>
     f70:	82 e0       	ldi	r24, 0x02	; 2
     f72:	80 93 33 02 	sts	0x0233, r24
     f76:	ff be       	out	0x3f, r15	; 63
     f78:	7c c0       	rjmp	.+248    	; 0x1072 <USB_Device_ProcessControlRequest+0x29a>
     f7a:	80 58       	subi	r24, 0x80	; 128
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     f7c:	82 30       	cpi	r24, 0x02	; 2
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				SREG = GlobalIntState;
				#endif

				GCC_MEMORY_BARRIER();
     f7e:	08 f0       	brcs	.+2      	; 0xf82 <USB_Device_ProcessControlRequest+0x1aa>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     f80:	78 c0       	rjmp	.+240    	; 0x1072 <USB_Device_ProcessControlRequest+0x29a>
     f82:	80 91 36 02 	lds	r24, 0x0236
     f86:	90 91 37 02 	lds	r25, 0x0237
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
     f8a:	8c 3d       	cpi	r24, 0xDC	; 220
     f8c:	23 e0       	ldi	r18, 0x03	; 3
     f8e:	92 07       	cpc	r25, r18
     f90:	71 f5       	brne	.+92     	; 0xfee <USB_Device_ProcessControlRequest+0x216>
     f92:	83 e0       	ldi	r24, 0x03	; 3
     f94:	8a 83       	std	Y+2, r24	; 0x02
     f96:	8a e2       	ldi	r24, 0x2A	; 42
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
     f98:	89 83       	std	Y+1, r24	; 0x01
     f9a:	4f b7       	in	r20, 0x3f	; 63
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
     f9c:	f8 94       	cli
     f9e:	de 01       	movw	r26, r28
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     fa0:	13 96       	adiw	r26, 0x03	; 3
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     fa2:	20 e0       	ldi	r18, 0x00	; 0

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);
     fa4:	3e e0       	ldi	r19, 0x0E	; 14
     fa6:	51 e2       	ldi	r21, 0x21	; 33
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
     fa8:	e3 2f       	mov	r30, r19
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
     faa:	f0 e0       	ldi	r31, 0x00	; 0

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
     fac:	50 93 57 00 	sts	0x0057, r21
     fb0:	e4 91       	lpm	r30, Z
     fb2:	20 ff       	sbrs	r18, 0
     fb4:	03 c0       	rjmp	.+6      	; 0xfbc <USB_Device_ProcessControlRequest+0x1e4>
     fb6:	e2 95       	swap	r30

					if (SerialCharNum & 0x01)
     fb8:	ef 70       	andi	r30, 0x0F	; 15
     fba:	3f 5f       	subi	r19, 0xFF	; 255
					{
						SerialByte >>= 4;
     fbc:	ef 70       	andi	r30, 0x0F	; 15
     fbe:	8e 2f       	mov	r24, r30
						SigReadAddress++;
     fc0:	90 e0       	ldi	r25, 0x00	; 0
					}

					SerialByte &= 0x0F;
     fc2:	ea 30       	cpi	r30, 0x0A	; 10
     fc4:	10 f0       	brcs	.+4      	; 0xfca <USB_Device_ProcessControlRequest+0x1f2>
     fc6:	c7 96       	adiw	r24, 0x37	; 55

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
     fc8:	01 c0       	rjmp	.+2      	; 0xfcc <USB_Device_ProcessControlRequest+0x1f4>
     fca:	c0 96       	adiw	r24, 0x30	; 48
     fcc:	8d 93       	st	X+, r24
     fce:	9d 93       	st	X+, r25
     fd0:	2f 5f       	subi	r18, 0xFF	; 255
     fd2:	24 31       	cpi	r18, 0x14	; 20
     fd4:	49 f7       	brne	.-46     	; 0xfa8 <USB_Device_ProcessControlRequest+0x1d0>
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
     fd6:	4f bf       	out	0x3f, r20	; 63
     fd8:	80 91 e8 00 	lds	r24, 0x00E8
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     fdc:	87 7f       	andi	r24, 0xF7	; 247
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     fde:	80 93 e8 00 	sts	0x00E8, r24
     fe2:	6a e2       	ldi	r22, 0x2A	; 42
     fe4:	70 e0       	ldi	r23, 0x00	; 0
     fe6:	ce 01       	movw	r24, r28

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
     fe8:	01 96       	adiw	r24, 0x01	; 1
     fea:	37 de       	rcall	.-914    	; 0xc5a <Endpoint_Write_Control_Stream_LE>
     fec:	11 c0       	rjmp	.+34     	; 0x1010 <USB_Device_ProcessControlRequest+0x238>
     fee:	ae 01       	movw	r20, r28
     ff0:	45 5d       	subi	r20, 0xD5	; 213
     ff2:	5f 4f       	sbci	r21, 0xFF	; 255
     ff4:	60 91 38 02 	lds	r22, 0x0238
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
     ff8:	63 d9       	rcall	.-3386   	; 0x2c0 <CALLBACK_USB_GetDescriptor>
     ffa:	00 97       	sbiw	r24, 0x00	; 0
     ffc:	d1 f1       	breq	.+116    	; 0x1072 <USB_Device_ProcessControlRequest+0x29a>
     ffe:	20 91 e8 00 	lds	r18, 0x00E8
    1002:	27 7f       	andi	r18, 0xF7	; 247
    1004:	20 93 e8 00 	sts	0x00E8, r18
    1008:	bc 01       	movw	r22, r24
    100a:	8b a5       	ldd	r24, Y+43	; 0x2b
    100c:	9c a5       	ldd	r25, Y+44	; 0x2c
    100e:	84 de       	rcall	.-760    	; 0xd18 <Endpoint_Write_Control_PStream_LE>
    1010:	80 91 e8 00 	lds	r24, 0x00E8
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    1014:	8b 77       	andi	r24, 0x7B	; 123
    1016:	80 93 e8 00 	sts	0x00E8, r24
    101a:	2b c0       	rjmp	.+86     	; 0x1072 <USB_Device_ProcessControlRequest+0x29a>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    101c:	80 38       	cpi	r24, 0x80	; 128
    101e:	49 f5       	brne	.+82     	; 0x1072 <USB_Device_ProcessControlRequest+0x29a>
    1020:	80 91 e8 00 	lds	r24, 0x00E8
    1024:	87 7f       	andi	r24, 0xF7	; 247
    1026:	80 93 e8 00 	sts	0x00E8, r24
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    102a:	80 91 2f 02 	lds	r24, 0x022F
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    102e:	80 93 f1 00 	sts	0x00F1, r24
    1032:	80 91 e8 00 	lds	r24, 0x00E8

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    1036:	8e 77       	andi	r24, 0x7E	; 126
    1038:	75 cf       	rjmp	.-278    	; 0xf24 <USB_Device_ProcessControlRequest+0x14c>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    103a:	81 11       	cpse	r24, r1
    103c:	1a c0       	rjmp	.+52     	; 0x1072 <USB_Device_ProcessControlRequest+0x29a>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    103e:	90 91 36 02 	lds	r25, 0x0236
    1042:	92 30       	cpi	r25, 0x02	; 2
    1044:	b0 f4       	brcc	.+44     	; 0x1072 <USB_Device_ProcessControlRequest+0x29a>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    1046:	80 91 e8 00 	lds	r24, 0x00E8
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    104a:	87 7f       	andi	r24, 0xF7	; 247
    104c:	80 93 e8 00 	sts	0x00E8, r24
    1050:	90 93 2f 02 	sts	0x022F, r25
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1054:	93 dc       	rcall	.-1754   	; 0x97c <Endpoint_ClearStatusStage>
    1056:	80 91 2f 02 	lds	r24, 0x022F
    105a:	81 11       	cpse	r24, r1
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    105c:	04 c0       	rjmp	.+8      	; 0x1066 <USB_Device_ProcessControlRequest+0x28e>
    105e:	80 91 e3 00 	lds	r24, 0x00E3

	Endpoint_ClearStatusStage();
    1062:	87 ff       	sbrs	r24, 7

	if (USB_Device_ConfigurationNumber)
    1064:	02 c0       	rjmp	.+4      	; 0x106a <USB_Device_ProcessControlRequest+0x292>
    1066:	84 e0       	ldi	r24, 0x04	; 4
    1068:	01 c0       	rjmp	.+2      	; 0x106c <USB_Device_ProcessControlRequest+0x294>
    106a:	81 e0       	ldi	r24, 0x01	; 1
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    106c:	80 93 33 02 	sts	0x0233, r24
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    1070:	8f d9       	rcall	.-3298   	; 0x390 <EVENT_USB_Device_ConfigurationChanged>
    1072:	80 91 e8 00 	lds	r24, 0x00E8
    1076:	83 ff       	sbrs	r24, 3
    1078:	0a c0       	rjmp	.+20     	; 0x108e <USB_Device_ProcessControlRequest+0x2b6>
    107a:	80 91 eb 00 	lds	r24, 0x00EB

	EVENT_USB_Device_ConfigurationChanged();
    107e:	80 62       	ori	r24, 0x20	; 32
    1080:	80 93 eb 00 	sts	0x00EB, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1084:	80 91 e8 00 	lds	r24, 0x00E8

				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    1088:	87 7f       	andi	r24, 0xF7	; 247
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    108a:	80 93 e8 00 	sts	0x00E8, r24
    108e:	ac 96       	adiw	r28, 0x2c	; 44
    1090:	0f b6       	in	r0, 0x3f	; 63
    1092:	f8 94       	cli
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1094:	de bf       	out	0x3e, r29	; 62
    1096:	0f be       	out	0x3f, r0	; 63
    1098:	cd bf       	out	0x3d, r28	; 61
    109a:	df 91       	pop	r29
    109c:	cf 91       	pop	r28
	{
		Endpoint_StallTransaction();
		Endpoint_ClearSETUP();
	}
}
    109e:	1f 91       	pop	r17
    10a0:	0f 91       	pop	r16
    10a2:	ff 90       	pop	r15
    10a4:	ef 90       	pop	r14
    10a6:	08 95       	ret

000010a8 <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
    10a8:	08 95       	ret

000010aa <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    10aa:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState != DEVICE_STATE_Unattached)
    10ac:	80 91 33 02 	lds	r24, 0x0233
    10b0:	88 23       	and	r24, r24
    10b2:	59 f0       	breq	.+22     	; 0x10ca <USB_USBTask+0x20>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
    10b4:	c0 91 e9 00 	lds	r28, 0x00E9
    10b8:	cf 70       	andi	r28, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    10ba:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    10be:	80 91 e8 00 	lds	r24, 0x00E8
	{
		uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

		Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

		if (Endpoint_IsSETUPReceived())
    10c2:	83 fd       	sbrc	r24, 3
		  USB_Device_ProcessControlRequest();
    10c4:	89 de       	rcall	.-750    	; 0xdd8 <USB_Device_ProcessControlRequest>
    10c6:	c0 93 e9 00 	sts	0x00E9, r28
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    10ca:	cf 91       	pop	r28
		#if defined(USB_CAN_BE_HOST)
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
		#endif
	#endif
}
    10cc:	08 95       	ret

000010ce <CDC_Device_ConfigureEndpoints>:
    10ce:	1f 93       	push	r17
			break;
	}
}

bool CDC_Device_ConfigureEndpoints(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    10d0:	cf 93       	push	r28
    10d2:	df 93       	push	r29
    10d4:	ec 01       	movw	r28, r24
	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));
    10d6:	0d 96       	adiw	r24, 0x0d	; 13
    10d8:	fc 01       	movw	r30, r24
    10da:	8b e0       	ldi	r24, 0x0B	; 11
    10dc:	df 01       	movw	r26, r30
    10de:	1d 92       	st	X+, r1
    10e0:	8a 95       	dec	r24
    10e2:	e9 f7       	brne	.-6      	; 0x10de <CDC_Device_ConfigureEndpoints+0x10>

	for (uint8_t EndpointNum = 1; EndpointNum < ENDPOINT_TOTAL_ENDPOINTS; EndpointNum++)
    10e4:	11 e0       	ldi	r17, 0x01	; 1
		uint16_t Size;
		uint8_t  Type;
		uint8_t  Direction;
		bool     DoubleBanked;

		if (EndpointNum == CDCInterfaceInfo->Config.DataINEndpointNumber)
    10e6:	89 81       	ldd	r24, Y+1	; 0x01
    10e8:	18 13       	cpse	r17, r24
    10ea:	05 c0       	rjmp	.+10     	; 0x10f6 <CDC_Device_ConfigureEndpoints+0x28>
		{
			Size         = CDCInterfaceInfo->Config.DataINEndpointSize;
    10ec:	2a 81       	ldd	r18, Y+2	; 0x02
    10ee:	3b 81       	ldd	r19, Y+3	; 0x03
			Direction    = ENDPOINT_DIR_IN;
			Type         = EP_TYPE_BULK;
			DoubleBanked = CDCInterfaceInfo->Config.DataINEndpointDoubleBank;
    10f0:	4c 81       	ldd	r20, Y+4	; 0x04
		bool     DoubleBanked;

		if (EndpointNum == CDCInterfaceInfo->Config.DataINEndpointNumber)
		{
			Size         = CDCInterfaceInfo->Config.DataINEndpointSize;
			Direction    = ENDPOINT_DIR_IN;
    10f2:	80 e8       	ldi	r24, 0x80	; 128
    10f4:	07 c0       	rjmp	.+14     	; 0x1104 <CDC_Device_ConfigureEndpoints+0x36>
			Type         = EP_TYPE_BULK;
			DoubleBanked = CDCInterfaceInfo->Config.DataINEndpointDoubleBank;
		}
		else if (EndpointNum == CDCInterfaceInfo->Config.DataOUTEndpointNumber)
    10f6:	8d 81       	ldd	r24, Y+5	; 0x05
    10f8:	18 13       	cpse	r17, r24
    10fa:	06 c0       	rjmp	.+12     	; 0x1108 <CDC_Device_ConfigureEndpoints+0x3a>
		{
			Size         = CDCInterfaceInfo->Config.DataOUTEndpointSize;
    10fc:	2e 81       	ldd	r18, Y+6	; 0x06
    10fe:	3f 81       	ldd	r19, Y+7	; 0x07
			Direction    = ENDPOINT_DIR_OUT;
			Type         = EP_TYPE_BULK;
			DoubleBanked = CDCInterfaceInfo->Config.DataOUTEndpointDoubleBank;
    1100:	48 85       	ldd	r20, Y+8	; 0x08
			DoubleBanked = CDCInterfaceInfo->Config.DataINEndpointDoubleBank;
		}
		else if (EndpointNum == CDCInterfaceInfo->Config.DataOUTEndpointNumber)
		{
			Size         = CDCInterfaceInfo->Config.DataOUTEndpointSize;
			Direction    = ENDPOINT_DIR_OUT;
    1102:	80 e0       	ldi	r24, 0x00	; 0
			Type         = EP_TYPE_BULK;
    1104:	92 e0       	ldi	r25, 0x02	; 2
    1106:	0d c0       	rjmp	.+26     	; 0x1122 <CDC_Device_ConfigureEndpoints+0x54>
			DoubleBanked = CDCInterfaceInfo->Config.DataOUTEndpointDoubleBank;
		}
		else if (EndpointNum == CDCInterfaceInfo->Config.NotificationEndpointNumber)
    1108:	89 85       	ldd	r24, Y+9	; 0x09
    110a:	18 17       	cp	r17, r24
    110c:	29 f0       	breq	.+10     	; 0x1118 <CDC_Device_ConfigureEndpoints+0x4a>

bool CDC_Device_ConfigureEndpoints(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));

	for (uint8_t EndpointNum = 1; EndpointNum < ENDPOINT_TOTAL_ENDPOINTS; EndpointNum++)
    110e:	1f 5f       	subi	r17, 0xFF	; 255
    1110:	17 30       	cpi	r17, 0x07	; 7
    1112:	49 f7       	brne	.-46     	; 0x10e6 <CDC_Device_ConfigureEndpoints+0x18>
		{
			return false;
		}
	}

	return true;
    1114:	81 e0       	ldi	r24, 0x01	; 1
    1116:	25 c0       	rjmp	.+74     	; 0x1162 <CDC_Device_ConfigureEndpoints+0x94>
			Type         = EP_TYPE_BULK;
			DoubleBanked = CDCInterfaceInfo->Config.DataOUTEndpointDoubleBank;
		}
		else if (EndpointNum == CDCInterfaceInfo->Config.NotificationEndpointNumber)
		{
			Size         = CDCInterfaceInfo->Config.NotificationEndpointSize;
    1118:	2a 85       	ldd	r18, Y+10	; 0x0a
    111a:	3b 85       	ldd	r19, Y+11	; 0x0b
			Direction    = ENDPOINT_DIR_IN;
			Type         = EP_TYPE_INTERRUPT;
			DoubleBanked = CDCInterfaceInfo->Config.NotificationEndpointDoubleBank;
    111c:	4c 85       	ldd	r20, Y+12	; 0x0c
			DoubleBanked = CDCInterfaceInfo->Config.DataOUTEndpointDoubleBank;
		}
		else if (EndpointNum == CDCInterfaceInfo->Config.NotificationEndpointNumber)
		{
			Size         = CDCInterfaceInfo->Config.NotificationEndpointSize;
			Direction    = ENDPOINT_DIR_IN;
    111e:	80 e8       	ldi	r24, 0x80	; 128
			Type         = EP_TYPE_INTERRUPT;
    1120:	93 e0       	ldi	r25, 0x03	; 3
		else
		{
			continue;
		}

		if (!(Endpoint_ConfigureEndpoint(EndpointNum, Type, Direction, Size,
    1122:	44 23       	and	r20, r20
    1124:	11 f0       	breq	.+4      	; 0x112a <CDC_Device_ConfigureEndpoints+0x5c>
    1126:	44 e0       	ldi	r20, 0x04	; 4
    1128:	01 c0       	rjmp	.+2      	; 0x112c <CDC_Device_ConfigureEndpoints+0x5e>
    112a:	40 e0       	ldi	r20, 0x00	; 0
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;
    112c:	e8 e0       	ldi	r30, 0x08	; 8
    112e:	f0 e0       	ldi	r31, 0x00	; 0
		/* Inline Functions: */
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
    1130:	50 e0       	ldi	r21, 0x00	; 0
    1132:	03 c0       	rjmp	.+6      	; 0x113a <CDC_Device_ConfigureEndpoints+0x6c>
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
				{
					MaskVal++;
    1134:	5f 5f       	subi	r21, 0xFF	; 255
					CheckBytes <<= 1;
    1136:	ee 0f       	add	r30, r30
    1138:	ff 1f       	adc	r31, r31
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
    113a:	e2 17       	cp	r30, r18
    113c:	f3 07       	cpc	r31, r19
    113e:	d0 f3       	brcs	.-12     	; 0x1134 <CDC_Device_ConfigureEndpoints+0x66>
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
    1140:	42 60       	ori	r20, 0x02	; 2
				{
					MaskVal++;
					CheckBytes <<= 1;
				}

				return (MaskVal << EPSIZE0);
    1142:	52 95       	swap	r21
    1144:	50 7f       	andi	r21, 0xF0	; 240
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
    1146:	45 2b       	or	r20, r21
    1148:	b0 e4       	ldi	r27, 0x40	; 64
    114a:	9b 9f       	mul	r25, r27
    114c:	90 01       	movw	r18, r0
    114e:	11 24       	eor	r1, r1
    1150:	61 e0       	ldi	r22, 0x01	; 1
    1152:	81 11       	cpse	r24, r1
    1154:	01 c0       	rjmp	.+2      	; 0x1158 <CDC_Device_ConfigureEndpoints+0x8a>
    1156:	60 e0       	ldi	r22, 0x00	; 0
    1158:	62 2b       	or	r22, r18
    115a:	81 2f       	mov	r24, r17
    115c:	d9 db       	rcall	.-2126   	; 0x910 <Endpoint_ConfigureEndpoint_Prv>
    115e:	81 11       	cpse	r24, r1
    1160:	d6 cf       	rjmp	.-84     	; 0x110e <CDC_Device_ConfigureEndpoints+0x40>
    1162:	df 91       	pop	r29
			return false;
		}
	}

	return true;
}
    1164:	cf 91       	pop	r28
    1166:	1f 91       	pop	r17
    1168:	08 95       	ret

0000116a <CDC_Device_SendByte>:
    116a:	cf 93       	push	r28
	return Endpoint_Write_Stream_LE(Buffer, Length, NULL);
}

uint8_t CDC_Device_SendByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const uint8_t Data)
{
    116c:	c6 2f       	mov	r28, r22
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    116e:	20 91 33 02 	lds	r18, 0x0233
    1172:	24 30       	cpi	r18, 0x04	; 4
    1174:	e9 f4       	brne	.+58     	; 0x11b0 <CDC_Device_SendByte+0x46>
    1176:	fc 01       	movw	r30, r24
    1178:	41 89       	ldd	r20, Z+17	; 0x11
    117a:	52 89       	ldd	r21, Z+18	; 0x12
    117c:	63 89       	ldd	r22, Z+19	; 0x13
    117e:	74 89       	ldd	r23, Z+20	; 0x14
    1180:	45 2b       	or	r20, r21
    1182:	46 2b       	or	r20, r22
    1184:	47 2b       	or	r20, r23
    1186:	a1 f0       	breq	.+40     	; 0x11b0 <CDC_Device_SendByte+0x46>
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpointNumber);
    1188:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    118a:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    118e:	80 91 e8 00 	lds	r24, 0x00E8

	if (!(Endpoint_IsReadWriteAllowed()))
    1192:	85 ff       	sbrs	r24, 5
    1194:	04 c0       	rjmp	.+8      	; 0x119e <CDC_Device_SendByte+0x34>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1196:	c0 93 f1 00 	sts	0x00F1, r28
		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
		  return ErrorCode;
	}

	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
    119a:	80 e0       	ldi	r24, 0x00	; 0
    119c:	0a c0       	rjmp	.+20     	; 0x11b2 <CDC_Device_SendByte+0x48>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    119e:	80 91 e8 00 	lds	r24, 0x00E8
    11a2:	8e 77       	andi	r24, 0x7E	; 126
    11a4:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_ClearIN();

		uint8_t ErrorCode;

		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
    11a8:	0a dc       	rcall	.-2028   	; 0x9be <Endpoint_WaitUntilReady>
    11aa:	88 23       	and	r24, r24
    11ac:	a1 f3       	breq	.-24     	; 0x1196 <CDC_Device_SendByte+0x2c>
    11ae:	01 c0       	rjmp	.+2      	; 0x11b2 <CDC_Device_SendByte+0x48>
    11b0:	82 e0       	ldi	r24, 0x02	; 2

uint8_t CDC_Device_SendByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const uint8_t Data)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
    11b2:	cf 91       	pop	r28
		  return ErrorCode;
	}

	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
}
    11b4:	08 95       	ret

000011b6 <CDC_Device_putchar>:
    11b6:	fb 01       	movw	r30, r22
}

static int CDC_Device_putchar(char c,
                              FILE* Stream)
{
	return CDC_Device_SendByte((USB_ClassInfo_CDC_Device_t*)fdev_get_udata(Stream), c) ? _FDEV_ERR : 0;
    11b8:	68 2f       	mov	r22, r24
    11ba:	84 85       	ldd	r24, Z+12	; 0x0c
    11bc:	95 85       	ldd	r25, Z+13	; 0x0d
    11be:	d5 df       	rcall	.-86     	; 0x116a <CDC_Device_SendByte>
    11c0:	88 23       	and	r24, r24
    11c2:	19 f0       	breq	.+6      	; 0x11ca <CDC_Device_putchar+0x14>
    11c4:	2f ef       	ldi	r18, 0xFF	; 255
    11c6:	3f ef       	ldi	r19, 0xFF	; 255
    11c8:	02 c0       	rjmp	.+4      	; 0x11ce <CDC_Device_putchar+0x18>
    11ca:	20 e0       	ldi	r18, 0x00	; 0
    11cc:	30 e0       	ldi	r19, 0x00	; 0
    11ce:	c9 01       	movw	r24, r18
}
    11d0:	08 95       	ret

000011d2 <CDC_Device_Flush>:
    11d2:	20 91 33 02 	lds	r18, 0x0233
	return ENDPOINT_READYWAIT_NoError;
}

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    11d6:	24 30       	cpi	r18, 0x04	; 4
    11d8:	49 f5       	brne	.+82     	; 0x122c <CDC_Device_Flush+0x5a>
    11da:	fc 01       	movw	r30, r24
    11dc:	41 89       	ldd	r20, Z+17	; 0x11
    11de:	52 89       	ldd	r21, Z+18	; 0x12
    11e0:	63 89       	ldd	r22, Z+19	; 0x13
    11e2:	74 89       	ldd	r23, Z+20	; 0x14
    11e4:	45 2b       	or	r20, r21
    11e6:	46 2b       	or	r20, r22
    11e8:	47 2b       	or	r20, r23
    11ea:	01 f1       	breq	.+64     	; 0x122c <CDC_Device_Flush+0x5a>
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpointNumber);
    11ec:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    11ee:	80 93 e9 00 	sts	0x00E9, r24
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    11f2:	30 91 f3 00 	lds	r19, 0x00F3
    11f6:	20 91 f2 00 	lds	r18, 0x00F2
    11fa:	93 2f       	mov	r25, r19
    11fc:	80 e0       	ldi	r24, 0x00	; 0
    11fe:	82 2b       	or	r24, r18

	if (!(Endpoint_BytesInEndpoint()))
    1200:	89 2b       	or	r24, r25
    1202:	11 f4       	brne	.+4      	; 0x1208 <CDC_Device_Flush+0x36>
	  return ENDPOINT_READYWAIT_NoError;
    1204:	80 e0       	ldi	r24, 0x00	; 0
    1206:	08 95       	ret
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1208:	90 91 e8 00 	lds	r25, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    120c:	80 91 e8 00 	lds	r24, 0x00E8
    1210:	8e 77       	andi	r24, 0x7E	; 126
    1212:	80 93 e8 00 	sts	0x00E8, r24

	bool BankFull = !(Endpoint_IsReadWriteAllowed());

	Endpoint_ClearIN();

	if (BankFull)
    1216:	95 fd       	sbrc	r25, 5
    1218:	f5 cf       	rjmp	.-22     	; 0x1204 <CDC_Device_Flush+0x32>
	{
		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
    121a:	d1 db       	rcall	.-2142   	; 0x9be <Endpoint_WaitUntilReady>
    121c:	81 11       	cpse	r24, r1
    121e:	07 c0       	rjmp	.+14     	; 0x122e <CDC_Device_Flush+0x5c>
    1220:	90 91 e8 00 	lds	r25, 0x00E8
    1224:	9e 77       	andi	r25, 0x7E	; 126
    1226:	90 93 e8 00 	sts	0x00E8, r25
    122a:	08 95       	ret
    122c:	82 e0       	ldi	r24, 0x02	; 2
}

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
    122e:	08 95       	ret

00001230 <CDC_Device_USBTask>:

		Endpoint_ClearIN();
	}

	return ENDPOINT_READYWAIT_NoError;
}
    1230:	20 91 33 02 	lds	r18, 0x0233
	return true;
}

void CDC_Device_USBTask(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    1234:	24 30       	cpi	r18, 0x04	; 4
    1236:	51 f4       	brne	.+20     	; 0x124c <CDC_Device_USBTask+0x1c>
    1238:	fc 01       	movw	r30, r24
    123a:	41 89       	ldd	r20, Z+17	; 0x11
    123c:	52 89       	ldd	r21, Z+18	; 0x12
    123e:	63 89       	ldd	r22, Z+19	; 0x13
    1240:	74 89       	ldd	r23, Z+20	; 0x14
    1242:	45 2b       	or	r20, r21
    1244:	46 2b       	or	r20, r22
    1246:	47 2b       	or	r20, r23
    1248:	09 f0       	breq	.+2      	; 0x124c <CDC_Device_USBTask+0x1c>
	  return;

	#if !defined(NO_CLASS_DRIVER_AUTOFLUSH)
	CDC_Device_Flush(CDCInterfaceInfo);
    124a:	c3 cf       	rjmp	.-122    	; 0x11d2 <CDC_Device_Flush>
    124c:	08 95       	ret

0000124e <CDC_Device_BytesReceived>:
    124e:	20 91 33 02 	lds	r18, 0x0233
	return ENDPOINT_READYWAIT_NoError;
}

uint16_t CDC_Device_BytesReceived(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    1252:	24 30       	cpi	r18, 0x04	; 4
    1254:	09 f0       	breq	.+2      	; 0x1258 <CDC_Device_BytesReceived+0xa>
    1256:	1e c0       	rjmp	.+60     	; 0x1294 <CDC_Device_BytesReceived+0x46>
    1258:	fc 01       	movw	r30, r24
    125a:	41 89       	ldd	r20, Z+17	; 0x11
    125c:	52 89       	ldd	r21, Z+18	; 0x12
    125e:	63 89       	ldd	r22, Z+19	; 0x13
    1260:	74 89       	ldd	r23, Z+20	; 0x14
    1262:	45 2b       	or	r20, r21
    1264:	46 2b       	or	r20, r22
    1266:	47 2b       	or	r20, r23
    1268:	a9 f0       	breq	.+42     	; 0x1294 <CDC_Device_BytesReceived+0x46>
	  return 0;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataOUTEndpointNumber);
    126a:	85 81       	ldd	r24, Z+5	; 0x05
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    126c:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1270:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsOUTReceived())
    1274:	82 ff       	sbrs	r24, 2
    1276:	0e c0       	rjmp	.+28     	; 0x1294 <CDC_Device_BytesReceived+0x46>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    1278:	30 91 f3 00 	lds	r19, 0x00F3
    127c:	20 91 f2 00 	lds	r18, 0x00F2
    1280:	93 2f       	mov	r25, r19
    1282:	80 e0       	ldi	r24, 0x00	; 0
    1284:	82 2b       	or	r24, r18
	{
		if (!(Endpoint_BytesInEndpoint()))
    1286:	89 2b       	or	r24, r25
    1288:	41 f4       	brne	.+16     	; 0x129a <CDC_Device_BytesReceived+0x4c>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    128a:	80 91 e8 00 	lds	r24, 0x00E8
    128e:	8b 77       	andi	r24, 0x7B	; 123
    1290:	80 93 e8 00 	sts	0x00E8, r24
		{
			Endpoint_ClearOUT();
			return 0;
    1294:	20 e0       	ldi	r18, 0x00	; 0
    1296:	30 e0       	ldi	r19, 0x00	; 0
    1298:	07 c0       	rjmp	.+14     	; 0x12a8 <CDC_Device_BytesReceived+0x5a>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    129a:	90 91 f3 00 	lds	r25, 0x00F3
    129e:	80 91 f2 00 	lds	r24, 0x00F2
    12a2:	39 2f       	mov	r19, r25
    12a4:	20 e0       	ldi	r18, 0x00	; 0
    12a6:	28 2b       	or	r18, r24
	}
	else
	{
		return 0;
	}
}
    12a8:	c9 01       	movw	r24, r18
    12aa:	08 95       	ret

000012ac <CDC_Device_ReceiveByte>:

int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    12ac:	20 91 33 02 	lds	r18, 0x0233
    12b0:	24 30       	cpi	r18, 0x04	; 4
    12b2:	19 f0       	breq	.+6      	; 0x12ba <CDC_Device_ReceiveByte+0xe>
	  return -1;
    12b4:	2f ef       	ldi	r18, 0xFF	; 255
    12b6:	3f ef       	ldi	r19, 0xFF	; 255
    12b8:	2d c0       	rjmp	.+90     	; 0x1314 <CDC_Device_ReceiveByte+0x68>
	}
}

int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    12ba:	fc 01       	movw	r30, r24
    12bc:	41 89       	ldd	r20, Z+17	; 0x11
    12be:	52 89       	ldd	r21, Z+18	; 0x12
    12c0:	63 89       	ldd	r22, Z+19	; 0x13
    12c2:	74 89       	ldd	r23, Z+20	; 0x14
    12c4:	45 2b       	or	r20, r21
    12c6:	46 2b       	or	r20, r22
    12c8:	47 2b       	or	r20, r23
    12ca:	a1 f3       	breq	.-24     	; 0x12b4 <CDC_Device_ReceiveByte+0x8>
	  return -1;

	int16_t ReceivedByte = -1;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataOUTEndpointNumber);
    12cc:	85 81       	ldd	r24, Z+5	; 0x05
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    12ce:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    12d2:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsOUTReceived())
    12d6:	82 ff       	sbrs	r24, 2
    12d8:	ed cf       	rjmp	.-38     	; 0x12b4 <CDC_Device_ReceiveByte+0x8>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    12da:	30 91 f3 00 	lds	r19, 0x00F3
    12de:	20 91 f2 00 	lds	r18, 0x00F2
    12e2:	93 2f       	mov	r25, r19
    12e4:	80 e0       	ldi	r24, 0x00	; 0
    12e6:	82 2b       	or	r24, r18
	{
		if (Endpoint_BytesInEndpoint())
    12e8:	89 2b       	or	r24, r25
    12ea:	21 f0       	breq	.+8      	; 0x12f4 <CDC_Device_ReceiveByte+0x48>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    12ec:	20 91 f1 00 	lds	r18, 0x00F1
		  ReceivedByte = Endpoint_Read_8();
    12f0:	30 e0       	ldi	r19, 0x00	; 0
    12f2:	02 c0       	rjmp	.+4      	; 0x12f8 <CDC_Device_ReceiveByte+0x4c>
int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return -1;

	int16_t ReceivedByte = -1;
    12f4:	2f ef       	ldi	r18, 0xFF	; 255
    12f6:	3f ef       	ldi	r19, 0xFF	; 255
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    12f8:	50 91 f3 00 	lds	r21, 0x00F3
    12fc:	40 91 f2 00 	lds	r20, 0x00F2
    1300:	95 2f       	mov	r25, r21
    1302:	80 e0       	ldi	r24, 0x00	; 0
    1304:	84 2b       	or	r24, r20
	if (Endpoint_IsOUTReceived())
	{
		if (Endpoint_BytesInEndpoint())
		  ReceivedByte = Endpoint_Read_8();

		if (!(Endpoint_BytesInEndpoint()))
    1306:	89 2b       	or	r24, r25
    1308:	29 f4       	brne	.+10     	; 0x1314 <CDC_Device_ReceiveByte+0x68>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    130a:	80 91 e8 00 	lds	r24, 0x00E8
    130e:	8b 77       	andi	r24, 0x7B	; 123
    1310:	80 93 e8 00 	sts	0x00E8, r24
		  Endpoint_ClearOUT();
	}

	return ReceivedByte;
}
    1314:	c9 01       	movw	r24, r18
    1316:	08 95       	ret

00001318 <CDC_Device_getchar>:
	return CDC_Device_SendByte((USB_ClassInfo_CDC_Device_t*)fdev_get_udata(Stream), c) ? _FDEV_ERR : 0;
}

static int CDC_Device_getchar(FILE* Stream)
{
	int16_t ReceivedByte = CDC_Device_ReceiveByte((USB_ClassInfo_CDC_Device_t*)fdev_get_udata(Stream));
    1318:	fc 01       	movw	r30, r24
    131a:	84 85       	ldd	r24, Z+12	; 0x0c
    131c:	95 85       	ldd	r25, Z+13	; 0x0d
    131e:	c6 df       	rcall	.-116    	; 0x12ac <CDC_Device_ReceiveByte>
    1320:	9c 01       	movw	r18, r24
    1322:	97 ff       	sbrs	r25, 7

	if (ReceivedByte < 0)
    1324:	02 c0       	rjmp	.+4      	; 0x132a <CDC_Device_getchar+0x12>
    1326:	2e ef       	ldi	r18, 0xFE	; 254
	  return _FDEV_EOF;
    1328:	3f ef       	ldi	r19, 0xFF	; 255
    132a:	c9 01       	movw	r24, r18

	return ReceivedByte;
}
    132c:	08 95       	ret

0000132e <CDC_Device_CreateStream>:
    132e:	fb 01       	movw	r30, r22

#if defined(FDEV_SETUP_STREAM)
void CDC_Device_CreateStream(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                             FILE* const Stream)
{
	*Stream = (FILE)FDEV_SETUP_STREAM(CDC_Device_putchar, CDC_Device_getchar, _FDEV_SETUP_RW);
    1330:	2e e0       	ldi	r18, 0x0E	; 14
    1332:	db 01       	movw	r26, r22
    1334:	1d 92       	st	X+, r1
    1336:	2a 95       	dec	r18
    1338:	e9 f7       	brne	.-6      	; 0x1334 <CDC_Device_CreateStream+0x6>
    133a:	23 e0       	ldi	r18, 0x03	; 3
    133c:	23 83       	std	Z+3, r18	; 0x03
    133e:	2b ed       	ldi	r18, 0xDB	; 219
    1340:	38 e0       	ldi	r19, 0x08	; 8
    1342:	31 87       	std	Z+9, r19	; 0x09
    1344:	20 87       	std	Z+8, r18	; 0x08
    1346:	2c e8       	ldi	r18, 0x8C	; 140
    1348:	39 e0       	ldi	r19, 0x09	; 9
    134a:	33 87       	std	Z+11, r19	; 0x0b
    134c:	22 87       	std	Z+10, r18	; 0x0a
	fdev_set_udata(Stream, CDCInterfaceInfo);
    134e:	95 87       	std	Z+13, r25	; 0x0d
    1350:	84 87       	std	Z+12, r24	; 0x0c
    1352:	08 95       	ret

00001354 <CDC_Device_Event_Stub>:
	return ReceivedByte;
}
#endif

void CDC_Device_Event_Stub(void)
{
    1354:	08 95       	ret

00001356 <CDC_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_CDC_DRIVER
#define  __INCLUDE_FROM_CDC_DEVICE_C
#include "CDCClassDevice.h"

void CDC_Device_ProcessControlRequest(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    1356:	cf 93       	push	r28
    1358:	df 93       	push	r29
    135a:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    135c:	80 91 e8 00 	lds	r24, 0x00E8
	if (!(Endpoint_IsSETUPReceived()))
    1360:	83 ff       	sbrs	r24, 3
    1362:	a1 c0       	rjmp	.+322    	; 0x14a6 <CDC_Device_ProcessControlRequest+0x150>
	  return;

	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
    1364:	88 81       	ld	r24, Y
    1366:	90 e0       	ldi	r25, 0x00	; 0
    1368:	20 91 38 02 	lds	r18, 0x0238
    136c:	30 91 39 02 	lds	r19, 0x0239
    1370:	28 17       	cp	r18, r24
    1372:	39 07       	cpc	r19, r25
    1374:	09 f0       	breq	.+2      	; 0x1378 <CDC_Device_ProcessControlRequest+0x22>
    1376:	97 c0       	rjmp	.+302    	; 0x14a6 <CDC_Device_ProcessControlRequest+0x150>
	  return;

	switch (USB_ControlRequest.bRequest)
    1378:	80 91 35 02 	lds	r24, 0x0235
    137c:	81 32       	cpi	r24, 0x21	; 33
    137e:	61 f0       	breq	.+24     	; 0x1398 <CDC_Device_ProcessControlRequest+0x42>
    1380:	20 f4       	brcc	.+8      	; 0x138a <CDC_Device_ProcessControlRequest+0x34>
    1382:	80 32       	cpi	r24, 0x20	; 32
    1384:	09 f0       	breq	.+2      	; 0x1388 <CDC_Device_ProcessControlRequest+0x32>
    1386:	8f c0       	rjmp	.+286    	; 0x14a6 <CDC_Device_ProcessControlRequest+0x150>
    1388:	3d c0       	rjmp	.+122    	; 0x1404 <CDC_Device_ProcessControlRequest+0xae>
    138a:	82 32       	cpi	r24, 0x22	; 34
    138c:	09 f4       	brne	.+2      	; 0x1390 <CDC_Device_ProcessControlRequest+0x3a>
    138e:	67 c0       	rjmp	.+206    	; 0x145e <CDC_Device_ProcessControlRequest+0x108>
    1390:	83 32       	cpi	r24, 0x23	; 35
    1392:	09 f0       	breq	.+2      	; 0x1396 <CDC_Device_ProcessControlRequest+0x40>
    1394:	88 c0       	rjmp	.+272    	; 0x14a6 <CDC_Device_ProcessControlRequest+0x150>
    1396:	77 c0       	rjmp	.+238    	; 0x1486 <CDC_Device_ProcessControlRequest+0x130>
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1398:	80 91 34 02 	lds	r24, 0x0234
    139c:	81 3a       	cpi	r24, 0xA1	; 161
    139e:	09 f0       	breq	.+2      	; 0x13a2 <CDC_Device_ProcessControlRequest+0x4c>
    13a0:	82 c0       	rjmp	.+260    	; 0x14a6 <CDC_Device_ProcessControlRequest+0x150>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    13a2:	80 91 e8 00 	lds	r24, 0x00E8
    13a6:	87 7f       	andi	r24, 0xF7	; 247
    13a8:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    13ac:	80 91 e8 00 	lds	r24, 0x00E8
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsINReady()));
    13b0:	80 ff       	sbrs	r24, 0
    13b2:	fc cf       	rjmp	.-8      	; 0x13ac <CDC_Device_ProcessControlRequest+0x56>

				Endpoint_Write_32_LE(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
    13b4:	49 89       	ldd	r20, Y+17	; 0x11
    13b6:	5a 89       	ldd	r21, Y+18	; 0x12
    13b8:	6b 89       	ldd	r22, Y+19	; 0x13
    13ba:	7c 89       	ldd	r23, Y+20	; 0x14
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_LE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_LE(const uint32_t Data)
			{
				UEDATX = (Data &  0xFF);
    13bc:	40 93 f1 00 	sts	0x00F1, r20
				UEDATX = (Data >> 8);
    13c0:	bb 27       	eor	r27, r27
    13c2:	a7 2f       	mov	r26, r23
    13c4:	96 2f       	mov	r25, r22
    13c6:	85 2f       	mov	r24, r21
    13c8:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 16);
    13cc:	cb 01       	movw	r24, r22
    13ce:	aa 27       	eor	r26, r26
    13d0:	bb 27       	eor	r27, r27
    13d2:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 24);
    13d6:	47 2f       	mov	r20, r23
    13d8:	55 27       	eor	r21, r21
    13da:	66 27       	eor	r22, r22
    13dc:	77 27       	eor	r23, r23
    13de:	40 93 f1 00 	sts	0x00F1, r20
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
    13e2:	8d 89       	ldd	r24, Y+21	; 0x15
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    13e4:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
    13e8:	8e 89       	ldd	r24, Y+22	; 0x16
    13ea:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);
    13ee:	8f 89       	ldd	r24, Y+23	; 0x17
    13f0:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    13f4:	80 91 e8 00 	lds	r24, 0x00E8
    13f8:	8e 77       	andi	r24, 0x7E	; 126
    13fa:	80 93 e8 00 	sts	0x00E8, r24
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
    13fe:	df 91       	pop	r29
    1400:	cf 91       	pop	r28
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);

				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    1402:	bc ca       	rjmp	.-2696   	; 0x97c <Endpoint_ClearStatusStage>
    1404:	80 91 34 02 	lds	r24, 0x0234
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1408:	81 32       	cpi	r24, 0x21	; 33
    140a:	09 f0       	breq	.+2      	; 0x140e <CDC_Device_ProcessControlRequest+0xb8>
    140c:	4c c0       	rjmp	.+152    	; 0x14a6 <CDC_Device_ProcessControlRequest+0x150>
    140e:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1412:	87 7f       	andi	r24, 0xF7	; 247
    1414:	80 93 e8 00 	sts	0x00E8, r24
    1418:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    141c:	82 ff       	sbrs	r24, 2
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()));
    141e:	fc cf       	rjmp	.-8      	; 0x1418 <CDC_Device_ProcessControlRequest+0xc2>
    1420:	30 91 f1 00 	lds	r19, 0x00F1
				{
					uint32_t Value;
					uint8_t  Bytes[4];
				} Data;

				Data.Bytes[0] = UEDATX;
    1424:	20 91 f1 00 	lds	r18, 0x00F1
				Data.Bytes[1] = UEDATX;
    1428:	90 91 f1 00 	lds	r25, 0x00F1
				Data.Bytes[2] = UEDATX;
    142c:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[3] = UEDATX;
    1430:	39 8b       	std	Y+17, r19	; 0x11

				CDCInterfaceInfo->State.LineEncoding.BaudRateBPS = Endpoint_Read_32_LE();
    1432:	2a 8b       	std	Y+18, r18	; 0x12
    1434:	9b 8b       	std	Y+19, r25	; 0x13
    1436:	8c 8b       	std	Y+20, r24	; 0x14
    1438:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    143c:	8d 8b       	std	Y+21, r24	; 0x15
				CDCInterfaceInfo->State.LineEncoding.CharFormat  = Endpoint_Read_8();
    143e:	80 91 f1 00 	lds	r24, 0x00F1
    1442:	8e 8b       	std	Y+22, r24	; 0x16
				CDCInterfaceInfo->State.LineEncoding.ParityType  = Endpoint_Read_8();
    1444:	80 91 f1 00 	lds	r24, 0x00F1
    1448:	8f 8b       	std	Y+23, r24	; 0x17
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();
    144a:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    144e:	8b 77       	andi	r24, 0x7B	; 123
    1450:	80 93 e8 00 	sts	0x00E8, r24
    1454:	93 da       	rcall	.-2778   	; 0x97c <Endpoint_ClearStatusStage>

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();
    1456:	ce 01       	movw	r24, r28
    1458:	df 91       	pop	r29

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
    145a:	cf 91       	pop	r28
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
    145c:	7b cf       	rjmp	.-266    	; 0x1354 <CDC_Device_Event_Stub>
    145e:	80 91 34 02 	lds	r24, 0x0234
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
    1462:	81 32       	cpi	r24, 0x21	; 33
			}

			break;
		case CDC_REQ_SetControlLineState:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1464:	01 f5       	brne	.+64     	; 0x14a6 <CDC_Device_ProcessControlRequest+0x150>
    1466:	80 91 e8 00 	lds	r24, 0x00E8
    146a:	87 7f       	andi	r24, 0xF7	; 247
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    146c:	80 93 e8 00 	sts	0x00E8, r24
    1470:	85 da       	rcall	.-2806   	; 0x97c <Endpoint_ClearStatusStage>
    1472:	80 91 36 02 	lds	r24, 0x0236
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    1476:	90 91 37 02 	lds	r25, 0x0237

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
    147a:	9e 87       	std	Y+14, r25	; 0x0e
    147c:	8d 87       	std	Y+13, r24	; 0x0d
    147e:	ce 01       	movw	r24, r28
    1480:	df 91       	pop	r29
    1482:	cf 91       	pop	r28
    1484:	67 cf       	rjmp	.-306    	; 0x1354 <CDC_Device_Event_Stub>

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
    1486:	80 91 34 02 	lds	r24, 0x0234
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
    148a:	81 32       	cpi	r24, 0x21	; 33
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
    148c:	61 f4       	brne	.+24     	; 0x14a6 <CDC_Device_ProcessControlRequest+0x150>
    148e:	80 91 e8 00 	lds	r24, 0x00E8
			}

			break;
		case CDC_REQ_SendBreak:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1492:	87 7f       	andi	r24, 0xF7	; 247
    1494:	80 93 e8 00 	sts	0x00E8, r24
    1498:	71 da       	rcall	.-2846   	; 0x97c <Endpoint_ClearStatusStage>
    149a:	60 91 36 02 	lds	r22, 0x0236
    149e:	ce 01       	movw	r24, r28
    14a0:	df 91       	pop	r29
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    14a2:	cf 91       	pop	r28
    14a4:	57 cf       	rjmp	.-338    	; 0x1354 <CDC_Device_Event_Stub>

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
    14a6:	df 91       	pop	r29
    14a8:	cf 91       	pop	r28
    14aa:	08 95       	ret

000014ac <itoa>:
			}

			break;
	}
}
    14ac:	fb 01       	movw	r30, r22
    14ae:	9f 01       	movw	r18, r30
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
    14b0:	e8 94       	clt
    14b2:	42 30       	cpi	r20, 0x02	; 2
			}

			break;
	}
}
    14b4:	bc f0       	brlt	.+46     	; 0x14e4 <itoa+0x38>
    14b6:	45 32       	cpi	r20, 0x25	; 37
    14b8:	ac f4       	brge	.+42     	; 0x14e4 <itoa+0x38>
    14ba:	4a 30       	cpi	r20, 0x0A	; 10
    14bc:	29 f4       	brne	.+10     	; 0x14c8 <itoa+0x1c>
    14be:	97 fb       	bst	r25, 7
    14c0:	1e f4       	brtc	.+6      	; 0x14c8 <itoa+0x1c>
    14c2:	90 95       	com	r25
    14c4:	81 95       	neg	r24
    14c6:	9f 4f       	sbci	r25, 0xFF	; 255
    14c8:	64 2f       	mov	r22, r20
    14ca:	77 27       	eor	r23, r23
    14cc:	72 d0       	rcall	.+228    	; 0x15b2 <__udivmodhi4>
    14ce:	80 5d       	subi	r24, 0xD0	; 208
    14d0:	8a 33       	cpi	r24, 0x3A	; 58
    14d2:	0c f0       	brlt	.+2      	; 0x14d6 <itoa+0x2a>
    14d4:	89 5d       	subi	r24, 0xD9	; 217
    14d6:	81 93       	st	Z+, r24
    14d8:	cb 01       	movw	r24, r22
    14da:	00 97       	sbiw	r24, 0x00	; 0
    14dc:	a9 f7       	brne	.-22     	; 0x14c8 <itoa+0x1c>
    14de:	16 f4       	brtc	.+4      	; 0x14e4 <itoa+0x38>
    14e0:	5d e2       	ldi	r21, 0x2D	; 45
    14e2:	51 93       	st	Z+, r21
    14e4:	10 82       	st	Z, r1
    14e6:	c9 01       	movw	r24, r18
    14e8:	54 c0       	rjmp	.+168    	; 0x1592 <strrev>

000014ea <fputc>:
    14ea:	0f 93       	push	r16
    14ec:	1f 93       	push	r17
    14ee:	cf 93       	push	r28
    14f0:	df 93       	push	r29
    14f2:	8c 01       	movw	r16, r24
    14f4:	eb 01       	movw	r28, r22
    14f6:	8b 81       	ldd	r24, Y+3	; 0x03
    14f8:	81 fd       	sbrc	r24, 1
    14fa:	03 c0       	rjmp	.+6      	; 0x1502 <fputc+0x18>
    14fc:	0f ef       	ldi	r16, 0xFF	; 255
    14fe:	1f ef       	ldi	r17, 0xFF	; 255
    1500:	1a c0       	rjmp	.+52     	; 0x1536 <fputc+0x4c>
    1502:	82 ff       	sbrs	r24, 2
    1504:	0d c0       	rjmp	.+26     	; 0x1520 <fputc+0x36>
    1506:	2e 81       	ldd	r18, Y+6	; 0x06
    1508:	3f 81       	ldd	r19, Y+7	; 0x07
    150a:	8c 81       	ldd	r24, Y+4	; 0x04
    150c:	9d 81       	ldd	r25, Y+5	; 0x05
    150e:	28 17       	cp	r18, r24
    1510:	39 07       	cpc	r19, r25
    1512:	64 f4       	brge	.+24     	; 0x152c <fputc+0x42>
    1514:	e8 81       	ld	r30, Y
    1516:	f9 81       	ldd	r31, Y+1	; 0x01
    1518:	01 93       	st	Z+, r16
    151a:	f9 83       	std	Y+1, r31	; 0x01
    151c:	e8 83       	st	Y, r30
    151e:	06 c0       	rjmp	.+12     	; 0x152c <fputc+0x42>
    1520:	e8 85       	ldd	r30, Y+8	; 0x08
    1522:	f9 85       	ldd	r31, Y+9	; 0x09
    1524:	80 2f       	mov	r24, r16
    1526:	09 95       	icall
    1528:	89 2b       	or	r24, r25
    152a:	41 f7       	brne	.-48     	; 0x14fc <fputc+0x12>
    152c:	8e 81       	ldd	r24, Y+6	; 0x06
    152e:	9f 81       	ldd	r25, Y+7	; 0x07
    1530:	01 96       	adiw	r24, 0x01	; 1
    1532:	9f 83       	std	Y+7, r25	; 0x07
    1534:	8e 83       	std	Y+6, r24	; 0x06
    1536:	c8 01       	movw	r24, r16
    1538:	df 91       	pop	r29
    153a:	cf 91       	pop	r28
    153c:	1f 91       	pop	r17
    153e:	0f 91       	pop	r16
    1540:	08 95       	ret

00001542 <fputs>:
    1542:	ef 92       	push	r14
    1544:	ff 92       	push	r15
    1546:	0f 93       	push	r16
    1548:	1f 93       	push	r17
    154a:	cf 93       	push	r28
    154c:	df 93       	push	r29
    154e:	7c 01       	movw	r14, r24
    1550:	8b 01       	movw	r16, r22
    1552:	db 01       	movw	r26, r22
    1554:	13 96       	adiw	r26, 0x03	; 3
    1556:	8c 91       	ld	r24, X
    1558:	81 ff       	sbrs	r24, 1
    155a:	14 c0       	rjmp	.+40     	; 0x1584 <fputs+0x42>
    155c:	c0 e0       	ldi	r28, 0x00	; 0
    155e:	d0 e0       	ldi	r29, 0x00	; 0
    1560:	0b c0       	rjmp	.+22     	; 0x1578 <fputs+0x36>
    1562:	d8 01       	movw	r26, r16
    1564:	18 96       	adiw	r26, 0x08	; 8
    1566:	ed 91       	ld	r30, X+
    1568:	fc 91       	ld	r31, X
    156a:	19 97       	sbiw	r26, 0x09	; 9
    156c:	b8 01       	movw	r22, r16
    156e:	09 95       	icall
    1570:	89 2b       	or	r24, r25
    1572:	11 f0       	breq	.+4      	; 0x1578 <fputs+0x36>
    1574:	cf ef       	ldi	r28, 0xFF	; 255
    1576:	df ef       	ldi	r29, 0xFF	; 255
    1578:	f7 01       	movw	r30, r14
    157a:	81 91       	ld	r24, Z+
    157c:	7f 01       	movw	r14, r30
    157e:	81 11       	cpse	r24, r1
    1580:	f0 cf       	rjmp	.-32     	; 0x1562 <fputs+0x20>
    1582:	02 c0       	rjmp	.+4      	; 0x1588 <fputs+0x46>
    1584:	cf ef       	ldi	r28, 0xFF	; 255
    1586:	df ef       	ldi	r29, 0xFF	; 255
    1588:	ce 01       	movw	r24, r28
    158a:	cd b7       	in	r28, 0x3d	; 61
    158c:	de b7       	in	r29, 0x3e	; 62
    158e:	e6 e0       	ldi	r30, 0x06	; 6
    1590:	30 c0       	rjmp	.+96     	; 0x15f2 <__epilogue_restores__+0x18>

00001592 <strrev>:
    1592:	dc 01       	movw	r26, r24
    1594:	fc 01       	movw	r30, r24
    1596:	67 2f       	mov	r22, r23
    1598:	71 91       	ld	r23, Z+
    159a:	77 23       	and	r23, r23
    159c:	e1 f7       	brne	.-8      	; 0x1596 <strrev+0x4>
    159e:	32 97       	sbiw	r30, 0x02	; 2
    15a0:	04 c0       	rjmp	.+8      	; 0x15aa <strrev+0x18>
    15a2:	7c 91       	ld	r23, X
    15a4:	6d 93       	st	X+, r22
    15a6:	70 83       	st	Z, r23
    15a8:	62 91       	ld	r22, -Z
    15aa:	ae 17       	cp	r26, r30
    15ac:	bf 07       	cpc	r27, r31
    15ae:	c8 f3       	brcs	.-14     	; 0x15a2 <strrev+0x10>
    15b0:	08 95       	ret

000015b2 <__udivmodhi4>:
    15b2:	aa 1b       	sub	r26, r26
    15b4:	bb 1b       	sub	r27, r27
    15b6:	51 e1       	ldi	r21, 0x11	; 17
    15b8:	07 c0       	rjmp	.+14     	; 0x15c8 <__udivmodhi4_ep>

000015ba <__udivmodhi4_loop>:
    15ba:	aa 1f       	adc	r26, r26
    15bc:	bb 1f       	adc	r27, r27
    15be:	a6 17       	cp	r26, r22
    15c0:	b7 07       	cpc	r27, r23
    15c2:	10 f0       	brcs	.+4      	; 0x15c8 <__udivmodhi4_ep>
    15c4:	a6 1b       	sub	r26, r22
    15c6:	b7 0b       	sbc	r27, r23

000015c8 <__udivmodhi4_ep>:
    15c8:	88 1f       	adc	r24, r24
    15ca:	99 1f       	adc	r25, r25
    15cc:	5a 95       	dec	r21
    15ce:	a9 f7       	brne	.-22     	; 0x15ba <__udivmodhi4_loop>
    15d0:	80 95       	com	r24
    15d2:	90 95       	com	r25
    15d4:	bc 01       	movw	r22, r24
    15d6:	cd 01       	movw	r24, r26
    15d8:	08 95       	ret

000015da <__epilogue_restores__>:
    15da:	2a 88       	ldd	r2, Y+18	; 0x12
    15dc:	39 88       	ldd	r3, Y+17	; 0x11
    15de:	48 88       	ldd	r4, Y+16	; 0x10
    15e0:	5f 84       	ldd	r5, Y+15	; 0x0f
    15e2:	6e 84       	ldd	r6, Y+14	; 0x0e
    15e4:	7d 84       	ldd	r7, Y+13	; 0x0d
    15e6:	8c 84       	ldd	r8, Y+12	; 0x0c
    15e8:	9b 84       	ldd	r9, Y+11	; 0x0b
    15ea:	aa 84       	ldd	r10, Y+10	; 0x0a
    15ec:	b9 84       	ldd	r11, Y+9	; 0x09
    15ee:	c8 84       	ldd	r12, Y+8	; 0x08
    15f0:	df 80       	ldd	r13, Y+7	; 0x07
    15f2:	ee 80       	ldd	r14, Y+6	; 0x06
    15f4:	fd 80       	ldd	r15, Y+5	; 0x05
    15f6:	0c 81       	ldd	r16, Y+4	; 0x04
    15f8:	1b 81       	ldd	r17, Y+3	; 0x03
    15fa:	aa 81       	ldd	r26, Y+2	; 0x02
    15fc:	b9 81       	ldd	r27, Y+1	; 0x01
    15fe:	ce 0f       	add	r28, r30
    1600:	d1 1d       	adc	r29, r1
    1602:	0f b6       	in	r0, 0x3f	; 63
    1604:	f8 94       	cli
    1606:	de bf       	out	0x3e, r29	; 62
    1608:	0f be       	out	0x3f, r0	; 63
    160a:	cd bf       	out	0x3d, r28	; 61
    160c:	ed 01       	movw	r28, r26
    160e:	08 95       	ret

00001610 <_exit>:
    1610:	f8 94       	cli

00001612 <__stop_program>:
    1612:	ff cf       	rjmp	.-2      	; 0x1612 <__stop_program>
