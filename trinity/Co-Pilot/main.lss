
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  0000076c  00000800  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000076c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002c  00800118  00800118  00000818  2**0
                  ALLOC
  3 .stab         00001908  00000000  00000000  00000818  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000c70  00000000  00000000  00002120  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__vector_10>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_24>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e6       	ldi	r30, 0x6C	; 108
  7c:	f7 e0       	ldi	r31, 0x07	; 7
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 31       	cpi	r26, 0x18	; 24
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	a8 e1       	ldi	r26, 0x18	; 24
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 34       	cpi	r26, 0x44	; 68
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 8a 03 	call	0x714	; 0x714 <main>
  9e:	0c 94 b4 03 	jmp	0x768	; 0x768 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_24>:
uint32_t prevStepL = 0xFFF; // Holds the differential values for the stepper timer.
uint32_t prevStepR = 0xFFF; // These should only be modified by the ISR.

/// Interupt Service Routines ///
ISR(TWI_vect)
{
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	2f 93       	push	r18
  b2:	3f 93       	push	r19
  b4:	4f 93       	push	r20
  b6:	5f 93       	push	r21
  b8:	6f 93       	push	r22
  ba:	7f 93       	push	r23
  bc:	8f 93       	push	r24
  be:	9f 93       	push	r25
  c0:	af 93       	push	r26
  c2:	bf 93       	push	r27
  c4:	ef 93       	push	r30
  c6:	ff 93       	push	r31
	uint8_t status = TW_STATUS; // Get status register.
  c8:	80 91 b9 00 	lds	r24, 0x00B9
  cc:	88 7f       	andi	r24, 0xF8	; 248
	
	/// RX ///
	if(status == TW_SR_SLA_ACK) // SLA+W received, ACK response sent.
  ce:	80 36       	cpi	r24, 0x60	; 96
  d0:	d9 f0       	breq	.+54     	; 0x108 <__vector_24+0x62>
	{
		TWCR |= (1<<TWEA); // Read and ACK the next byte.
	}
	else if(status == TW_SR_DATA_ACK) // Data from SLA+W received, ACK'd.
  d2:	80 38       	cpi	r24, 0x80	; 128
  d4:	29 f4       	brne	.+10     	; 0xe0 <__vector_24+0x3a>
	{
		rxDataHandler(TWDR); // Handle the received data.
  d6:	80 91 bb 00 	lds	r24, 0x00BB
  da:	0e 94 72 01 	call	0x2e4	; 0x2e4 <rxDataHandler>
  de:	19 c0       	rjmp	.+50     	; 0x112 <__vector_24+0x6c>
	}
	else if(status == TW_SR_STOP)
  e0:	80 3a       	cpi	r24, 0xA0	; 160
  e2:	91 f0       	breq	.+36     	; 0x108 <__vector_24+0x62>
		TWCR |= (1<<TWEA); // ACK it.
		// And we're done.
	}
	
	/// TX ///
	else if(status == TW_ST_SLA_ACK) // SLA+R received, ACK'd.
  e4:	88 3a       	cpi	r24, 0xA8	; 168
  e6:	19 f4       	brne	.+6      	; 0xee <__vector_24+0x48>
	{
		bytesCount = 0;
  e8:	10 92 1e 01 	sts	0x011E, r1
  ec:	02 c0       	rjmp	.+4      	; 0xf2 <__vector_24+0x4c>
		txDataHandler(); // This auto-fills TWDR.
	}
	else if(status == TW_ST_DATA_ACK) // Data ACK'd.
  ee:	88 3b       	cpi	r24, 0xB8	; 184
  f0:	19 f4       	brne	.+6      	; 0xf8 <__vector_24+0x52>
	{
		txDataHandler();
  f2:	0e 94 62 02 	call	0x4c4	; 0x4c4 <txDataHandler>
  f6:	0d c0       	rjmp	.+26     	; 0x112 <__vector_24+0x6c>
	}
	else if(status == TW_ST_LAST_DATA || status == TW_ST_DATA_NACK) // Data NACK'd or last byte ACK'd.
  f8:	88 3c       	cpi	r24, 0xC8	; 200
  fa:	11 f0       	breq	.+4      	; 0x100 <__vector_24+0x5a>
  fc:	80 3c       	cpi	r24, 0xC0	; 192
  fe:	49 f4       	brne	.+18     	; 0x112 <__vector_24+0x6c>
	{
		i2cMode = 0;
 100:	10 92 21 01 	sts	0x0121, r1
		bytesCount = 0;
 104:	10 92 1e 01 	sts	0x011E, r1
		TWCR |= (1<<TWEA);
 108:	80 91 bc 00 	lds	r24, 0x00BC
 10c:	80 64       	ori	r24, 0x40	; 64
 10e:	80 93 bc 00 	sts	0x00BC, r24
	}
	
	TWCR |= (1<<TWINT)|(1<<TWIE); // Clear the interrupt flag (seriously), allowing the TWI to continue.
 112:	80 91 bc 00 	lds	r24, 0x00BC
 116:	81 68       	ori	r24, 0x81	; 129
 118:	80 93 bc 00 	sts	0x00BC, r24
}
 11c:	ff 91       	pop	r31
 11e:	ef 91       	pop	r30
 120:	bf 91       	pop	r27
 122:	af 91       	pop	r26
 124:	9f 91       	pop	r25
 126:	8f 91       	pop	r24
 128:	7f 91       	pop	r23
 12a:	6f 91       	pop	r22
 12c:	5f 91       	pop	r21
 12e:	4f 91       	pop	r20
 130:	3f 91       	pop	r19
 132:	2f 91       	pop	r18
 134:	0f 90       	pop	r0
 136:	0f be       	out	0x3f, r0	; 63
 138:	0f 90       	pop	r0
 13a:	1f 90       	pop	r1
 13c:	18 95       	reti

0000013e <__vector_10>:

ISR(TIMER1_CAPT_vect) // Stepper timer.
{
 13e:	1f 92       	push	r1
 140:	0f 92       	push	r0
 142:	0f b6       	in	r0, 0x3f	; 63
 144:	0f 92       	push	r0
 146:	11 24       	eor	r1, r1
 148:	2f 93       	push	r18
 14a:	3f 93       	push	r19
 14c:	4f 93       	push	r20
 14e:	5f 93       	push	r21
 150:	6f 93       	push	r22
 152:	7f 93       	push	r23
 154:	8f 93       	push	r24
 156:	9f 93       	push	r25
 158:	af 93       	push	r26
 15a:	bf 93       	push	r27
 15c:	ef 93       	push	r30
 15e:	ff 93       	push	r31
	// Left side.
	if(stepperCountLeft > prevStepL)
 160:	40 91 14 01 	lds	r20, 0x0114
 164:	50 91 15 01 	lds	r21, 0x0115
 168:	60 91 16 01 	lds	r22, 0x0116
 16c:	70 91 17 01 	lds	r23, 0x0117
 170:	80 91 04 01 	lds	r24, 0x0104
 174:	90 91 05 01 	lds	r25, 0x0105
 178:	a0 91 06 01 	lds	r26, 0x0106
 17c:	b0 91 07 01 	lds	r27, 0x0107
 180:	84 17       	cp	r24, r20
 182:	95 07       	cpc	r25, r21
 184:	a6 07       	cpc	r26, r22
 186:	b7 07       	cpc	r27, r23
 188:	b8 f4       	brcc	.+46     	; 0x1b8 <__vector_10+0x7a>
	{
		stepStateL++;
 18a:	20 91 19 01 	lds	r18, 0x0119
 18e:	2f 5f       	subi	r18, 0xFF	; 255
 190:	20 93 19 01 	sts	0x0119, r18
		if(stepStateL >= 4) stepStateL = 0;
 194:	24 30       	cpi	r18, 0x04	; 4
 196:	10 f0       	brcs	.+4      	; 0x19c <__vector_10+0x5e>
 198:	10 92 19 01 	sts	0x0119, r1
		PORTB = ((PORTB & 0xF0) | stepPatternL[stepStateL]); // Preserve high nibble (right state), overwrite low nibble (left state).
 19c:	25 b1       	in	r18, 0x05	; 5
 19e:	e0 91 19 01 	lds	r30, 0x0119
 1a2:	f0 e0       	ldi	r31, 0x00	; 0
 1a4:	e4 5f       	subi	r30, 0xF4	; 244
 1a6:	fe 4f       	sbci	r31, 0xFE	; 254
 1a8:	20 7f       	andi	r18, 0xF0	; 240
 1aa:	30 81       	ld	r19, Z
 1ac:	23 2b       	or	r18, r19
 1ae:	25 b9       	out	0x05, r18	; 5
		prevStepL++;
 1b0:	01 96       	adiw	r24, 0x01	; 1
 1b2:	a1 1d       	adc	r26, r1
 1b4:	b1 1d       	adc	r27, r1
 1b6:	1b c0       	rjmp	.+54     	; 0x1ee <__vector_10+0xb0>
	}
	else if(stepperCountLeft < prevStepL)
 1b8:	48 17       	cp	r20, r24
 1ba:	59 07       	cpc	r21, r25
 1bc:	6a 07       	cpc	r22, r26
 1be:	7b 07       	cpc	r23, r27
 1c0:	f0 f4       	brcc	.+60     	; 0x1fe <__vector_10+0xc0>
	{
		if(!stepStateL) stepStateL = 3;
 1c2:	20 91 19 01 	lds	r18, 0x0119
 1c6:	22 23       	and	r18, r18
 1c8:	11 f4       	brne	.+4      	; 0x1ce <__vector_10+0x90>
 1ca:	23 e0       	ldi	r18, 0x03	; 3
 1cc:	01 c0       	rjmp	.+2      	; 0x1d0 <__vector_10+0x92>
		else stepStateL--;
 1ce:	21 50       	subi	r18, 0x01	; 1
 1d0:	20 93 19 01 	sts	0x0119, r18
		PORTB = ((PORTB & 0xF0) | stepPatternL[stepStateL]);
 1d4:	25 b1       	in	r18, 0x05	; 5
 1d6:	e0 91 19 01 	lds	r30, 0x0119
 1da:	f0 e0       	ldi	r31, 0x00	; 0
 1dc:	e4 5f       	subi	r30, 0xF4	; 244
 1de:	fe 4f       	sbci	r31, 0xFE	; 254
 1e0:	20 7f       	andi	r18, 0xF0	; 240
 1e2:	30 81       	ld	r19, Z
 1e4:	23 2b       	or	r18, r19
 1e6:	25 b9       	out	0x05, r18	; 5
		prevStepL--;
 1e8:	01 97       	sbiw	r24, 0x01	; 1
 1ea:	a1 09       	sbc	r26, r1
 1ec:	b1 09       	sbc	r27, r1
 1ee:	80 93 04 01 	sts	0x0104, r24
 1f2:	90 93 05 01 	sts	0x0105, r25
 1f6:	a0 93 06 01 	sts	0x0106, r26
 1fa:	b0 93 07 01 	sts	0x0107, r27
	}
	
	// Right side.
	if(stepperCountRight > prevStepR)
 1fe:	40 91 10 01 	lds	r20, 0x0110
 202:	50 91 11 01 	lds	r21, 0x0111
 206:	60 91 12 01 	lds	r22, 0x0112
 20a:	70 91 13 01 	lds	r23, 0x0113
 20e:	80 91 00 01 	lds	r24, 0x0100
 212:	90 91 01 01 	lds	r25, 0x0101
 216:	a0 91 02 01 	lds	r26, 0x0102
 21a:	b0 91 03 01 	lds	r27, 0x0103
 21e:	84 17       	cp	r24, r20
 220:	95 07       	cpc	r25, r21
 222:	a6 07       	cpc	r26, r22
 224:	b7 07       	cpc	r27, r23
 226:	b8 f4       	brcc	.+46     	; 0x256 <__vector_10+0x118>
	{
		stepStateR++;
 228:	20 91 18 01 	lds	r18, 0x0118
 22c:	2f 5f       	subi	r18, 0xFF	; 255
 22e:	20 93 18 01 	sts	0x0118, r18
		if(stepStateR >= 4) stepStateR = 0;
 232:	24 30       	cpi	r18, 0x04	; 4
 234:	10 f0       	brcs	.+4      	; 0x23a <__vector_10+0xfc>
 236:	10 92 18 01 	sts	0x0118, r1
		PORTB = ((PORTB & 0x0F) | stepPatternR[stepStateR]); 
 23a:	25 b1       	in	r18, 0x05	; 5
 23c:	e0 91 18 01 	lds	r30, 0x0118
 240:	f0 e0       	ldi	r31, 0x00	; 0
 242:	e8 5f       	subi	r30, 0xF8	; 248
 244:	fe 4f       	sbci	r31, 0xFE	; 254
 246:	2f 70       	andi	r18, 0x0F	; 15
 248:	30 81       	ld	r19, Z
 24a:	23 2b       	or	r18, r19
 24c:	25 b9       	out	0x05, r18	; 5
		prevStepR++;
 24e:	01 96       	adiw	r24, 0x01	; 1
 250:	a1 1d       	adc	r26, r1
 252:	b1 1d       	adc	r27, r1
 254:	1b c0       	rjmp	.+54     	; 0x28c <__vector_10+0x14e>
	}
	else if(stepperCountRight < prevStepR)
 256:	48 17       	cp	r20, r24
 258:	59 07       	cpc	r21, r25
 25a:	6a 07       	cpc	r22, r26
 25c:	7b 07       	cpc	r23, r27
 25e:	f0 f4       	brcc	.+60     	; 0x29c <__vector_10+0x15e>
	{
		if(!stepStateR) stepStateR = 3;
 260:	20 91 18 01 	lds	r18, 0x0118
 264:	22 23       	and	r18, r18
 266:	11 f4       	brne	.+4      	; 0x26c <__vector_10+0x12e>
 268:	23 e0       	ldi	r18, 0x03	; 3
 26a:	01 c0       	rjmp	.+2      	; 0x26e <__vector_10+0x130>
		else stepStateR--;
 26c:	21 50       	subi	r18, 0x01	; 1
 26e:	20 93 18 01 	sts	0x0118, r18
		PORTB = ((PORTB & 0x0F) | stepPatternR[stepStateR]);
 272:	25 b1       	in	r18, 0x05	; 5
 274:	e0 91 18 01 	lds	r30, 0x0118
 278:	f0 e0       	ldi	r31, 0x00	; 0
 27a:	e8 5f       	subi	r30, 0xF8	; 248
 27c:	fe 4f       	sbci	r31, 0xFE	; 254
 27e:	2f 70       	andi	r18, 0x0F	; 15
 280:	30 81       	ld	r19, Z
 282:	23 2b       	or	r18, r19
 284:	25 b9       	out	0x05, r18	; 5
		prevStepR--;
 286:	01 97       	sbiw	r24, 0x01	; 1
 288:	a1 09       	sbc	r26, r1
 28a:	b1 09       	sbc	r27, r1
 28c:	80 93 00 01 	sts	0x0100, r24
 290:	90 93 01 01 	sts	0x0101, r25
 294:	a0 93 02 01 	sts	0x0102, r26
 298:	b0 93 03 01 	sts	0x0103, r27
	}
}
 29c:	ff 91       	pop	r31
 29e:	ef 91       	pop	r30
 2a0:	bf 91       	pop	r27
 2a2:	af 91       	pop	r26
 2a4:	9f 91       	pop	r25
 2a6:	8f 91       	pop	r24
 2a8:	7f 91       	pop	r23
 2aa:	6f 91       	pop	r22
 2ac:	5f 91       	pop	r21
 2ae:	4f 91       	pop	r20
 2b0:	3f 91       	pop	r19
 2b2:	2f 91       	pop	r18
 2b4:	0f 90       	pop	r0
 2b6:	0f be       	out	0x3f, r0	; 63
 2b8:	0f 90       	pop	r0
 2ba:	1f 90       	pop	r1
 2bc:	18 95       	reti

000002be <delay_us>:
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 2be:	32 e0       	ldi	r19, 0x02	; 2
uint8_t i2cTxMode = 0; // Mode to use when i2c ST mode called.
uint8_t bytesCount = 0;

void delay_us(uint16_t delah)
{
	while(delah)
 2c0:	04 c0       	rjmp	.+8      	; 0x2ca <delay_us+0xc>
 2c2:	23 2f       	mov	r18, r19
 2c4:	2a 95       	dec	r18
 2c6:	f1 f7       	brne	.-4      	; 0x2c4 <delay_us+0x6>
	{
		_delay_us(1);
		delah--;
 2c8:	01 97       	sbiw	r24, 0x01	; 1
uint8_t i2cTxMode = 0; // Mode to use when i2c ST mode called.
uint8_t bytesCount = 0;

void delay_us(uint16_t delah)
{
	while(delah)
 2ca:	00 97       	sbiw	r24, 0x00	; 0
 2cc:	d1 f7       	brne	.-12     	; 0x2c2 <delay_us+0x4>
	{
		_delay_us(1);
		delah--;
	}
}
 2ce:	08 95       	ret

000002d0 <delay_ms>:
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 2d0:	20 ed       	ldi	r18, 0xD0	; 208
 2d2:	37 e0       	ldi	r19, 0x07	; 7

void delay_ms(uint16_t delah)
{
	while(delah)
 2d4:	04 c0       	rjmp	.+8      	; 0x2de <delay_ms+0xe>
 2d6:	f9 01       	movw	r30, r18
 2d8:	31 97       	sbiw	r30, 0x01	; 1
 2da:	f1 f7       	brne	.-4      	; 0x2d8 <delay_ms+0x8>
	{
		_delay_ms(1);
		delah--;
 2dc:	01 97       	sbiw	r24, 0x01	; 1
	}
}

void delay_ms(uint16_t delah)
{
	while(delah)
 2de:	00 97       	sbiw	r24, 0x00	; 0
 2e0:	d1 f7       	brne	.-12     	; 0x2d6 <delay_ms+0x6>
	{
		_delay_ms(1);
		delah--;
	}
}
 2e2:	08 95       	ret

000002e4 <rxDataHandler>:

void rxDataHandler(uint8_t data)
{
 2e4:	8f 92       	push	r8
 2e6:	9f 92       	push	r9
 2e8:	af 92       	push	r10
 2ea:	bf 92       	push	r11
 2ec:	cf 92       	push	r12
 2ee:	df 92       	push	r13
 2f0:	ef 92       	push	r14
 2f2:	ff 92       	push	r15
 2f4:	0f 93       	push	r16
 2f6:	1f 93       	push	r17
	if(i2cMode == 0)
 2f8:	90 91 21 01 	lds	r25, 0x0121
 2fc:	99 23       	and	r25, r25
 2fe:	19 f4       	brne	.+6      	; 0x306 <rxDataHandler+0x22>
	{
		i2cMode = data;
 300:	80 93 21 01 	sts	0x0121, r24
 304:	d4 c0       	rjmp	.+424    	; 0x4ae <rxDataHandler+0x1ca>
		//setServo(1,21);
	}
	else
	{
		switch (i2cMode)
 306:	97 31       	cpi	r25, 0x17	; 23
 308:	c1 f0       	breq	.+48     	; 0x33a <rxDataHandler+0x56>
 30a:	98 31       	cpi	r25, 0x18	; 24
 30c:	30 f4       	brcc	.+12     	; 0x31a <rxDataHandler+0x36>
 30e:	91 30       	cpi	r25, 0x01	; 1
 310:	51 f0       	breq	.+20     	; 0x326 <rxDataHandler+0x42>
 312:	99 30       	cpi	r25, 0x09	; 9
 314:	09 f0       	breq	.+2      	; 0x318 <rxDataHandler+0x34>
 316:	c6 c0       	rjmp	.+396    	; 0x4a4 <rxDataHandler+0x1c0>
 318:	09 c0       	rjmp	.+18     	; 0x32c <rxDataHandler+0x48>
 31a:	98 31       	cpi	r25, 0x18	; 24
 31c:	d1 f1       	breq	.+116    	; 0x392 <rxDataHandler+0xae>
 31e:	99 31       	cpi	r25, 0x19	; 25
 320:	09 f0       	breq	.+2      	; 0x324 <rxDataHandler+0x40>
 322:	c0 c0       	rjmp	.+384    	; 0x4a4 <rxDataHandler+0x1c0>
 324:	62 c0       	rjmp	.+196    	; 0x3ea <rxDataHandler+0x106>
		{
			case 1:
				gState = data;
 326:	80 93 20 01 	sts	0x0120, r24
 32a:	02 c0       	rjmp	.+4      	; 0x330 <rxDataHandler+0x4c>
				bytesCount = 0;
				i2cMode = 0;
				break;
			case 9: // Slave TX mode set.
				i2cTxMode = data;
 32c:	80 93 1f 01 	sts	0x011F, r24
				bytesCount = 0;
 330:	10 92 1e 01 	sts	0x011E, r1
				i2cMode = 0;
 334:	10 92 21 01 	sts	0x0121, r1
				break;
 338:	ba c0       	rjmp	.+372    	; 0x4ae <rxDataHandler+0x1ca>
 33a:	48 2f       	mov	r20, r24
 33c:	50 e0       	ldi	r21, 0x00	; 0
 33e:	60 e0       	ldi	r22, 0x00	; 0
 340:	70 e0       	ldi	r23, 0x00	; 0
 342:	00 91 14 01 	lds	r16, 0x0114
 346:	10 91 15 01 	lds	r17, 0x0115
 34a:	20 91 16 01 	lds	r18, 0x0116
 34e:	30 91 17 01 	lds	r19, 0x0117
			case 23: // Left wheel (mm) input. -127 thru 127, signed magnitude via MSB.
				// TODO: convert mm to steps.
				if(data & 0x80) stepperCountLeft -= (data & 0x7F); // MSB = 1 = Negative.
 352:	87 ff       	sbrs	r24, 7
 354:	11 c0       	rjmp	.+34     	; 0x378 <rxDataHandler+0x94>
 356:	4f 77       	andi	r20, 0x7F	; 127
 358:	50 70       	andi	r21, 0x00	; 0
 35a:	60 70       	andi	r22, 0x00	; 0
 35c:	70 70       	andi	r23, 0x00	; 0
 35e:	04 1b       	sub	r16, r20
 360:	15 0b       	sbc	r17, r21
 362:	26 0b       	sbc	r18, r22
 364:	37 0b       	sbc	r19, r23
 366:	00 93 14 01 	sts	0x0114, r16
 36a:	10 93 15 01 	sts	0x0115, r17
 36e:	20 93 16 01 	sts	0x0116, r18
 372:	30 93 17 01 	sts	0x0117, r19
 376:	de cf       	rjmp	.-68     	; 0x334 <rxDataHandler+0x50>
				else stepperCountLeft += data;// Positive.
 378:	40 0f       	add	r20, r16
 37a:	51 1f       	adc	r21, r17
 37c:	62 1f       	adc	r22, r18
 37e:	73 1f       	adc	r23, r19
 380:	40 93 14 01 	sts	0x0114, r20
 384:	50 93 15 01 	sts	0x0115, r21
 388:	60 93 16 01 	sts	0x0116, r22
 38c:	70 93 17 01 	sts	0x0117, r23
 390:	d1 cf       	rjmp	.-94     	; 0x334 <rxDataHandler+0x50>
 392:	48 2f       	mov	r20, r24
 394:	50 e0       	ldi	r21, 0x00	; 0
 396:	60 e0       	ldi	r22, 0x00	; 0
 398:	70 e0       	ldi	r23, 0x00	; 0
 39a:	00 91 10 01 	lds	r16, 0x0110
 39e:	10 91 11 01 	lds	r17, 0x0111
 3a2:	20 91 12 01 	lds	r18, 0x0112
 3a6:	30 91 13 01 	lds	r19, 0x0113
				i2cMode = 0;
				break;
			case 24:// Right wheel (mm) input. -127 thru 127, signed magnitude via MSB.
				// TODO: convert mm to steps.
				if(data & 0x80) stepperCountRight -= (data & 0x7F); // MSB = 1 = Negative.
 3aa:	87 ff       	sbrs	r24, 7
 3ac:	11 c0       	rjmp	.+34     	; 0x3d0 <rxDataHandler+0xec>
 3ae:	4f 77       	andi	r20, 0x7F	; 127
 3b0:	50 70       	andi	r21, 0x00	; 0
 3b2:	60 70       	andi	r22, 0x00	; 0
 3b4:	70 70       	andi	r23, 0x00	; 0
 3b6:	04 1b       	sub	r16, r20
 3b8:	15 0b       	sbc	r17, r21
 3ba:	26 0b       	sbc	r18, r22
 3bc:	37 0b       	sbc	r19, r23
 3be:	00 93 10 01 	sts	0x0110, r16
 3c2:	10 93 11 01 	sts	0x0111, r17
 3c6:	20 93 12 01 	sts	0x0112, r18
 3ca:	30 93 13 01 	sts	0x0113, r19
 3ce:	b2 cf       	rjmp	.-156    	; 0x334 <rxDataHandler+0x50>
				else stepperCountRight += data;// Positive.
 3d0:	40 0f       	add	r20, r16
 3d2:	51 1f       	adc	r21, r17
 3d4:	62 1f       	adc	r22, r18
 3d6:	73 1f       	adc	r23, r19
 3d8:	40 93 10 01 	sts	0x0110, r20
 3dc:	50 93 11 01 	sts	0x0111, r21
 3e0:	60 93 12 01 	sts	0x0112, r22
 3e4:	70 93 13 01 	sts	0x0113, r23
 3e8:	a5 cf       	rjmp	.-182    	; 0x334 <rxDataHandler+0x50>
 3ea:	c0 90 14 01 	lds	r12, 0x0114
 3ee:	d0 90 15 01 	lds	r13, 0x0115
 3f2:	e0 90 16 01 	lds	r14, 0x0116
 3f6:	f0 90 17 01 	lds	r15, 0x0117
 3fa:	80 90 10 01 	lds	r8, 0x0110
 3fe:	90 90 11 01 	lds	r9, 0x0111
 402:	a0 90 12 01 	lds	r10, 0x0112
 406:	b0 90 13 01 	lds	r11, 0x0113
				i2cMode = 0;
				break;
			case 25:
				if(data & 0x80) 
 40a:	87 ff       	sbrs	r24, 7
 40c:	2a c0       	rjmp	.+84     	; 0x462 <rxDataHandler+0x17e>
				{
					stepperCountLeft  -= (TICKS_PER_CM * (data & 0x7F)); // MSB = 1 = Negative.
 40e:	90 e0       	ldi	r25, 0x00	; 0
 410:	8f 77       	andi	r24, 0x7F	; 127
 412:	90 70       	andi	r25, 0x00	; 0
 414:	42 e3       	ldi	r20, 0x32	; 50
 416:	50 e0       	ldi	r21, 0x00	; 0
 418:	84 9f       	mul	r24, r20
 41a:	90 01       	movw	r18, r0
 41c:	85 9f       	mul	r24, r21
 41e:	30 0d       	add	r19, r0
 420:	94 9f       	mul	r25, r20
 422:	30 0d       	add	r19, r0
 424:	11 24       	eor	r1, r1
 426:	c9 01       	movw	r24, r18
 428:	aa 27       	eor	r26, r26
 42a:	97 fd       	sbrc	r25, 7
 42c:	a0 95       	com	r26
 42e:	ba 2f       	mov	r27, r26
 430:	c8 1a       	sub	r12, r24
 432:	d9 0a       	sbc	r13, r25
 434:	ea 0a       	sbc	r14, r26
 436:	fb 0a       	sbc	r15, r27
 438:	c0 92 14 01 	sts	0x0114, r12
 43c:	d0 92 15 01 	sts	0x0115, r13
 440:	e0 92 16 01 	sts	0x0116, r14
 444:	f0 92 17 01 	sts	0x0117, r15
					stepperCountRight -= (TICKS_PER_CM * (data & 0x7F));
 448:	88 1a       	sub	r8, r24
 44a:	99 0a       	sbc	r9, r25
 44c:	aa 0a       	sbc	r10, r26
 44e:	bb 0a       	sbc	r11, r27
 450:	80 92 10 01 	sts	0x0110, r8
 454:	90 92 11 01 	sts	0x0111, r9
 458:	a0 92 12 01 	sts	0x0112, r10
 45c:	b0 92 13 01 	sts	0x0113, r11
 460:	26 c0       	rjmp	.+76     	; 0x4ae <rxDataHandler+0x1ca>
				}
				else
				{
					stepperCountLeft  += (TICKS_PER_CM * data); // Positive.
 462:	92 e3       	ldi	r25, 0x32	; 50
 464:	89 9f       	mul	r24, r25
 466:	c0 01       	movw	r24, r0
 468:	11 24       	eor	r1, r1
 46a:	aa 27       	eor	r26, r26
 46c:	97 fd       	sbrc	r25, 7
 46e:	a0 95       	com	r26
 470:	ba 2f       	mov	r27, r26
 472:	c8 0e       	add	r12, r24
 474:	d9 1e       	adc	r13, r25
 476:	ea 1e       	adc	r14, r26
 478:	fb 1e       	adc	r15, r27
 47a:	c0 92 14 01 	sts	0x0114, r12
 47e:	d0 92 15 01 	sts	0x0115, r13
 482:	e0 92 16 01 	sts	0x0116, r14
 486:	f0 92 17 01 	sts	0x0117, r15
					stepperCountRight += (TICKS_PER_CM * data);
 48a:	88 0d       	add	r24, r8
 48c:	99 1d       	adc	r25, r9
 48e:	aa 1d       	adc	r26, r10
 490:	bb 1d       	adc	r27, r11
 492:	80 93 10 01 	sts	0x0110, r24
 496:	90 93 11 01 	sts	0x0111, r25
 49a:	a0 93 12 01 	sts	0x0112, r26
 49e:	b0 93 13 01 	sts	0x0113, r27
 4a2:	05 c0       	rjmp	.+10     	; 0x4ae <rxDataHandler+0x1ca>
				}
				break;
			default: // Unknown command
				i2cMode = 0;
 4a4:	10 92 21 01 	sts	0x0121, r1
				globalError = 2;
 4a8:	82 e0       	ldi	r24, 0x02	; 2
 4aa:	80 93 22 01 	sts	0x0122, r24
				break;
		}
	}
}
 4ae:	1f 91       	pop	r17
 4b0:	0f 91       	pop	r16
 4b2:	ff 90       	pop	r15
 4b4:	ef 90       	pop	r14
 4b6:	df 90       	pop	r13
 4b8:	cf 90       	pop	r12
 4ba:	bf 90       	pop	r11
 4bc:	af 90       	pop	r10
 4be:	9f 90       	pop	r9
 4c0:	8f 90       	pop	r8
 4c2:	08 95       	ret

000004c4 <txDataHandler>:

uint32_t holder = 0;

void txDataHandler(void) // Generates the data to be transmitted over i2c.
{
	switch (i2cTxMode)
 4c4:	80 91 1f 01 	lds	r24, 0x011F
 4c8:	8b 32       	cpi	r24, 0x2B	; 43
 4ca:	21 f0       	breq	.+8      	; 0x4d4 <txDataHandler+0x10>
 4cc:	83 36       	cpi	r24, 0x63	; 99
 4ce:	09 f0       	breq	.+2      	; 0x4d2 <txDataHandler+0xe>
 4d0:	9d c0       	rjmp	.+314    	; 0x60c <txDataHandler+0x148>
 4d2:	08 95       	ret
	{
		case 43: // IR array data
			switch (bytesCount)
 4d4:	80 91 1e 01 	lds	r24, 0x011E
 4d8:	83 30       	cpi	r24, 0x03	; 3
 4da:	39 f1       	breq	.+78     	; 0x52a <txDataHandler+0x66>
 4dc:	84 30       	cpi	r24, 0x04	; 4
 4de:	28 f4       	brcc	.+10     	; 0x4ea <txDataHandler+0x26>
 4e0:	81 30       	cpi	r24, 0x01	; 1
 4e2:	19 f1       	breq	.+70     	; 0x52a <txDataHandler+0x66>
 4e4:	82 30       	cpi	r24, 0x02	; 2
 4e6:	58 f5       	brcc	.+86     	; 0x53e <txDataHandler+0x7a>
 4e8:	0b c0       	rjmp	.+22     	; 0x500 <txDataHandler+0x3c>
 4ea:	85 30       	cpi	r24, 0x05	; 5
 4ec:	f1 f0       	breq	.+60     	; 0x52a <txDataHandler+0x66>
 4ee:	85 30       	cpi	r24, 0x05	; 5
 4f0:	d8 f1       	brcs	.+118    	; 0x568 <txDataHandler+0xa4>
 4f2:	86 30       	cpi	r24, 0x06	; 6
 4f4:	09 f4       	brne	.+2      	; 0x4f8 <txDataHandler+0x34>
 4f6:	4d c0       	rjmp	.+154    	; 0x592 <txDataHandler+0xce>
 4f8:	87 30       	cpi	r24, 0x07	; 7
 4fa:	09 f0       	breq	.+2      	; 0x4fe <txDataHandler+0x3a>
 4fc:	81 c0       	rjmp	.+258    	; 0x600 <txDataHandler+0x13c>
 4fe:	75 c0       	rjmp	.+234    	; 0x5ea <txDataHandler+0x126>
			{
				case 0:
					holder = (arcIR4[0] + arcIR4[1] + arcIR4[2] + arcIR4[3]);
 500:	80 91 36 01 	lds	r24, 0x0136
 504:	90 91 37 01 	lds	r25, 0x0137
 508:	20 91 34 01 	lds	r18, 0x0134
 50c:	30 91 35 01 	lds	r19, 0x0135
 510:	82 0f       	add	r24, r18
 512:	93 1f       	adc	r25, r19
 514:	20 91 38 01 	lds	r18, 0x0138
 518:	30 91 39 01 	lds	r19, 0x0139
 51c:	82 0f       	add	r24, r18
 51e:	93 1f       	adc	r25, r19
 520:	20 91 3a 01 	lds	r18, 0x013A
 524:	30 91 3b 01 	lds	r19, 0x013B
 528:	48 c0       	rjmp	.+144    	; 0x5ba <txDataHandler+0xf6>
					holder /= 4;
					TWDR = (uint8_t)(holder >> 8);
					TWCR |= (1<<TWEA);
					break;
				case 1:
					TWDR = (uint8_t)holder;
 52a:	80 91 1a 01 	lds	r24, 0x011A
 52e:	80 93 bb 00 	sts	0x00BB, r24
					TWCR |= (1<<TWEA);
 532:	80 91 bc 00 	lds	r24, 0x00BC
 536:	80 64       	ori	r24, 0x40	; 64
 538:	80 93 bc 00 	sts	0x00BC, r24
					break;
 53c:	61 c0       	rjmp	.+194    	; 0x600 <txDataHandler+0x13c>
				case 2:
					holder = (arcIR5[0] + arcIR5[1] + arcIR5[2] + arcIR5[3]);
 53e:	80 91 26 01 	lds	r24, 0x0126
 542:	90 91 27 01 	lds	r25, 0x0127
 546:	20 91 24 01 	lds	r18, 0x0124
 54a:	30 91 25 01 	lds	r19, 0x0125
 54e:	82 0f       	add	r24, r18
 550:	93 1f       	adc	r25, r19
 552:	20 91 28 01 	lds	r18, 0x0128
 556:	30 91 29 01 	lds	r19, 0x0129
 55a:	82 0f       	add	r24, r18
 55c:	93 1f       	adc	r25, r19
 55e:	20 91 2a 01 	lds	r18, 0x012A
 562:	30 91 2b 01 	lds	r19, 0x012B
 566:	29 c0       	rjmp	.+82     	; 0x5ba <txDataHandler+0xf6>
				case 3:
					TWDR = (uint8_t)holder;
					TWCR |= (1<<TWEA);
					break;
				case 4:
					holder = (arcIR6[0] + arcIR6[1] + arcIR6[2] + arcIR6[3]);
 568:	80 91 3e 01 	lds	r24, 0x013E
 56c:	90 91 3f 01 	lds	r25, 0x013F
 570:	20 91 3c 01 	lds	r18, 0x013C
 574:	30 91 3d 01 	lds	r19, 0x013D
 578:	82 0f       	add	r24, r18
 57a:	93 1f       	adc	r25, r19
 57c:	20 91 40 01 	lds	r18, 0x0140
 580:	30 91 41 01 	lds	r19, 0x0141
 584:	82 0f       	add	r24, r18
 586:	93 1f       	adc	r25, r19
 588:	20 91 42 01 	lds	r18, 0x0142
 58c:	30 91 43 01 	lds	r19, 0x0143
 590:	14 c0       	rjmp	.+40     	; 0x5ba <txDataHandler+0xf6>
				case 5:
					TWDR = (uint8_t)holder;
					TWCR |= (1<<TWEA);
					break;
				case 6:
					holder = (arcIR7[0] + arcIR7[1] + arcIR7[2] + arcIR7[3]);
 592:	80 91 2e 01 	lds	r24, 0x012E
 596:	90 91 2f 01 	lds	r25, 0x012F
 59a:	20 91 2c 01 	lds	r18, 0x012C
 59e:	30 91 2d 01 	lds	r19, 0x012D
 5a2:	82 0f       	add	r24, r18
 5a4:	93 1f       	adc	r25, r19
 5a6:	20 91 30 01 	lds	r18, 0x0130
 5aa:	30 91 31 01 	lds	r19, 0x0131
 5ae:	82 0f       	add	r24, r18
 5b0:	93 1f       	adc	r25, r19
 5b2:	20 91 32 01 	lds	r18, 0x0132
 5b6:	30 91 33 01 	lds	r19, 0x0133
 5ba:	82 0f       	add	r24, r18
 5bc:	93 1f       	adc	r25, r19
 5be:	a0 e0       	ldi	r26, 0x00	; 0
 5c0:	b0 e0       	ldi	r27, 0x00	; 0
					holder /= 4;
 5c2:	42 e0       	ldi	r20, 0x02	; 2
 5c4:	b6 95       	lsr	r27
 5c6:	a7 95       	ror	r26
 5c8:	97 95       	ror	r25
 5ca:	87 95       	ror	r24
 5cc:	4a 95       	dec	r20
 5ce:	d1 f7       	brne	.-12     	; 0x5c4 <txDataHandler+0x100>
 5d0:	80 93 1a 01 	sts	0x011A, r24
 5d4:	90 93 1b 01 	sts	0x011B, r25
 5d8:	a0 93 1c 01 	sts	0x011C, r26
 5dc:	b0 93 1d 01 	sts	0x011D, r27
					TWDR = (uint8_t)(holder >> 8);
 5e0:	89 2f       	mov	r24, r25
 5e2:	9a 2f       	mov	r25, r26
 5e4:	ab 2f       	mov	r26, r27
 5e6:	bb 27       	eor	r27, r27
 5e8:	a2 cf       	rjmp	.-188    	; 0x52e <txDataHandler+0x6a>
					TWCR |= (1<<TWEA);
					break;
				case 7:
					TWDR = (uint8_t)holder;
 5ea:	80 91 1a 01 	lds	r24, 0x011A
 5ee:	80 93 bb 00 	sts	0x00BB, r24
					TWCR &= ~(1<<TWEA); // Last byte, expect NACK.
 5f2:	80 91 bc 00 	lds	r24, 0x00BC
 5f6:	8f 7b       	andi	r24, 0xBF	; 191
 5f8:	80 93 bc 00 	sts	0x00BC, r24
					i2cTxMode = 0; // And we're done.
 5fc:	10 92 1f 01 	sts	0x011F, r1
					break;
			}
			bytesCount++;
 600:	80 91 1e 01 	lds	r24, 0x011E
 604:	8f 5f       	subi	r24, 0xFF	; 255
 606:	80 93 1e 01 	sts	0x011E, r24
			break;
 60a:	08 95       	ret
		case 99: // Send error condition, if any.
			break;
		default:
			globalError = 3;
 60c:	83 e0       	ldi	r24, 0x03	; 3
 60e:	80 93 22 01 	sts	0x0122, r24
 612:	08 95       	ret

00000614 <adcInit>:

uint8_t arrayIndex = 0; // Which index in the arrays we're on.

void adcInit(void)
{
	ADMUX = ADC_MUX;
 614:	80 e4       	ldi	r24, 0x40	; 64
 616:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA = ADC_SRA; 
 61a:	86 e8       	ldi	r24, 0x86	; 134
 61c:	80 93 7a 00 	sts	0x007A, r24
	DIDR0 = 0b00001111;
 620:	8f e0       	ldi	r24, 0x0F	; 15
 622:	80 93 7e 00 	sts	0x007E, r24
	sei(); // Enable interrupts globally.
 626:	78 94       	sei
}
 628:	08 95       	ret

0000062a <analogGather>:
 62a:	1f 93       	push	r17
 62c:	10 e0       	ldi	r17, 0x00	; 0
 62e:	80 91 7a 00 	lds	r24, 0x007A
 632:	80 64       	ori	r24, 0x40	; 64
 634:	80 93 7a 00 	sts	0x007A, r24
 638:	04 c0       	rjmp	.+8      	; 0x642 <analogGather+0x18>
 63a:	81 e0       	ldi	r24, 0x01	; 1
 63c:	90 e0       	ldi	r25, 0x00	; 0
 63e:	0e 94 5f 01 	call	0x2be	; 0x2be <delay_us>
 642:	80 91 7a 00 	lds	r24, 0x007A
 646:	84 ff       	sbrs	r24, 4
 648:	f8 cf       	rjmp	.-16     	; 0x63a <analogGather+0x10>
 64a:	13 30       	cpi	r17, 0x03	; 3
 64c:	f1 f0       	breq	.+60     	; 0x68a <analogGather+0x60>
 64e:	14 30       	cpi	r17, 0x04	; 4
 650:	20 f4       	brcc	.+8      	; 0x65a <analogGather+0x30>
 652:	11 30       	cpi	r17, 0x01	; 1
 654:	09 f0       	breq	.+2      	; 0x658 <analogGather+0x2e>
 656:	4f c0       	rjmp	.+158    	; 0x6f6 <analogGather+0xcc>
 658:	06 c0       	rjmp	.+12     	; 0x666 <analogGather+0x3c>
 65a:	15 30       	cpi	r17, 0x05	; 5
 65c:	41 f1       	breq	.+80     	; 0x6ae <analogGather+0x84>
 65e:	17 30       	cpi	r17, 0x07	; 7
 660:	09 f0       	breq	.+2      	; 0x664 <analogGather+0x3a>
 662:	49 c0       	rjmp	.+146    	; 0x6f6 <analogGather+0xcc>
 664:	36 c0       	rjmp	.+108    	; 0x6d2 <analogGather+0xa8>
 666:	80 91 78 00 	lds	r24, 0x0078
 66a:	90 91 79 00 	lds	r25, 0x0079
 66e:	e0 91 23 01 	lds	r30, 0x0123
 672:	f0 e0       	ldi	r31, 0x00	; 0
 674:	ee 0f       	add	r30, r30
 676:	ff 1f       	adc	r31, r31
 678:	ec 5c       	subi	r30, 0xCC	; 204
 67a:	fe 4f       	sbci	r31, 0xFE	; 254
 67c:	91 83       	std	Z+1, r25	; 0x01
 67e:	80 83       	st	Z, r24
 680:	80 91 7c 00 	lds	r24, 0x007C
 684:	80 7e       	andi	r24, 0xE0	; 224
 686:	81 60       	ori	r24, 0x01	; 1
 688:	34 c0       	rjmp	.+104    	; 0x6f2 <analogGather+0xc8>
 68a:	80 91 78 00 	lds	r24, 0x0078
 68e:	90 91 79 00 	lds	r25, 0x0079
 692:	e0 91 23 01 	lds	r30, 0x0123
 696:	f0 e0       	ldi	r31, 0x00	; 0
 698:	ee 0f       	add	r30, r30
 69a:	ff 1f       	adc	r31, r31
 69c:	ec 5d       	subi	r30, 0xDC	; 220
 69e:	fe 4f       	sbci	r31, 0xFE	; 254
 6a0:	91 83       	std	Z+1, r25	; 0x01
 6a2:	80 83       	st	Z, r24
 6a4:	80 91 7c 00 	lds	r24, 0x007C
 6a8:	80 7e       	andi	r24, 0xE0	; 224
 6aa:	82 60       	ori	r24, 0x02	; 2
 6ac:	22 c0       	rjmp	.+68     	; 0x6f2 <analogGather+0xc8>
 6ae:	80 91 78 00 	lds	r24, 0x0078
 6b2:	90 91 79 00 	lds	r25, 0x0079
 6b6:	e0 91 23 01 	lds	r30, 0x0123
 6ba:	f0 e0       	ldi	r31, 0x00	; 0
 6bc:	ee 0f       	add	r30, r30
 6be:	ff 1f       	adc	r31, r31
 6c0:	e4 5c       	subi	r30, 0xC4	; 196
 6c2:	fe 4f       	sbci	r31, 0xFE	; 254
 6c4:	91 83       	std	Z+1, r25	; 0x01
 6c6:	80 83       	st	Z, r24
 6c8:	80 91 7c 00 	lds	r24, 0x007C
 6cc:	80 7e       	andi	r24, 0xE0	; 224
 6ce:	83 60       	ori	r24, 0x03	; 3
 6d0:	10 c0       	rjmp	.+32     	; 0x6f2 <analogGather+0xc8>
 6d2:	80 91 78 00 	lds	r24, 0x0078
 6d6:	90 91 79 00 	lds	r25, 0x0079
 6da:	e0 91 23 01 	lds	r30, 0x0123
 6de:	f0 e0       	ldi	r31, 0x00	; 0
 6e0:	ee 0f       	add	r30, r30
 6e2:	ff 1f       	adc	r31, r31
 6e4:	e4 5d       	subi	r30, 0xD4	; 212
 6e6:	fe 4f       	sbci	r31, 0xFE	; 254
 6e8:	91 83       	std	Z+1, r25	; 0x01
 6ea:	80 83       	st	Z, r24
 6ec:	80 91 7c 00 	lds	r24, 0x007C
 6f0:	80 7e       	andi	r24, 0xE0	; 224
 6f2:	80 93 7c 00 	sts	0x007C, r24
 6f6:	1f 5f       	subi	r17, 0xFF	; 255
 6f8:	18 30       	cpi	r17, 0x08	; 8
 6fa:	09 f0       	breq	.+2      	; 0x6fe <analogGather+0xd4>
 6fc:	98 cf       	rjmp	.-208    	; 0x62e <analogGather+0x4>
 6fe:	80 91 23 01 	lds	r24, 0x0123
 702:	8f 5f       	subi	r24, 0xFF	; 255
 704:	80 93 23 01 	sts	0x0123, r24
 708:	84 30       	cpi	r24, 0x04	; 4
 70a:	10 f0       	brcs	.+4      	; 0x710 <analogGather+0xe6>
 70c:	10 92 23 01 	sts	0x0123, r1
 710:	1f 91       	pop	r17
 712:	08 95       	ret

00000714 <main>:
 714:	8f ef       	ldi	r24, 0xFF	; 255
 716:	84 b9       	out	0x04, r24	; 4
 718:	88 e4       	ldi	r24, 0x48	; 72
 71a:	80 93 ba 00 	sts	0x00BA, r24
 71e:	82 e0       	ldi	r24, 0x02	; 2
 720:	80 93 b8 00 	sts	0x00B8, r24
 724:	81 e0       	ldi	r24, 0x01	; 1
 726:	80 93 b9 00 	sts	0x00B9, r24
 72a:	85 e4       	ldi	r24, 0x45	; 69
 72c:	80 93 bc 00 	sts	0x00BC, r24
 730:	10 92 80 00 	sts	0x0080, r1
 734:	8d e1       	ldi	r24, 0x1D	; 29
 736:	80 93 81 00 	sts	0x0081, r24
 73a:	8d e5       	ldi	r24, 0x5D	; 93
 73c:	90 e0       	ldi	r25, 0x00	; 0
 73e:	90 93 87 00 	sts	0x0087, r25
 742:	80 93 86 00 	sts	0x0086, r24
 746:	80 e2       	ldi	r24, 0x20	; 32
 748:	80 93 6f 00 	sts	0x006F, r24
 74c:	0e 94 0a 03 	call	0x614	; 0x614 <adcInit>
 750:	84 e6       	ldi	r24, 0x64	; 100
 752:	90 e0       	ldi	r25, 0x00	; 0
 754:	0e 94 68 01 	call	0x2d0	; 0x2d0 <delay_ms>
 758:	78 94       	sei
 75a:	0e 94 15 03 	call	0x62a	; 0x62a <analogGather>
 75e:	84 e1       	ldi	r24, 0x14	; 20
 760:	90 e0       	ldi	r25, 0x00	; 0
 762:	0e 94 68 01 	call	0x2d0	; 0x2d0 <delay_ms>
 766:	f9 cf       	rjmp	.-14     	; 0x75a <main+0x46>

00000768 <_exit>:
 768:	f8 94       	cli

0000076a <__stop_program>:
 76a:	ff cf       	rjmp	.-2      	; 0x76a <__stop_program>
