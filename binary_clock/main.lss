
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000040a  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  0000040a  000004be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800064  00800064  000004c2  2**0
                  ALLOC
  3 .eeprom       00000002  00810000  00810000  000004c2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .debug_aranges 00000020  00000000  00000000  000004c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000006f  00000000  00000000  000004e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000078b  00000000  00000000  00000553  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000017f  00000000  00000000  00000cde  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000459  00000000  00000000  00000e5d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000050  00000000  00000000  000012b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000105  00000000  00000000  00001308  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001c8  00000000  00000000  0000140d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  000015d5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 15 01 	jmp	0x22a	; 0x22a <__vector_6>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e0       	ldi	r30, 0x0A	; 10
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a4 36       	cpi	r26, 0x64	; 100
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a4 e6       	ldi	r26, 0x64	; 100
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a8 36       	cpi	r26, 0x68	; 104
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 58 00 	call	0xb0	; 0xb0 <main>
  8a:	0c 94 03 02 	jmp	0x406	; 0x406 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <tens>:
	}
	if(hur >= 13)
		hur = 1;
}

uint8_t tens(uint16_t n) {
  92:	64 e6       	ldi	r22, 0x64	; 100
  94:	70 e0       	ldi	r23, 0x00	; 0
  96:	0e 94 c7 01 	call	0x38e	; 0x38e <__udivmodhi4>
  9a:	6a e0       	ldi	r22, 0x0A	; 10
  9c:	70 e0       	ldi	r23, 0x00	; 0
  9e:	0e 94 c7 01 	call	0x38e	; 0x38e <__udivmodhi4>
  a2:	86 2f       	mov	r24, r22
	while (n >= 10) {
		n-=10;
		i++;
	}
	return i;
}
  a4:	08 95       	ret

000000a6 <delay>:
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  a6:	88 ee       	ldi	r24, 0xE8	; 232
  a8:	93 e0       	ldi	r25, 0x03	; 3
  aa:	01 97       	sbiw	r24, 0x01	; 1
  ac:	f1 f7       	brne	.-4      	; 0xaa <delay+0x4>

void delay(void)
{
	_delay_us(500);
}
  ae:	08 95       	ret

000000b0 <main>:

int main(void)
{
  b0:	2f 92       	push	r2
  b2:	3f 92       	push	r3
  b4:	4f 92       	push	r4
  b6:	5f 92       	push	r5
  b8:	6f 92       	push	r6
  ba:	7f 92       	push	r7
  bc:	8f 92       	push	r8
  be:	9f 92       	push	r9
  c0:	af 92       	push	r10
  c2:	bf 92       	push	r11
  c4:	cf 92       	push	r12
  c6:	df 92       	push	r13
  c8:	ef 92       	push	r14
  ca:	ff 92       	push	r15
  cc:	0f 93       	push	r16
  ce:	1f 93       	push	r17
  d0:	cf 93       	push	r28
  d2:	df 93       	push	r29
	/* Setup timer */
	cli(); // Disable global interrupts.
  d4:	f8 94       	cli
	PORTA = 7; // Enable pull-ups on buttons.
  d6:	87 e0       	ldi	r24, 0x07	; 7
  d8:	8b bb       	out	0x1b, r24	; 27
	DDRA = 8; // Enable an output on the 4th pin, for shortswitch.
  da:	88 e0       	ldi	r24, 0x08	; 8
  dc:	8a bb       	out	0x1a, r24	; 26
	
	// Prescale the clock by 256 and set clear on compare match.
	TCCR1B = (1<<WGM12)|(1<<CS12); 
  de:	8c e0       	ldi	r24, 0x0C	; 12
  e0:	8e bd       	out	0x2e, r24	; 46
	
	// Retreive calibration value from EEPROM
	calibbytes = eeprom_read_word(&timcal);
  e2:	80 e0       	ldi	r24, 0x00	; 0
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	0e 94 db 01 	call	0x3b6	; 0x3b6 <__eerd_word_m16>
  ea:	80 93 62 00 	sts	0x0062, r24
  ee:	90 93 63 00 	sts	0x0063, r25
	
	// Set the compare trigger value.
	OCR1AH = (unsigned int)(calibbytes >> 8);
  f2:	9b bd       	out	0x2b, r25	; 43
	OCR1AL = (unsigned int)calibbytes;
  f4:	8a bd       	out	0x2a, r24	; 42
	
	TIMSK = (1<<OCIE1A); // Enable compare match interrupt.
  f6:	80 e1       	ldi	r24, 0x10	; 16
  f8:	89 bf       	out	0x39, r24	; 57

	/* Setup display */
	// Ports C & D are the outs.
	DDRC = 0xff;
  fa:	8f ef       	ldi	r24, 0xFF	; 255
  fc:	84 bb       	out	0x14, r24	; 20
	DDRD = 0xff;
  fe:	81 bb       	out	0x11, r24	; 17
	
	// Make sure they're all off to start.
	PORTC = 0xFF;
 100:	85 bb       	out	0x15, r24	; 21
	PORTD = 0x00;
 102:	12 ba       	out	0x12, r1	; 18
	
	if(bit_is_clear(PINA,PA0)) // Enable display test if 'hours' button is held on powerup.
 104:	c8 99       	sbic	0x19, 0	; 25
 106:	09 c0       	rjmp	.+18     	; 0x11a <main+0x6a>
 108:	88 e8       	ldi	r24, 0x88	; 136
 10a:	93 e1       	ldi	r25, 0x13	; 19
 10c:	28 ec       	ldi	r18, 0xC8	; 200
 10e:	30 e0       	ldi	r19, 0x00	; 0
 110:	f9 01       	movw	r30, r18
 112:	31 97       	sbiw	r30, 0x01	; 1
 114:	f1 f7       	brne	.-4      	; 0x112 <main+0x62>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 116:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 118:	d9 f7       	brne	.-10     	; 0x110 <main+0x60>
		_delay_ms(500);
	PORTC = 0x00;
 11a:	15 ba       	out	0x15, r1	; 21
	
	sei(); // Enable global interrupts.
 11c:	78 94       	sei
 11e:	c8 ee       	ldi	r28, 0xE8	; 232
 120:	d3 e0       	ldi	r29, 0x03	; 3
			PORTD = ~cb;
			PORTC = (1<<PC1);
			delay();
		
			PORTD = ~cc;
			PORTC = (1<<PC3);
 122:	68 e0       	ldi	r22, 0x08	; 8
 124:	26 2e       	mov	r2, r22
			delay();
			
			PORTD = ~cd;
			PORTC = (1<<PC4);
 126:	50 e1       	ldi	r21, 0x10	; 16
 128:	35 2e       	mov	r3, r21
			delay();
		
			PORTD = ~ce;
			PORTC = (1<<PC6);
 12a:	40 e4       	ldi	r20, 0x40	; 64
 12c:	44 2e       	mov	r4, r20
			delay();
		
			PORTD = ~cf;
			PORTC = (1<<PC7);
 12e:	30 e8       	ldi	r19, 0x80	; 128
 130:	53 2e       	mov	r5, r19
			// The whole top row is lit to signal calibration mode.
			uint8_t row5 = 0xff;
			
			// Draw the display (row by row instead of col by col).
			PORTC = row1;
			PORTD = ~(1<<PD0);
 132:	2e ef       	ldi	r18, 0xFE	; 254
 134:	62 2e       	mov	r6, r18
			delay();
			delay(); // The double delays are intentional.
			
			PORTC = row2;
			PORTD = ~(1<<PD1);
 136:	9d ef       	ldi	r25, 0xFD	; 253
 138:	79 2e       	mov	r7, r25
			delay();
			delay();
			
			PORTC = row5;
 13a:	88 24       	eor	r8, r8
 13c:	8a 94       	dec	r8
			PORTD = ~(1<<PD4);
 13e:	8f ee       	ldi	r24, 0xEF	; 239
 140:	98 2e       	mov	r9, r24
	
	sei(); // Enable global interrupts.

	while(1) // LED driving.
	{
		if(bit_is_set(PINA,PA2)) // If we're running like normal.
 142:	ca 9b       	sbis	0x19, 2	; 25
 144:	4f c0       	rjmp	.+158    	; 0x1e4 <main+0x134>
		{
			// Get all the column values
			int ca = sec % 10;
 146:	00 91 64 00 	lds	r16, 0x0064
 14a:	10 91 65 00 	lds	r17, 0x0065
			int cb = tens(sec);
 14e:	c8 01       	movw	r24, r16
 150:	0e 94 49 00 	call	0x92	; 0x92 <tens>
 154:	f8 2e       	mov	r15, r24
			int cc = min % 10;
 156:	c0 90 66 00 	lds	r12, 0x0066
 15a:	d0 90 67 00 	lds	r13, 0x0067
			int cd = tens(min);
 15e:	c6 01       	movw	r24, r12
 160:	0e 94 49 00 	call	0x92	; 0x92 <tens>
 164:	e8 2e       	mov	r14, r24
			int ce = hur % 10;
 166:	a0 90 60 00 	lds	r10, 0x0060
 16a:	b0 90 61 00 	lds	r11, 0x0061
			int cf = tens(hur);
 16e:	c5 01       	movw	r24, r10
 170:	0e 94 49 00 	call	0x92	; 0x92 <tens>
 174:	28 2f       	mov	r18, r24
		
			PORTD = ~ca;
 176:	c8 01       	movw	r24, r16
 178:	6a e0       	ldi	r22, 0x0A	; 10
 17a:	70 e0       	ldi	r23, 0x00	; 0
 17c:	0e 94 c7 01 	call	0x38e	; 0x38e <__udivmodhi4>
 180:	80 95       	com	r24
 182:	82 bb       	out	0x12, r24	; 18
			PORTC = (1<<PC0);
 184:	81 e0       	ldi	r24, 0x01	; 1
 186:	85 bb       	out	0x15, r24	; 21
 188:	ce 01       	movw	r24, r28
 18a:	01 97       	sbiw	r24, 0x01	; 1
 18c:	f1 f7       	brne	.-4      	; 0x18a <main+0xda>
			delay();
		
			PORTD = ~cb;
 18e:	f0 94       	com	r15
 190:	f2 ba       	out	0x12, r15	; 18
			PORTC = (1<<PC1);
 192:	82 e0       	ldi	r24, 0x02	; 2
 194:	85 bb       	out	0x15, r24	; 21
 196:	ce 01       	movw	r24, r28
 198:	01 97       	sbiw	r24, 0x01	; 1
 19a:	f1 f7       	brne	.-4      	; 0x198 <main+0xe8>
			delay();
		
			PORTD = ~cc;
 19c:	c6 01       	movw	r24, r12
 19e:	6a e0       	ldi	r22, 0x0A	; 10
 1a0:	70 e0       	ldi	r23, 0x00	; 0
 1a2:	0e 94 c7 01 	call	0x38e	; 0x38e <__udivmodhi4>
 1a6:	80 95       	com	r24
 1a8:	82 bb       	out	0x12, r24	; 18
			PORTC = (1<<PC3);
 1aa:	25 ba       	out	0x15, r2	; 21
 1ac:	ce 01       	movw	r24, r28
 1ae:	01 97       	sbiw	r24, 0x01	; 1
 1b0:	f1 f7       	brne	.-4      	; 0x1ae <main+0xfe>
			delay();
			
			PORTD = ~cd;
 1b2:	e0 94       	com	r14
 1b4:	e2 ba       	out	0x12, r14	; 18
			PORTC = (1<<PC4);
 1b6:	35 ba       	out	0x15, r3	; 21
 1b8:	ce 01       	movw	r24, r28
 1ba:	01 97       	sbiw	r24, 0x01	; 1
 1bc:	f1 f7       	brne	.-4      	; 0x1ba <main+0x10a>
			delay();
		
			PORTD = ~ce;
 1be:	c5 01       	movw	r24, r10
 1c0:	6a e0       	ldi	r22, 0x0A	; 10
 1c2:	70 e0       	ldi	r23, 0x00	; 0
 1c4:	0e 94 c7 01 	call	0x38e	; 0x38e <__udivmodhi4>
 1c8:	80 95       	com	r24
 1ca:	82 bb       	out	0x12, r24	; 18
			PORTC = (1<<PC6);
 1cc:	45 ba       	out	0x15, r4	; 21
 1ce:	ce 01       	movw	r24, r28
 1d0:	01 97       	sbiw	r24, 0x01	; 1
 1d2:	f1 f7       	brne	.-4      	; 0x1d0 <main+0x120>
			delay();
		
			PORTD = ~cf;
 1d4:	20 95       	com	r18
 1d6:	22 bb       	out	0x12, r18	; 18
			PORTC = (1<<PC7);
 1d8:	55 ba       	out	0x15, r5	; 21
 1da:	ce 01       	movw	r24, r28
 1dc:	01 97       	sbiw	r24, 0x01	; 1
 1de:	f1 f7       	brne	.-4      	; 0x1dc <main+0x12c>
			delay();
		
			PORTC = 0;
 1e0:	15 ba       	out	0x15, r1	; 21
 1e2:	af cf       	rjmp	.-162    	; 0x142 <main+0x92>
		}
		else // Otherwise, we're in calibration mode.
		{
			// Get the two rows of calibration bytes. 
			calibbytes = eeprom_read_word(&timcal);
 1e4:	80 e0       	ldi	r24, 0x00	; 0
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	0e 94 db 01 	call	0x3b6	; 0x3b6 <__eerd_word_m16>
 1ec:	80 93 62 00 	sts	0x0062, r24
 1f0:	90 93 63 00 	sts	0x0063, r25
			
			// The whole top row is lit to signal calibration mode.
			uint8_t row5 = 0xff;
			
			// Draw the display (row by row instead of col by col).
			PORTC = row1;
 1f4:	85 bb       	out	0x15, r24	; 21
			PORTD = ~(1<<PD0);
 1f6:	62 ba       	out	0x12, r6	; 18
 1f8:	fe 01       	movw	r30, r28
 1fa:	31 97       	sbiw	r30, 0x01	; 1
 1fc:	f1 f7       	brne	.-4      	; 0x1fa <main+0x14a>
			delay();
			delay(); // The double delays are intentional.
			
			PORTC = row2;
 1fe:	fe 01       	movw	r30, r28
 200:	31 97       	sbiw	r30, 0x01	; 1
 202:	f1 f7       	brne	.-4      	; 0x200 <main+0x150>
 204:	95 bb       	out	0x15, r25	; 21
			PORTD = ~(1<<PD1);
 206:	72 ba       	out	0x12, r7	; 18
 208:	ce 01       	movw	r24, r28
 20a:	01 97       	sbiw	r24, 0x01	; 1
 20c:	f1 f7       	brne	.-4      	; 0x20a <main+0x15a>
			delay();
			delay();
			
			PORTC = row5;
 20e:	ce 01       	movw	r24, r28
 210:	01 97       	sbiw	r24, 0x01	; 1
 212:	f1 f7       	brne	.-4      	; 0x210 <main+0x160>
 214:	85 ba       	out	0x15, r8	; 21
			PORTD = ~(1<<PD4);
 216:	92 ba       	out	0x12, r9	; 18
 218:	ce 01       	movw	r24, r28
 21a:	01 97       	sbiw	r24, 0x01	; 1
 21c:	f1 f7       	brne	.-4      	; 0x21a <main+0x16a>
			delay();
			delay();
			
			PORTC = 0;
 21e:	ce 01       	movw	r24, r28
 220:	01 97       	sbiw	r24, 0x01	; 1
 222:	f1 f7       	brne	.-4      	; 0x220 <main+0x170>
 224:	15 ba       	out	0x15, r1	; 21
			PORTD = 0;
 226:	12 ba       	out	0x12, r1	; 18
 228:	8c cf       	rjmp	.-232    	; 0x142 <main+0x92>

0000022a <__vector_6>:
unsigned int hur = 12;

uint16_t calibbytes = TIMERTRIG; 

ISR(TIMER1_COMPA_vect) // Interrupt triggered on timer.
{
 22a:	1f 92       	push	r1
 22c:	0f 92       	push	r0
 22e:	0f b6       	in	r0, 0x3f	; 63
 230:	0f 92       	push	r0
 232:	11 24       	eor	r1, r1
 234:	2f 93       	push	r18
 236:	3f 93       	push	r19
 238:	4f 93       	push	r20
 23a:	5f 93       	push	r21
 23c:	6f 93       	push	r22
 23e:	7f 93       	push	r23
 240:	8f 93       	push	r24
 242:	9f 93       	push	r25
 244:	af 93       	push	r26
 246:	bf 93       	push	r27
 248:	ef 93       	push	r30
 24a:	ff 93       	push	r31
	sec++;
 24c:	80 91 64 00 	lds	r24, 0x0064
 250:	90 91 65 00 	lds	r25, 0x0065
 254:	01 96       	adiw	r24, 0x01	; 1
 256:	90 93 65 00 	sts	0x0065, r25
 25a:	80 93 64 00 	sts	0x0064, r24
	
	if(!bit_is_clear(PINA,PA2)){ // Normal button operation
 25e:	ca 9b       	sbis	0x19, 2	; 25
 260:	22 c0       	rjmp	.+68     	; 0x2a6 <__vector_6+0x7c>
	if(bit_is_clear(PINA,PA1) && bit_is_clear(PINA,PA0))
 262:	c9 99       	sbic	0x19, 1	; 25
 264:	08 c0       	rjmp	.+16     	; 0x276 <__vector_6+0x4c>
 266:	c8 99       	sbic	0x19, 0	; 25
 268:	06 c0       	rjmp	.+12     	; 0x276 <__vector_6+0x4c>
	{
		min += 10;
 26a:	80 91 66 00 	lds	r24, 0x0066
 26e:	90 91 67 00 	lds	r25, 0x0067
 272:	0a 96       	adiw	r24, 0x0a	; 10
 274:	07 c0       	rjmp	.+14     	; 0x284 <__vector_6+0x5a>
	} else if(bit_is_clear(PINA,PA1))
 276:	c9 99       	sbic	0x19, 1	; 25
 278:	0a c0       	rjmp	.+20     	; 0x28e <__vector_6+0x64>
	{
		min++;
 27a:	80 91 66 00 	lds	r24, 0x0066
 27e:	90 91 67 00 	lds	r25, 0x0067
 282:	01 96       	adiw	r24, 0x01	; 1
 284:	90 93 67 00 	sts	0x0067, r25
 288:	80 93 66 00 	sts	0x0066, r24
 28c:	3d c0       	rjmp	.+122    	; 0x308 <__vector_6+0xde>
	} else if(bit_is_clear(PINA,PA0))
 28e:	c8 99       	sbic	0x19, 0	; 25
 290:	3b c0       	rjmp	.+118    	; 0x308 <__vector_6+0xde>
	{
		hur++;
 292:	80 91 60 00 	lds	r24, 0x0060
 296:	90 91 61 00 	lds	r25, 0x0061
 29a:	01 96       	adiw	r24, 0x01	; 1
 29c:	90 93 61 00 	sts	0x0061, r25
 2a0:	80 93 60 00 	sts	0x0060, r24
 2a4:	31 c0       	rjmp	.+98     	; 0x308 <__vector_6+0xde>
	}
	} else { // Calibration button operation
		if(bit_is_clear(PINA,PA1))
 2a6:	c9 99       	sbic	0x19, 1	; 25
 2a8:	14 c0       	rjmp	.+40     	; 0x2d2 <__vector_6+0xa8>
		{
			// Subtract one from calib.
			calibbytes = eeprom_read_word(&timcal);
 2aa:	80 e0       	ldi	r24, 0x00	; 0
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	0e 94 db 01 	call	0x3b6	; 0x3b6 <__eerd_word_m16>
			calibbytes -= 1;
 2b2:	bc 01       	movw	r22, r24
 2b4:	61 50       	subi	r22, 0x01	; 1
 2b6:	70 40       	sbci	r23, 0x00	; 0
 2b8:	70 93 63 00 	sts	0x0063, r23
 2bc:	60 93 62 00 	sts	0x0062, r22
			eeprom_write_word(&timcal, calibbytes);
 2c0:	80 e0       	ldi	r24, 0x00	; 0
 2c2:	90 e0       	ldi	r25, 0x00	; 0
 2c4:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <__eewr_word_m16>
			calibbytes = eeprom_read_word(&timcal); // Just to be sure.
 2c8:	80 e0       	ldi	r24, 0x00	; 0
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	0e 94 db 01 	call	0x3b6	; 0x3b6 <__eerd_word_m16>
 2d0:	15 c0       	rjmp	.+42     	; 0x2fc <__vector_6+0xd2>
			
			// And actually write in the new value.
			OCR1AH = (unsigned int)(calibbytes >> 8);
			OCR1AL = (unsigned int)calibbytes;
		} else if(bit_is_clear(PINA,PA0))
 2d2:	c8 99       	sbic	0x19, 0	; 25
 2d4:	19 c0       	rjmp	.+50     	; 0x308 <__vector_6+0xde>
		{
			// Add one to calib.
			calibbytes = eeprom_read_word(&timcal);
 2d6:	80 e0       	ldi	r24, 0x00	; 0
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	0e 94 db 01 	call	0x3b6	; 0x3b6 <__eerd_word_m16>
			calibbytes += 1;
 2de:	bc 01       	movw	r22, r24
 2e0:	6f 5f       	subi	r22, 0xFF	; 255
 2e2:	7f 4f       	sbci	r23, 0xFF	; 255
 2e4:	70 93 63 00 	sts	0x0063, r23
 2e8:	60 93 62 00 	sts	0x0062, r22
			eeprom_write_word(&timcal, calibbytes);
 2ec:	80 e0       	ldi	r24, 0x00	; 0
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <__eewr_word_m16>
			calibbytes = eeprom_read_word(&timcal); // Just to be sure.
 2f4:	80 e0       	ldi	r24, 0x00	; 0
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	0e 94 db 01 	call	0x3b6	; 0x3b6 <__eerd_word_m16>
 2fc:	80 93 62 00 	sts	0x0062, r24
 300:	90 93 63 00 	sts	0x0063, r25
			
			// And actually write in the new value.
			OCR1AH = (unsigned int)(calibbytes >> 8);
 304:	9b bd       	out	0x2b, r25	; 43
			OCR1AL = (unsigned int)calibbytes;
 306:	8a bd       	out	0x2a, r24	; 42
		}
	}
	
	if(sec >= 60)
 308:	80 91 64 00 	lds	r24, 0x0064
 30c:	90 91 65 00 	lds	r25, 0x0065
 310:	cc 97       	sbiw	r24, 0x3c	; 60
 312:	68 f0       	brcs	.+26     	; 0x32e <__vector_6+0x104>
	{
		min++;
 314:	80 91 66 00 	lds	r24, 0x0066
 318:	90 91 67 00 	lds	r25, 0x0067
 31c:	01 96       	adiw	r24, 0x01	; 1
 31e:	90 93 67 00 	sts	0x0067, r25
 322:	80 93 66 00 	sts	0x0066, r24
		sec = 0;
 326:	10 92 65 00 	sts	0x0065, r1
 32a:	10 92 64 00 	sts	0x0064, r1
	}
	if(min >= 60)
 32e:	80 91 66 00 	lds	r24, 0x0066
 332:	90 91 67 00 	lds	r25, 0x0067
 336:	cc 97       	sbiw	r24, 0x3c	; 60
 338:	68 f0       	brcs	.+26     	; 0x354 <__vector_6+0x12a>
	{
		hur++;
 33a:	80 91 60 00 	lds	r24, 0x0060
 33e:	90 91 61 00 	lds	r25, 0x0061
 342:	01 96       	adiw	r24, 0x01	; 1
 344:	90 93 61 00 	sts	0x0061, r25
 348:	80 93 60 00 	sts	0x0060, r24
		min = 0;
 34c:	10 92 67 00 	sts	0x0067, r1
 350:	10 92 66 00 	sts	0x0066, r1
	}
	if(hur >= 13)
 354:	80 91 60 00 	lds	r24, 0x0060
 358:	90 91 61 00 	lds	r25, 0x0061
 35c:	0d 97       	sbiw	r24, 0x0d	; 13
 35e:	30 f0       	brcs	.+12     	; 0x36c <__vector_6+0x142>
		hur = 1;
 360:	81 e0       	ldi	r24, 0x01	; 1
 362:	90 e0       	ldi	r25, 0x00	; 0
 364:	90 93 61 00 	sts	0x0061, r25
 368:	80 93 60 00 	sts	0x0060, r24
}
 36c:	ff 91       	pop	r31
 36e:	ef 91       	pop	r30
 370:	bf 91       	pop	r27
 372:	af 91       	pop	r26
 374:	9f 91       	pop	r25
 376:	8f 91       	pop	r24
 378:	7f 91       	pop	r23
 37a:	6f 91       	pop	r22
 37c:	5f 91       	pop	r21
 37e:	4f 91       	pop	r20
 380:	3f 91       	pop	r19
 382:	2f 91       	pop	r18
 384:	0f 90       	pop	r0
 386:	0f be       	out	0x3f, r0	; 63
 388:	0f 90       	pop	r0
 38a:	1f 90       	pop	r1
 38c:	18 95       	reti

0000038e <__udivmodhi4>:
 38e:	aa 1b       	sub	r26, r26
 390:	bb 1b       	sub	r27, r27
 392:	51 e1       	ldi	r21, 0x11	; 17
 394:	07 c0       	rjmp	.+14     	; 0x3a4 <__udivmodhi4_ep>

00000396 <__udivmodhi4_loop>:
 396:	aa 1f       	adc	r26, r26
 398:	bb 1f       	adc	r27, r27
 39a:	a6 17       	cp	r26, r22
 39c:	b7 07       	cpc	r27, r23
 39e:	10 f0       	brcs	.+4      	; 0x3a4 <__udivmodhi4_ep>
 3a0:	a6 1b       	sub	r26, r22
 3a2:	b7 0b       	sbc	r27, r23

000003a4 <__udivmodhi4_ep>:
 3a4:	88 1f       	adc	r24, r24
 3a6:	99 1f       	adc	r25, r25
 3a8:	5a 95       	dec	r21
 3aa:	a9 f7       	brne	.-22     	; 0x396 <__udivmodhi4_loop>
 3ac:	80 95       	com	r24
 3ae:	90 95       	com	r25
 3b0:	bc 01       	movw	r22, r24
 3b2:	cd 01       	movw	r24, r26
 3b4:	08 95       	ret

000003b6 <__eerd_word_m16>:
 3b6:	a8 e1       	ldi	r26, 0x18	; 24
 3b8:	b0 e0       	ldi	r27, 0x00	; 0
 3ba:	42 e0       	ldi	r20, 0x02	; 2
 3bc:	50 e0       	ldi	r21, 0x00	; 0
 3be:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__eerd_blraw_m16>

000003c2 <__eewr_word_m16>:
 3c2:	0e 94 f6 01 	call	0x3ec	; 0x3ec <__eewr_byte_m16>
 3c6:	27 2f       	mov	r18, r23
 3c8:	0c 94 f7 01 	jmp	0x3ee	; 0x3ee <__eewr_r18_m16>

000003cc <__eerd_block_m16>:
 3cc:	dc 01       	movw	r26, r24
 3ce:	cb 01       	movw	r24, r22

000003d0 <__eerd_blraw_m16>:
 3d0:	fc 01       	movw	r30, r24
 3d2:	e1 99       	sbic	0x1c, 1	; 28
 3d4:	fe cf       	rjmp	.-4      	; 0x3d2 <__eerd_blraw_m16+0x2>
 3d6:	06 c0       	rjmp	.+12     	; 0x3e4 <__eerd_blraw_m16+0x14>
 3d8:	ff bb       	out	0x1f, r31	; 31
 3da:	ee bb       	out	0x1e, r30	; 30
 3dc:	e0 9a       	sbi	0x1c, 0	; 28
 3de:	31 96       	adiw	r30, 0x01	; 1
 3e0:	0d b2       	in	r0, 0x1d	; 29
 3e2:	0d 92       	st	X+, r0
 3e4:	41 50       	subi	r20, 0x01	; 1
 3e6:	50 40       	sbci	r21, 0x00	; 0
 3e8:	b8 f7       	brcc	.-18     	; 0x3d8 <__eerd_blraw_m16+0x8>
 3ea:	08 95       	ret

000003ec <__eewr_byte_m16>:
 3ec:	26 2f       	mov	r18, r22

000003ee <__eewr_r18_m16>:
 3ee:	e1 99       	sbic	0x1c, 1	; 28
 3f0:	fe cf       	rjmp	.-4      	; 0x3ee <__eewr_r18_m16>
 3f2:	9f bb       	out	0x1f, r25	; 31
 3f4:	8e bb       	out	0x1e, r24	; 30
 3f6:	2d bb       	out	0x1d, r18	; 29
 3f8:	0f b6       	in	r0, 0x3f	; 63
 3fa:	f8 94       	cli
 3fc:	e2 9a       	sbi	0x1c, 2	; 28
 3fe:	e1 9a       	sbi	0x1c, 1	; 28
 400:	0f be       	out	0x3f, r0	; 63
 402:	01 96       	adiw	r24, 0x01	; 1
 404:	08 95       	ret

00000406 <_exit>:
 406:	f8 94       	cli

00000408 <__stop_program>:
 408:	ff cf       	rjmp	.-2      	; 0x408 <__stop_program>
