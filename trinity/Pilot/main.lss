
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  000005f6  0000068a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005f6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002a  00800104  00800104  0000068e  2**0
                  ALLOC
  3 .stab         000019ec  00000000  00000000  00000690  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000c22  00000000  00000000  0000207c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_11>
  30:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__vector_12>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__vector_24>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 ef       	ldi	r30, 0xF6	; 246
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 30       	cpi	r26, 0x04	; 4
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	a4 e0       	ldi	r26, 0x04	; 4
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ae 32       	cpi	r26, 0x2E	; 46
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 b9 02 	call	0x572	; 0x572 <main>
  9e:	0c 94 f9 02 	jmp	0x5f2	; 0x5f2 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_11>:
extern uint16_t battMon[4];


/// Interupt Service Routines ///
ISR(TIMER1_COMPA_vect)
{
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	8f 93       	push	r24
  b2:	9f 93       	push	r25
	if(!OCR1A) // We're at zero.
  b4:	80 91 88 00 	lds	r24, 0x0088
  b8:	90 91 89 00 	lds	r25, 0x0089
  bc:	00 97       	sbiw	r24, 0x00	; 0
  be:	81 f4       	brne	.+32     	; 0xe0 <__vector_11+0x3a>
	{
		PWM_PORT |= (1<<PWM_PIN1); // Set PWM to one.
  c0:	28 9a       	sbi	0x05, 0	; 5
		if(servoPos1) OCR1A = servoPos1;
  c2:	80 91 02 01 	lds	r24, 0x0102
  c6:	90 91 03 01 	lds	r25, 0x0103
  ca:	00 97       	sbiw	r24, 0x00	; 0
  cc:	29 f0       	breq	.+10     	; 0xd8 <__vector_11+0x32>
  ce:	90 93 89 00 	sts	0x0089, r25
  d2:	80 93 88 00 	sts	0x0088, r24
  d6:	09 c0       	rjmp	.+18     	; 0xea <__vector_11+0x44>
		else globalError = 1;
  d8:	81 e0       	ldi	r24, 0x01	; 1
  da:	80 93 0c 01 	sts	0x010C, r24
  de:	05 c0       	rjmp	.+10     	; 0xea <__vector_11+0x44>
	}
	else // We're at the point.
	{
		PWM_PORT &= ~(1<<PWM_PIN1); // Set PWM to zero.
  e0:	28 98       	cbi	0x05, 0	; 5
		OCR1A = 0; // Trigger at rollover.
  e2:	10 92 89 00 	sts	0x0089, r1
  e6:	10 92 88 00 	sts	0x0088, r1
	}
}
  ea:	9f 91       	pop	r25
  ec:	8f 91       	pop	r24
  ee:	0f 90       	pop	r0
  f0:	0f be       	out	0x3f, r0	; 63
  f2:	0f 90       	pop	r0
  f4:	1f 90       	pop	r1
  f6:	18 95       	reti

000000f8 <__vector_12>:

ISR(TIMER1_COMPB_vect)
{
  f8:	1f 92       	push	r1
  fa:	0f 92       	push	r0
  fc:	0f b6       	in	r0, 0x3f	; 63
  fe:	0f 92       	push	r0
 100:	11 24       	eor	r1, r1
 102:	8f 93       	push	r24
 104:	9f 93       	push	r25
	if(!OCR1B) // We're at zero.
 106:	80 91 8a 00 	lds	r24, 0x008A
 10a:	90 91 8b 00 	lds	r25, 0x008B
 10e:	00 97       	sbiw	r24, 0x00	; 0
 110:	81 f4       	brne	.+32     	; 0x132 <__vector_12+0x3a>
	{
		PWM_PORT |= (1<<PWM_PIN2); // Set PWM to one.
 112:	29 9a       	sbi	0x05, 1	; 5
		if(servoPos2) OCR1B = servoPos2;
 114:	80 91 00 01 	lds	r24, 0x0100
 118:	90 91 01 01 	lds	r25, 0x0101
 11c:	00 97       	sbiw	r24, 0x00	; 0
 11e:	29 f0       	breq	.+10     	; 0x12a <__vector_12+0x32>
 120:	90 93 8b 00 	sts	0x008B, r25
 124:	80 93 8a 00 	sts	0x008A, r24
 128:	09 c0       	rjmp	.+18     	; 0x13c <__vector_12+0x44>
		else globalError = 1;
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	80 93 0c 01 	sts	0x010C, r24
 130:	05 c0       	rjmp	.+10     	; 0x13c <__vector_12+0x44>
	}
	else // We're at the point.
	{
		PWM_PORT &= ~(1<<PWM_PIN2); // Set PWM to zero.
 132:	29 98       	cbi	0x05, 1	; 5
		OCR1B = 0; // Trigger at rollover.
 134:	10 92 8b 00 	sts	0x008B, r1
 138:	10 92 8a 00 	sts	0x008A, r1
	}
}
 13c:	9f 91       	pop	r25
 13e:	8f 91       	pop	r24
 140:	0f 90       	pop	r0
 142:	0f be       	out	0x3f, r0	; 63
 144:	0f 90       	pop	r0
 146:	1f 90       	pop	r1
 148:	18 95       	reti

0000014a <__vector_24>:

ISR(TWI_vect)
{
 14a:	1f 92       	push	r1
 14c:	0f 92       	push	r0
 14e:	0f b6       	in	r0, 0x3f	; 63
 150:	0f 92       	push	r0
 152:	11 24       	eor	r1, r1
 154:	2f 93       	push	r18
 156:	3f 93       	push	r19
 158:	4f 93       	push	r20
 15a:	5f 93       	push	r21
 15c:	6f 93       	push	r22
 15e:	7f 93       	push	r23
 160:	8f 93       	push	r24
 162:	9f 93       	push	r25
 164:	af 93       	push	r26
 166:	bf 93       	push	r27
 168:	ef 93       	push	r30
 16a:	ff 93       	push	r31
	//servoPos2 += 10;
	uint8_t status = TW_STATUS; // Get status register.
 16c:	80 91 b9 00 	lds	r24, 0x00B9
 170:	88 7f       	andi	r24, 0xF8	; 248
	
	/// RX ///
	if(status == TW_SR_SLA_ACK) // SLA+W received, ACK response sent.
 172:	80 36       	cpi	r24, 0x60	; 96
 174:	19 f1       	breq	.+70     	; 0x1bc <__vector_24+0x72>
	{
		TWCR |= (1<<TWEA); // Read and ACK the next byte.
	}
	else if(status == TW_SR_DATA_ACK) // Data from SLA+W received, ACK'd.
 176:	80 38       	cpi	r24, 0x80	; 128
 178:	29 f4       	brne	.+10     	; 0x184 <__vector_24+0x3a>
	{
		rxDataHandler(TWDR); // Handle the received data.
 17a:	80 91 bb 00 	lds	r24, 0x00BB
 17e:	0e 94 2b 01 	call	0x256	; 0x256 <rxDataHandler>
 182:	21 c0       	rjmp	.+66     	; 0x1c6 <__vector_24+0x7c>
	}
	else if(status == TW_SR_STOP)
 184:	80 3a       	cpi	r24, 0xA0	; 160
 186:	41 f4       	brne	.+16     	; 0x198 <__vector_24+0x4e>
	{
		//servoPos2 = 180;
		TWCR |= (1<<TWEA); // ACK it.
 188:	80 91 bc 00 	lds	r24, 0x00BC
 18c:	80 64       	ori	r24, 0x40	; 64
 18e:	80 93 bc 00 	sts	0x00BC, r24
		i2cMode = 0;
 192:	10 92 0b 01 	sts	0x010B, r1
 196:	17 c0       	rjmp	.+46     	; 0x1c6 <__vector_24+0x7c>
		// And we're done.
	}
	
	/// TX ///
	else if(status == TW_ST_SLA_ACK) // SLA+R received, ACK'd.
 198:	88 3a       	cpi	r24, 0xA8	; 168
 19a:	19 f4       	brne	.+6      	; 0x1a2 <__vector_24+0x58>
	{
		bytesCount = 0;
 19c:	10 92 08 01 	sts	0x0108, r1
 1a0:	02 c0       	rjmp	.+4      	; 0x1a6 <__vector_24+0x5c>
		txDataHandler(); // This auto-fills TWDR.
	}
	else if(status == TW_ST_DATA_ACK) // Data ACK'd.
 1a2:	88 3b       	cpi	r24, 0xB8	; 184
 1a4:	19 f4       	brne	.+6      	; 0x1ac <__vector_24+0x62>
	{
		txDataHandler();
 1a6:	0e 94 5e 01 	call	0x2bc	; 0x2bc <txDataHandler>
 1aa:	0d c0       	rjmp	.+26     	; 0x1c6 <__vector_24+0x7c>
	}
	else if(status == TW_ST_LAST_DATA || status == TW_ST_DATA_NACK) // Data NACK'd or last byte ACK'd.
 1ac:	88 3c       	cpi	r24, 0xC8	; 200
 1ae:	11 f0       	breq	.+4      	; 0x1b4 <__vector_24+0x6a>
 1b0:	80 3c       	cpi	r24, 0xC0	; 192
 1b2:	49 f4       	brne	.+18     	; 0x1c6 <__vector_24+0x7c>
	{
		i2cMode = 0;
 1b4:	10 92 0b 01 	sts	0x010B, r1
		bytesCount = 0;
 1b8:	10 92 08 01 	sts	0x0108, r1
		TWCR |= (1<<TWEA);
 1bc:	80 91 bc 00 	lds	r24, 0x00BC
 1c0:	80 64       	ori	r24, 0x40	; 64
 1c2:	80 93 bc 00 	sts	0x00BC, r24
	}
	
	TWCR |= (1<<TWINT)|(1<<TWIE); // Clear the interrupt flag (seriously), allowing the TWI to continue.
 1c6:	80 91 bc 00 	lds	r24, 0x00BC
 1ca:	81 68       	ori	r24, 0x81	; 129
 1cc:	80 93 bc 00 	sts	0x00BC, r24
}
 1d0:	ff 91       	pop	r31
 1d2:	ef 91       	pop	r30
 1d4:	bf 91       	pop	r27
 1d6:	af 91       	pop	r26
 1d8:	9f 91       	pop	r25
 1da:	8f 91       	pop	r24
 1dc:	7f 91       	pop	r23
 1de:	6f 91       	pop	r22
 1e0:	5f 91       	pop	r21
 1e2:	4f 91       	pop	r20
 1e4:	3f 91       	pop	r19
 1e6:	2f 91       	pop	r18
 1e8:	0f 90       	pop	r0
 1ea:	0f be       	out	0x3f, r0	; 63
 1ec:	0f 90       	pop	r0
 1ee:	1f 90       	pop	r1
 1f0:	18 95       	reti

000001f2 <delay_us>:
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 1f2:	32 e0       	ldi	r19, 0x02	; 2
uint8_t bytesCount = 0;


void delay_us(uint16_t delah)
{
	while(delah)
 1f4:	04 c0       	rjmp	.+8      	; 0x1fe <delay_us+0xc>
 1f6:	23 2f       	mov	r18, r19
 1f8:	2a 95       	dec	r18
 1fa:	f1 f7       	brne	.-4      	; 0x1f8 <delay_us+0x6>
	{
		_delay_us(1);
		delah--;
 1fc:	01 97       	sbiw	r24, 0x01	; 1
uint8_t bytesCount = 0;


void delay_us(uint16_t delah)
{
	while(delah)
 1fe:	00 97       	sbiw	r24, 0x00	; 0
 200:	d1 f7       	brne	.-12     	; 0x1f6 <delay_us+0x4>
	{
		_delay_us(1);
		delah--;
	}
}
 202:	08 95       	ret

00000204 <delay_ms>:
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 204:	20 ed       	ldi	r18, 0xD0	; 208
 206:	37 e0       	ldi	r19, 0x07	; 7

void delay_ms(uint16_t delah)
{
	while(delah)
 208:	04 c0       	rjmp	.+8      	; 0x212 <delay_ms+0xe>
 20a:	f9 01       	movw	r30, r18
 20c:	31 97       	sbiw	r30, 0x01	; 1
 20e:	f1 f7       	brne	.-4      	; 0x20c <delay_ms+0x8>
	{
		_delay_ms(1);
		delah--;
 210:	01 97       	sbiw	r24, 0x01	; 1
	}
}

void delay_ms(uint16_t delah)
{
	while(delah)
 212:	00 97       	sbiw	r24, 0x00	; 0
 214:	d1 f7       	brne	.-12     	; 0x20a <delay_ms+0x6>
	{
		_delay_ms(1);
		delah--;
	}
}
 216:	08 95       	ret

00000218 <setServo>:
void setServo(uint8_t servo, uint8_t position) // 1 = tilt head, 2 = CO2 actuator.
{
	//float temp = (float)position;
	//temp *= 0.79431372549;
	//temp += 80.0;
	if(servo == 1)
 218:	81 30       	cpi	r24, 0x01	; 1
 21a:	29 f4       	brne	.+10     	; 0x226 <setServo+0xe>
	{
		//servoPos1 = (int)temp;
		servoPos1 = position;
 21c:	60 93 02 01 	sts	0x0102, r22
 220:	10 92 03 01 	sts	0x0103, r1
 224:	08 95       	ret
	}
	else if(servo == 2)
 226:	82 30       	cpi	r24, 0x02	; 2
 228:	21 f4       	brne	.+8      	; 0x232 <setServo+0x1a>
	{
		//servoPos2 = (int)temp;
		servoPos2 = position;
 22a:	60 93 00 01 	sts	0x0100, r22
 22e:	10 92 01 01 	sts	0x0101, r1
 232:	08 95       	ret

00000234 <co2Burst>:
	}
}

void co2Burst(void)
{
	servoPos2 = 215;
 234:	87 ed       	ldi	r24, 0xD7	; 215
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	90 93 01 01 	sts	0x0101, r25
 23c:	80 93 00 01 	sts	0x0100, r24
	delay_ms(1000);
 240:	88 ee       	ldi	r24, 0xE8	; 232
 242:	93 e0       	ldi	r25, 0x03	; 3
 244:	0e 94 02 01 	call	0x204	; 0x204 <delay_ms>
	servoPos2 = 110;
 248:	8e e6       	ldi	r24, 0x6E	; 110
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	90 93 01 01 	sts	0x0101, r25
 250:	80 93 00 01 	sts	0x0100, r24
}
 254:	08 95       	ret

00000256 <rxDataHandler>:

void rxDataHandler(uint8_t data)
{
 256:	68 2f       	mov	r22, r24
	if(i2cMode == 0)
 258:	80 91 0b 01 	lds	r24, 0x010B
 25c:	88 23       	and	r24, r24
 25e:	19 f4       	brne	.+6      	; 0x266 <rxDataHandler+0x10>
	{
		i2cMode = data;
 260:	60 93 0b 01 	sts	0x010B, r22
 264:	08 95       	ret
	}
	else
	{
		switch (i2cMode)
 266:	85 31       	cpi	r24, 0x15	; 21
 268:	b1 f0       	breq	.+44     	; 0x296 <rxDataHandler+0x40>
 26a:	86 31       	cpi	r24, 0x16	; 22
 26c:	28 f4       	brcc	.+10     	; 0x278 <rxDataHandler+0x22>
 26e:	81 30       	cpi	r24, 0x01	; 1
 270:	41 f0       	breq	.+16     	; 0x282 <rxDataHandler+0x2c>
 272:	89 30       	cpi	r24, 0x09	; 9
 274:	e9 f4       	brne	.+58     	; 0x2b0 <rxDataHandler+0x5a>
 276:	08 c0       	rjmp	.+16     	; 0x288 <rxDataHandler+0x32>
 278:	86 31       	cpi	r24, 0x16	; 22
 27a:	79 f0       	breq	.+30     	; 0x29a <rxDataHandler+0x44>
 27c:	8d 31       	cpi	r24, 0x1D	; 29
 27e:	c1 f4       	brne	.+48     	; 0x2b0 <rxDataHandler+0x5a>
 280:	10 c0       	rjmp	.+32     	; 0x2a2 <rxDataHandler+0x4c>
		{
			case 1: // System global mode.
				gStatus = data;
 282:	60 93 0a 01 	sts	0x010A, r22
 286:	02 c0       	rjmp	.+4      	; 0x28c <rxDataHandler+0x36>
				bytesCount = 0;
				i2cMode = 0;
				break;
			case 9: // Slave TX mode set.
				i2cTxMode = data;
 288:	60 93 09 01 	sts	0x0109, r22
				//servoPos1 = 120;
				bytesCount = 0;
 28c:	10 92 08 01 	sts	0x0108, r1
				i2cMode = 0;
 290:	10 92 0b 01 	sts	0x010B, r1
				break;
 294:	08 95       	ret
			case 21: // Set servo 1.
				setServo(1,data);
 296:	81 e0       	ldi	r24, 0x01	; 1
 298:	01 c0       	rjmp	.+2      	; 0x29c <rxDataHandler+0x46>
				i2cMode = 0; // And we're done with that.
				bytesCount = 0;
				break;
			case 22: // Set servo 2.
				setServo(2,data);
 29a:	82 e0       	ldi	r24, 0x02	; 2
 29c:	0e 94 0c 01 	call	0x218	; 0x218 <setServo>
 2a0:	02 c0       	rjmp	.+4      	; 0x2a6 <rxDataHandler+0x50>
				bytesCount = 0;
				break;
			case 29: // CO2 burst.
				//while(data)
				//{
					co2Burst();
 2a2:	0e 94 1a 01 	call	0x234	; 0x234 <co2Burst>
				//	data--;
				//}
				i2cMode = 0;
 2a6:	10 92 0b 01 	sts	0x010B, r1
				bytesCount = 0;
 2aa:	10 92 08 01 	sts	0x0108, r1
				break;
 2ae:	08 95       	ret
			default: // Unknown command
				i2cMode = 0;
 2b0:	10 92 0b 01 	sts	0x010B, r1
				globalError = 2;
 2b4:	82 e0       	ldi	r24, 0x02	; 2
 2b6:	80 93 0c 01 	sts	0x010C, r24
 2ba:	08 95       	ret

000002bc <txDataHandler>:

uint32_t holder = 0;

void txDataHandler(void) // Generates the data to be transmitted over i2c.
{
	switch (i2cTxMode)
 2bc:	80 91 09 01 	lds	r24, 0x0109
 2c0:	8a 35       	cpi	r24, 0x5A	; 90
 2c2:	09 f4       	brne	.+2      	; 0x2c6 <txDataHandler+0xa>
 2c4:	8b c0       	rjmp	.+278    	; 0x3dc <txDataHandler+0x120>
 2c6:	83 36       	cpi	r24, 0x63	; 99
 2c8:	09 f4       	brne	.+2      	; 0x2cc <txDataHandler+0x10>
 2ca:	d2 c0       	rjmp	.+420    	; 0x470 <txDataHandler+0x1b4>
 2cc:	8a 32       	cpi	r24, 0x2A	; 42
 2ce:	09 f0       	breq	.+2      	; 0x2d2 <txDataHandler+0x16>
 2d0:	cc c0       	rjmp	.+408    	; 0x46a <txDataHandler+0x1ae>
	{
		case 42: // IR array data
			switch (bytesCount)
 2d2:	80 91 08 01 	lds	r24, 0x0108
 2d6:	82 30       	cpi	r24, 0x02	; 2
 2d8:	79 f1       	breq	.+94     	; 0x338 <txDataHandler+0x7c>
 2da:	83 30       	cpi	r24, 0x03	; 3
 2dc:	30 f4       	brcc	.+12     	; 0x2ea <txDataHandler+0x2e>
 2de:	88 23       	and	r24, r24
 2e0:	61 f0       	breq	.+24     	; 0x2fa <txDataHandler+0x3e>
 2e2:	81 30       	cpi	r24, 0x01	; 1
 2e4:	09 f0       	breq	.+2      	; 0x2e8 <txDataHandler+0x2c>
 2e6:	74 c0       	rjmp	.+232    	; 0x3d0 <txDataHandler+0x114>
 2e8:	1d c0       	rjmp	.+58     	; 0x324 <txDataHandler+0x68>
 2ea:	84 30       	cpi	r24, 0x04	; 4
 2ec:	d1 f1       	breq	.+116    	; 0x362 <txDataHandler+0xa6>
 2ee:	84 30       	cpi	r24, 0x04	; 4
 2f0:	c8 f0       	brcs	.+50     	; 0x324 <txDataHandler+0x68>
 2f2:	85 30       	cpi	r24, 0x05	; 5
 2f4:	09 f0       	breq	.+2      	; 0x2f8 <txDataHandler+0x3c>
 2f6:	6c c0       	rjmp	.+216    	; 0x3d0 <txDataHandler+0x114>
 2f8:	60 c0       	rjmp	.+192    	; 0x3ba <txDataHandler+0xfe>
			{
				case 0:
					holder = (arcIR1[0] + arcIR1[1] + arcIR1[2] + arcIR1[3]);
 2fa:	80 91 10 01 	lds	r24, 0x0110
 2fe:	90 91 11 01 	lds	r25, 0x0111
 302:	20 91 0e 01 	lds	r18, 0x010E
 306:	30 91 0f 01 	lds	r19, 0x010F
 30a:	82 0f       	add	r24, r18
 30c:	93 1f       	adc	r25, r19
 30e:	20 91 12 01 	lds	r18, 0x0112
 312:	30 91 13 01 	lds	r19, 0x0113
 316:	82 0f       	add	r24, r18
 318:	93 1f       	adc	r25, r19
 31a:	20 91 14 01 	lds	r18, 0x0114
 31e:	30 91 15 01 	lds	r19, 0x0115
 322:	33 c0       	rjmp	.+102    	; 0x38a <txDataHandler+0xce>
					holder /= 4;
					TWDR = (uint8_t)(holder >> 8);
					TWCR |= (1<<TWEA);
					break;
				case 1:
					TWDR = (uint8_t)holder;
 324:	80 91 04 01 	lds	r24, 0x0104
 328:	80 93 bb 00 	sts	0x00BB, r24
					TWCR |= (1<<TWEA);
 32c:	80 91 bc 00 	lds	r24, 0x00BC
 330:	80 64       	ori	r24, 0x40	; 64
 332:	80 93 bc 00 	sts	0x00BC, r24
					break;
 336:	4c c0       	rjmp	.+152    	; 0x3d0 <txDataHandler+0x114>
				case 2:
					holder = (arcIR2[0] + arcIR2[1] + arcIR2[2] + arcIR2[3]);
 338:	80 91 20 01 	lds	r24, 0x0120
 33c:	90 91 21 01 	lds	r25, 0x0121
 340:	20 91 1e 01 	lds	r18, 0x011E
 344:	30 91 1f 01 	lds	r19, 0x011F
 348:	82 0f       	add	r24, r18
 34a:	93 1f       	adc	r25, r19
 34c:	20 91 22 01 	lds	r18, 0x0122
 350:	30 91 23 01 	lds	r19, 0x0123
 354:	82 0f       	add	r24, r18
 356:	93 1f       	adc	r25, r19
 358:	20 91 24 01 	lds	r18, 0x0124
 35c:	30 91 25 01 	lds	r19, 0x0125
 360:	14 c0       	rjmp	.+40     	; 0x38a <txDataHandler+0xce>
				case 3:
					TWDR = (uint8_t)holder;
					TWCR |= (1<<TWEA);
					break;
				case 4:
					holder = (arcIR3[0] + arcIR3[1] + arcIR3[2] + arcIR3[3]);
 362:	80 91 28 01 	lds	r24, 0x0128
 366:	90 91 29 01 	lds	r25, 0x0129
 36a:	20 91 26 01 	lds	r18, 0x0126
 36e:	30 91 27 01 	lds	r19, 0x0127
 372:	82 0f       	add	r24, r18
 374:	93 1f       	adc	r25, r19
 376:	20 91 2a 01 	lds	r18, 0x012A
 37a:	30 91 2b 01 	lds	r19, 0x012B
 37e:	82 0f       	add	r24, r18
 380:	93 1f       	adc	r25, r19
 382:	20 91 2c 01 	lds	r18, 0x012C
 386:	30 91 2d 01 	lds	r19, 0x012D
 38a:	82 0f       	add	r24, r18
 38c:	93 1f       	adc	r25, r19
 38e:	a0 e0       	ldi	r26, 0x00	; 0
 390:	b0 e0       	ldi	r27, 0x00	; 0
					holder /= 4;
 392:	52 e0       	ldi	r21, 0x02	; 2
 394:	b6 95       	lsr	r27
 396:	a7 95       	ror	r26
 398:	97 95       	ror	r25
 39a:	87 95       	ror	r24
 39c:	5a 95       	dec	r21
 39e:	d1 f7       	brne	.-12     	; 0x394 <txDataHandler+0xd8>
 3a0:	80 93 04 01 	sts	0x0104, r24
 3a4:	90 93 05 01 	sts	0x0105, r25
 3a8:	a0 93 06 01 	sts	0x0106, r26
 3ac:	b0 93 07 01 	sts	0x0107, r27
					TWDR = (uint8_t)(holder >> 8);
 3b0:	89 2f       	mov	r24, r25
 3b2:	9a 2f       	mov	r25, r26
 3b4:	ab 2f       	mov	r26, r27
 3b6:	bb 27       	eor	r27, r27
 3b8:	b7 cf       	rjmp	.-146    	; 0x328 <txDataHandler+0x6c>
					TWCR |= (1<<TWEA);
					break;
				case 5:
					TWDR = (uint8_t)holder;
 3ba:	80 91 04 01 	lds	r24, 0x0104
 3be:	80 93 bb 00 	sts	0x00BB, r24
					TWCR &= ~(1<<TWEA); // Last byte, expect NACK.
 3c2:	80 91 bc 00 	lds	r24, 0x00BC
 3c6:	8f 7b       	andi	r24, 0xBF	; 191
 3c8:	80 93 bc 00 	sts	0x00BC, r24
					i2cTxMode = 0; // And we're done.
 3cc:	10 92 09 01 	sts	0x0109, r1
					break;
			}
			bytesCount++;
 3d0:	80 91 08 01 	lds	r24, 0x0108
 3d4:	8f 5f       	subi	r24, 0xFF	; 255
 3d6:	80 93 08 01 	sts	0x0108, r24
			break;
 3da:	08 95       	ret
		case 90: // Battery voltage report.
			holder = (battMon[0] + battMon[1] + battMon[2] + battMon[3]);
 3dc:	80 91 18 01 	lds	r24, 0x0118
 3e0:	90 91 19 01 	lds	r25, 0x0119
 3e4:	20 91 16 01 	lds	r18, 0x0116
 3e8:	30 91 17 01 	lds	r19, 0x0117
 3ec:	82 0f       	add	r24, r18
 3ee:	93 1f       	adc	r25, r19
 3f0:	20 91 1a 01 	lds	r18, 0x011A
 3f4:	30 91 1b 01 	lds	r19, 0x011B
 3f8:	82 0f       	add	r24, r18
 3fa:	93 1f       	adc	r25, r19
 3fc:	20 91 1c 01 	lds	r18, 0x011C
 400:	30 91 1d 01 	lds	r19, 0x011D
 404:	82 0f       	add	r24, r18
 406:	93 1f       	adc	r25, r19
 408:	a0 e0       	ldi	r26, 0x00	; 0
 40a:	b0 e0       	ldi	r27, 0x00	; 0
			holder /= 4;
 40c:	42 e0       	ldi	r20, 0x02	; 2
 40e:	b6 95       	lsr	r27
 410:	a7 95       	ror	r26
 412:	97 95       	ror	r25
 414:	87 95       	ror	r24
 416:	4a 95       	dec	r20
 418:	d1 f7       	brne	.-12     	; 0x40e <txDataHandler+0x152>
 41a:	80 93 04 01 	sts	0x0104, r24
 41e:	90 93 05 01 	sts	0x0105, r25
 422:	a0 93 06 01 	sts	0x0106, r26
 426:	b0 93 07 01 	sts	0x0107, r27
			if(!bytesCount) 
 42a:	20 91 08 01 	lds	r18, 0x0108
 42e:	22 23       	and	r18, r18
 430:	79 f4       	brne	.+30     	; 0x450 <txDataHandler+0x194>
			{
				TWDR = (uint8_t)(holder >> 8);
 432:	89 2f       	mov	r24, r25
 434:	9a 2f       	mov	r25, r26
 436:	ab 2f       	mov	r26, r27
 438:	bb 27       	eor	r27, r27
 43a:	80 93 bb 00 	sts	0x00BB, r24
				bytesCount++;
 43e:	81 e0       	ldi	r24, 0x01	; 1
 440:	80 93 08 01 	sts	0x0108, r24
				TWCR |= (1<<TWEA);
 444:	80 91 bc 00 	lds	r24, 0x00BC
 448:	80 64       	ori	r24, 0x40	; 64
 44a:	80 93 bc 00 	sts	0x00BC, r24
 44e:	08 95       	ret
			}
			else 
			{
				TWDR = (uint8_t)holder;
 450:	80 93 bb 00 	sts	0x00BB, r24
				bytesCount++;
 454:	2f 5f       	subi	r18, 0xFF	; 255
 456:	20 93 08 01 	sts	0x0108, r18
				TWCR &= ~(1<<TWEA); // Last byte, expect NACK.
 45a:	80 91 bc 00 	lds	r24, 0x00BC
 45e:	8f 7b       	andi	r24, 0xBF	; 191
 460:	80 93 bc 00 	sts	0x00BC, r24
				i2cTxMode = 0;
 464:	10 92 09 01 	sts	0x0109, r1
 468:	08 95       	ret
			}
			break;
		case 99: // Send error condition, if any.
			break;
		default:
			globalError = 3;
 46a:	83 e0       	ldi	r24, 0x03	; 3
 46c:	80 93 0c 01 	sts	0x010C, r24
 470:	08 95       	ret

00000472 <adcInit>:

uint8_t arrayIndex = 0; // Which index in the arrays we're on.

void adcInit(void)
{
	ADMUX = ADC_MUX;
 472:	80 e4       	ldi	r24, 0x40	; 64
 474:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA = ADC_SRA; 
 478:	86 e8       	ldi	r24, 0x86	; 134
 47a:	80 93 7a 00 	sts	0x007A, r24
	DIDR0 = 0b00001111;
 47e:	8f e0       	ldi	r24, 0x0F	; 15
 480:	80 93 7e 00 	sts	0x007E, r24
	sei(); // Enable interrupts globally.
 484:	78 94       	sei
}
 486:	08 95       	ret

00000488 <analogGather>:
 488:	1f 93       	push	r17
 48a:	10 e0       	ldi	r17, 0x00	; 0
 48c:	80 91 7a 00 	lds	r24, 0x007A
 490:	80 64       	ori	r24, 0x40	; 64
 492:	80 93 7a 00 	sts	0x007A, r24
 496:	04 c0       	rjmp	.+8      	; 0x4a0 <analogGather+0x18>
 498:	81 e0       	ldi	r24, 0x01	; 1
 49a:	90 e0       	ldi	r25, 0x00	; 0
 49c:	0e 94 02 01 	call	0x204	; 0x204 <delay_ms>
 4a0:	80 91 7a 00 	lds	r24, 0x007A
 4a4:	84 ff       	sbrs	r24, 4
 4a6:	f8 cf       	rjmp	.-16     	; 0x498 <analogGather+0x10>
 4a8:	13 30       	cpi	r17, 0x03	; 3
 4aa:	f1 f0       	breq	.+60     	; 0x4e8 <analogGather+0x60>
 4ac:	14 30       	cpi	r17, 0x04	; 4
 4ae:	20 f4       	brcc	.+8      	; 0x4b8 <analogGather+0x30>
 4b0:	11 30       	cpi	r17, 0x01	; 1
 4b2:	09 f0       	breq	.+2      	; 0x4b6 <analogGather+0x2e>
 4b4:	4f c0       	rjmp	.+158    	; 0x554 <analogGather+0xcc>
 4b6:	06 c0       	rjmp	.+12     	; 0x4c4 <analogGather+0x3c>
 4b8:	15 30       	cpi	r17, 0x05	; 5
 4ba:	41 f1       	breq	.+80     	; 0x50c <analogGather+0x84>
 4bc:	17 30       	cpi	r17, 0x07	; 7
 4be:	09 f0       	breq	.+2      	; 0x4c2 <analogGather+0x3a>
 4c0:	49 c0       	rjmp	.+146    	; 0x554 <analogGather+0xcc>
 4c2:	36 c0       	rjmp	.+108    	; 0x530 <analogGather+0xa8>
 4c4:	80 91 78 00 	lds	r24, 0x0078
 4c8:	90 91 79 00 	lds	r25, 0x0079
 4cc:	e0 91 0d 01 	lds	r30, 0x010D
 4d0:	f0 e0       	ldi	r31, 0x00	; 0
 4d2:	ee 0f       	add	r30, r30
 4d4:	ff 1f       	adc	r31, r31
 4d6:	e2 5f       	subi	r30, 0xF2	; 242
 4d8:	fe 4f       	sbci	r31, 0xFE	; 254
 4da:	91 83       	std	Z+1, r25	; 0x01
 4dc:	80 83       	st	Z, r24
 4de:	80 91 7c 00 	lds	r24, 0x007C
 4e2:	80 7e       	andi	r24, 0xE0	; 224
 4e4:	81 60       	ori	r24, 0x01	; 1
 4e6:	34 c0       	rjmp	.+104    	; 0x550 <analogGather+0xc8>
 4e8:	80 91 78 00 	lds	r24, 0x0078
 4ec:	90 91 79 00 	lds	r25, 0x0079
 4f0:	e0 91 0d 01 	lds	r30, 0x010D
 4f4:	f0 e0       	ldi	r31, 0x00	; 0
 4f6:	ee 0f       	add	r30, r30
 4f8:	ff 1f       	adc	r31, r31
 4fa:	e2 5e       	subi	r30, 0xE2	; 226
 4fc:	fe 4f       	sbci	r31, 0xFE	; 254
 4fe:	91 83       	std	Z+1, r25	; 0x01
 500:	80 83       	st	Z, r24
 502:	80 91 7c 00 	lds	r24, 0x007C
 506:	80 7e       	andi	r24, 0xE0	; 224
 508:	82 60       	ori	r24, 0x02	; 2
 50a:	22 c0       	rjmp	.+68     	; 0x550 <analogGather+0xc8>
 50c:	80 91 78 00 	lds	r24, 0x0078
 510:	90 91 79 00 	lds	r25, 0x0079
 514:	e0 91 0d 01 	lds	r30, 0x010D
 518:	f0 e0       	ldi	r31, 0x00	; 0
 51a:	ee 0f       	add	r30, r30
 51c:	ff 1f       	adc	r31, r31
 51e:	ea 5d       	subi	r30, 0xDA	; 218
 520:	fe 4f       	sbci	r31, 0xFE	; 254
 522:	91 83       	std	Z+1, r25	; 0x01
 524:	80 83       	st	Z, r24
 526:	80 91 7c 00 	lds	r24, 0x007C
 52a:	80 7e       	andi	r24, 0xE0	; 224
 52c:	83 60       	ori	r24, 0x03	; 3
 52e:	10 c0       	rjmp	.+32     	; 0x550 <analogGather+0xc8>
 530:	80 91 78 00 	lds	r24, 0x0078
 534:	90 91 79 00 	lds	r25, 0x0079
 538:	e0 91 0d 01 	lds	r30, 0x010D
 53c:	f0 e0       	ldi	r31, 0x00	; 0
 53e:	ee 0f       	add	r30, r30
 540:	ff 1f       	adc	r31, r31
 542:	ea 5e       	subi	r30, 0xEA	; 234
 544:	fe 4f       	sbci	r31, 0xFE	; 254
 546:	91 83       	std	Z+1, r25	; 0x01
 548:	80 83       	st	Z, r24
 54a:	80 91 7c 00 	lds	r24, 0x007C
 54e:	80 7e       	andi	r24, 0xE0	; 224
 550:	80 93 7c 00 	sts	0x007C, r24
 554:	1f 5f       	subi	r17, 0xFF	; 255
 556:	18 30       	cpi	r17, 0x08	; 8
 558:	09 f0       	breq	.+2      	; 0x55c <analogGather+0xd4>
 55a:	98 cf       	rjmp	.-208    	; 0x48c <analogGather+0x4>
 55c:	80 91 0d 01 	lds	r24, 0x010D
 560:	8f 5f       	subi	r24, 0xFF	; 255
 562:	80 93 0d 01 	sts	0x010D, r24
 566:	84 30       	cpi	r24, 0x04	; 4
 568:	10 f0       	brcs	.+4      	; 0x56e <analogGather+0xe6>
 56a:	10 92 0d 01 	sts	0x010D, r1
 56e:	1f 91       	pop	r17
 570:	08 95       	ret

00000572 <main>:
 572:	83 e0       	ldi	r24, 0x03	; 3
 574:	84 b9       	out	0x04, r24	; 4
 576:	80 e7       	ldi	r24, 0x70	; 112
 578:	97 e1       	ldi	r25, 0x17	; 23
 57a:	90 93 87 00 	sts	0x0087, r25
 57e:	80 93 86 00 	sts	0x0086, r24
 582:	80 91 02 01 	lds	r24, 0x0102
 586:	90 91 03 01 	lds	r25, 0x0103
 58a:	90 93 89 00 	sts	0x0089, r25
 58e:	80 93 88 00 	sts	0x0088, r24
 592:	80 91 00 01 	lds	r24, 0x0100
 596:	90 91 01 01 	lds	r25, 0x0101
 59a:	90 93 8b 00 	sts	0x008B, r25
 59e:	80 93 8a 00 	sts	0x008A, r24
 5a2:	10 92 80 00 	sts	0x0080, r1
 5a6:	8b e1       	ldi	r24, 0x1B	; 27
 5a8:	80 93 81 00 	sts	0x0081, r24
 5ac:	86 e0       	ldi	r24, 0x06	; 6
 5ae:	80 93 6f 00 	sts	0x006F, r24
 5b2:	86 e4       	ldi	r24, 0x46	; 70
 5b4:	80 93 ba 00 	sts	0x00BA, r24
 5b8:	82 e0       	ldi	r24, 0x02	; 2
 5ba:	80 93 b8 00 	sts	0x00B8, r24
 5be:	81 e0       	ldi	r24, 0x01	; 1
 5c0:	80 93 b9 00 	sts	0x00B9, r24
 5c4:	85 e4       	ldi	r24, 0x45	; 69
 5c6:	80 93 bc 00 	sts	0x00BC, r24
 5ca:	0e 94 39 02 	call	0x472	; 0x472 <adcInit>
 5ce:	10 92 64 00 	sts	0x0064, r1
 5d2:	8a e0       	ldi	r24, 0x0A	; 10
 5d4:	90 e0       	ldi	r25, 0x00	; 0
 5d6:	0e 94 02 01 	call	0x204	; 0x204 <delay_ms>
 5da:	78 94       	sei
 5dc:	84 e6       	ldi	r24, 0x64	; 100
 5de:	90 e0       	ldi	r25, 0x00	; 0
 5e0:	0e 94 02 01 	call	0x204	; 0x204 <delay_ms>
 5e4:	8a e0       	ldi	r24, 0x0A	; 10
 5e6:	90 e0       	ldi	r25, 0x00	; 0
 5e8:	0e 94 02 01 	call	0x204	; 0x204 <delay_ms>
 5ec:	0e 94 44 02 	call	0x488	; 0x488 <analogGather>
 5f0:	f9 cf       	rjmp	.-14     	; 0x5e4 <main+0x72>

000005f2 <_exit>:
 5f2:	f8 94       	cli

000005f4 <__stop_program>:
 5f4:	ff cf       	rjmp	.-2      	; 0x5f4 <__stop_program>
