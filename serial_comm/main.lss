
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000003e  00800060  000000c2  00000136  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000020  00000000  00000000  00000174  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000004f  00000000  00000000  00000194  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000001a9  00000000  00000000  000001e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000132  00000000  00000000  0000038c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000181  00000000  00000000  000004be  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000060  00000000  00000000  00000640  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000009f  00000000  00000000  000006a0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	24 c0       	rjmp	.+72     	; 0x4c <__bad_interrupt>
   4:	23 c0       	rjmp	.+70     	; 0x4c <__bad_interrupt>
   6:	22 c0       	rjmp	.+68     	; 0x4c <__bad_interrupt>
   8:	21 c0       	rjmp	.+66     	; 0x4c <__bad_interrupt>
   a:	20 c0       	rjmp	.+64     	; 0x4c <__bad_interrupt>
   c:	1f c0       	rjmp	.+62     	; 0x4c <__bad_interrupt>
   e:	1e c0       	rjmp	.+60     	; 0x4c <__bad_interrupt>
  10:	1d c0       	rjmp	.+58     	; 0x4c <__bad_interrupt>
  12:	1c c0       	rjmp	.+56     	; 0x4c <__bad_interrupt>
  14:	1b c0       	rjmp	.+54     	; 0x4c <__bad_interrupt>
  16:	1a c0       	rjmp	.+52     	; 0x4c <__bad_interrupt>
  18:	19 c0       	rjmp	.+50     	; 0x4c <__bad_interrupt>
  1a:	18 c0       	rjmp	.+48     	; 0x4c <__bad_interrupt>
  1c:	17 c0       	rjmp	.+46     	; 0x4c <__bad_interrupt>
  1e:	16 c0       	rjmp	.+44     	; 0x4c <__bad_interrupt>
  20:	15 c0       	rjmp	.+42     	; 0x4c <__bad_interrupt>
  22:	14 c0       	rjmp	.+40     	; 0x4c <__bad_interrupt>
  24:	13 c0       	rjmp	.+38     	; 0x4c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e2 ec       	ldi	r30, 0xC2	; 194
  3a:	f0 e0       	ldi	r31, 0x00	; 0
  3c:	02 c0       	rjmp	.+4      	; 0x42 <.do_copy_data_start>

0000003e <.do_copy_data_loop>:
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0

00000042 <.do_copy_data_start>:
  42:	ae 39       	cpi	r26, 0x9E	; 158
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <.do_copy_data_loop>
  48:	29 d0       	rcall	.+82     	; 0x9c <main>
  4a:	39 c0       	rjmp	.+114    	; 0xbe <_exit>

0000004c <__bad_interrupt>:
  4c:	d9 cf       	rjmp	.-78     	; 0x0 <__vectors>

0000004e <uart_init>:


void uart_init(void)
{
	// Set baud rate
	UBRRH = (unsigned char)(MYUBRR >> 8);
  4e:	10 bc       	out	0x20, r1	; 32
	UBRRL = (unsigned char)MYUBRR;
  50:	83 e3       	ldi	r24, 0x33	; 51
  52:	89 b9       	out	0x09, r24	; 9

	// Enable receiver and transmitter
	UCSRB = (1<<RXEN)|(1<<TXEN);
  54:	88 e1       	ldi	r24, 0x18	; 24
  56:	8a b9       	out	0x0a, r24	; 10
	
	// Set frame format to 8 data bits, no parity, 1 stop bit
	UCSRC = (1<<URSEL)|(0<<USBS)|(1<<UCSZ1)|(1<<UCSZ0);
  58:	86 e8       	ldi	r24, 0x86	; 134
  5a:	80 bd       	out	0x20, r24	; 32
	// NOTE: ^^^^^^^^ This is SUPER DUPER important. Don't remove it. 

	
}
  5c:	08 95       	ret

0000005e <uart_tx>:


void uart_tx(uint8_t u8Data)
{
	// Wait if a byte is being transmitted
	while((UCSRA&(1<<UDRE)) == 0);
  5e:	5d 9b       	sbis	0x0b, 5	; 11
  60:	fe cf       	rjmp	.-4      	; 0x5e <uart_tx>

	// Transmit data
	UDR = u8Data;
  62:	8c b9       	out	0x0c, r24	; 12
}
  64:	08 95       	ret

00000066 <uart_rx>:

uint8_t uart_rx(void)
{

	// Wait until a byte has been received
	while((UCSRA&(1<<RXC)) == 0);
  66:	5f 9b       	sbis	0x0b, 7	; 11
  68:	fe cf       	rjmp	.-4      	; 0x66 <uart_rx>
	
	
	
	// Return received data
	return UDR;
  6a:	8c b1       	in	r24, 0x0c	; 12
}
  6c:	08 95       	ret

0000006e <string_tx>:

void string_tx(char* string)
{
	unsigned int len = strlen(string);
  6e:	dc 01       	movw	r26, r24
  70:	0d 90       	ld	r0, X+
  72:	00 20       	and	r0, r0
  74:	e9 f7       	brne	.-6      	; 0x70 <string_tx+0x2>
  76:	11 97       	sbiw	r26, 0x01	; 1
  78:	a8 1b       	sub	r26, r24
  7a:	b9 0b       	sbc	r27, r25
  7c:	20 e0       	ldi	r18, 0x00	; 0
  7e:	30 e0       	ldi	r19, 0x00	; 0
  80:	09 c0       	rjmp	.+18     	; 0x94 <string_tx+0x26>
	for(int i=0;i<len;i++)
	{
		uart_tx(string[i]);
  82:	fc 01       	movw	r30, r24
  84:	e2 0f       	add	r30, r18
  86:	f3 1f       	adc	r31, r19
  88:	e0 81       	ld	r30, Z


void uart_tx(uint8_t u8Data)
{
	// Wait if a byte is being transmitted
	while((UCSRA&(1<<UDRE)) == 0);
  8a:	5d 9b       	sbis	0x0b, 5	; 11
  8c:	fe cf       	rjmp	.-4      	; 0x8a <string_tx+0x1c>

	// Transmit data
	UDR = u8Data;
  8e:	ec b9       	out	0x0c, r30	; 12
}

void string_tx(char* string)
{
	unsigned int len = strlen(string);
	for(int i=0;i<len;i++)
  90:	2f 5f       	subi	r18, 0xFF	; 255
  92:	3f 4f       	sbci	r19, 0xFF	; 255
  94:	2a 17       	cp	r18, r26
  96:	3b 07       	cpc	r19, r27
  98:	a0 f3       	brcs	.-24     	; 0x82 <string_tx+0x14>
	{
		uart_tx(string[i]);
	}
}
  9a:	08 95       	ret

0000009c <main>:


void uart_init(void)
{
	// Set baud rate
	UBRRH = (unsigned char)(MYUBRR >> 8);
  9c:	10 bc       	out	0x20, r1	; 32
	UBRRL = (unsigned char)MYUBRR;
  9e:	83 e3       	ldi	r24, 0x33	; 51
  a0:	89 b9       	out	0x09, r24	; 9

	// Enable receiver and transmitter
	UCSRB = (1<<RXEN)|(1<<TXEN);
  a2:	88 e1       	ldi	r24, 0x18	; 24
  a4:	8a b9       	out	0x0a, r24	; 10
	
	// Set frame format to 8 data bits, no parity, 1 stop bit
	UCSRC = (1<<URSEL)|(0<<USBS)|(1<<UCSZ1)|(1<<UCSZ0);
  a6:	86 e8       	ldi	r24, 0x86	; 134
  a8:	80 bd       	out	0x20, r24	; 32
	uart_init();

	// Send string
	//while(1)
	//{
	string_tx((char*)"ATMega 8 AVR microcontroller initialized. Starting echo...\r\n");
  aa:	80 e6       	ldi	r24, 0x60	; 96
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	df df       	rcall	.-66     	; 0x6e <string_tx>

uint8_t uart_rx(void)
{

	// Wait until a byte has been received
	while((UCSRA&(1<<RXC)) == 0);
  b0:	5f 9b       	sbis	0x0b, 7	; 11
  b2:	fe cf       	rjmp	.-4      	; 0xb0 <main+0x14>
	
	
	
	// Return received data
	return UDR;
  b4:	8c b1       	in	r24, 0x0c	; 12


void uart_tx(uint8_t u8Data)
{
	// Wait if a byte is being transmitted
	while((UCSRA&(1<<UDRE)) == 0);
  b6:	5d 9b       	sbis	0x0b, 5	; 11
  b8:	fe cf       	rjmp	.-4      	; 0xb6 <main+0x1a>

	// Transmit data
	UDR = u8Data;
  ba:	8c b9       	out	0x0c, r24	; 12
  bc:	f9 cf       	rjmp	.-14     	; 0xb0 <main+0x14>

000000be <_exit>:
  be:	f8 94       	cli

000000c0 <__stop_program>:
  c0:	ff cf       	rjmp	.-2      	; 0xc0 <__stop_program>
