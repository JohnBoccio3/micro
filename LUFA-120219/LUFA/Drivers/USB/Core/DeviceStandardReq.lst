   1               		.file	"DeviceStandardReq.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.USB_Device_ProcessControlRequest,"ax",@progbits
  11               	.global	USB_Device_ProcessControlRequest
  13               	USB_Device_ProcessControlRequest:
  14               	.LFB84:
  15               		.file 1 "../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c"
   1:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** /*
   2:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c ****              LUFA Library
   3:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c ****      Copyright (C) Dean Camera, 2012.
   4:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 
   5:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c ****   dean [at] fourwalledcubicle [dot] com
   6:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c ****            www.lufa-lib.org
   7:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** */
   8:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 
   9:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** /*
  10:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c ****   Copyright 2012  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 
  12:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c ****   Permission to use, copy, modify, distribute, and sell this
  13:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c ****   software and its documentation for any purpose is hereby granted
  14:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c ****   without fee, provided that the above copyright notice appear in
  15:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c ****   all copies and that both that the copyright notice and this
  16:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c ****   permission notice and warranty disclaimer appear in supporting
  17:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c ****   documentation, and that the name of the author not be used in
  18:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c ****   advertising or publicity pertaining to distribution of the
  19:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c ****   software without specific, written prior permission.
  20:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 
  21:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c ****   The author disclaim all warranties with regard to this
  22:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c ****   software, including all implied warranties of merchantability
  23:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c ****   and fitness.  In no event shall the author be liable for any
  24:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c ****   special, indirect or consequential damages or any damages
  25:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c ****   whatsoever resulting from loss of use, data or profits, whether
  26:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c ****   in an action of contract, negligence or other tortious action,
  27:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c ****   arising out of or in connection with the use or performance of
  28:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c ****   this software.
  29:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** */
  30:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 
  31:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** #define  __INCLUDE_FROM_USB_DRIVER
  32:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** #include "USBMode.h"
  33:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 
  34:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** #if defined(USB_CAN_BE_DEVICE)
  35:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 
  36:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** #define  __INCLUDE_FROM_DEVICESTDREQ_C
  37:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** #include "DeviceStandardReq.h"
  38:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 
  39:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** uint8_t USB_Device_ConfigurationNumber;
  40:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 
  41:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** #if !defined(NO_DEVICE_SELF_POWER)
  42:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** bool    USB_Device_CurrentlySelfPowered;
  43:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** #endif
  44:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 
  45:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** #if !defined(NO_DEVICE_REMOTE_WAKEUP)
  46:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** bool    USB_Device_RemoteWakeupEnabled;
  47:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** #endif
  48:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 
  49:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** void USB_Device_ProcessControlRequest(void)
  50:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** {
  16               		.loc 1 50 0
  17               		.cfi_startproc
  18 0000 EF92      		push r14
  19               	.LCFI0:
  20               		.cfi_def_cfa_offset 3
  21               		.cfi_offset 14, -2
  22 0002 FF92      		push r15
  23               	.LCFI1:
  24               		.cfi_def_cfa_offset 4
  25               		.cfi_offset 15, -3
  26 0004 0F93      		push r16
  27               	.LCFI2:
  28               		.cfi_def_cfa_offset 5
  29               		.cfi_offset 16, -4
  30 0006 1F93      		push r17
  31               	.LCFI3:
  32               		.cfi_def_cfa_offset 6
  33               		.cfi_offset 17, -5
  34 0008 CF93      		push r28
  35               	.LCFI4:
  36               		.cfi_def_cfa_offset 7
  37               		.cfi_offset 28, -6
  38 000a DF93      		push r29
  39               	.LCFI5:
  40               		.cfi_def_cfa_offset 8
  41               		.cfi_offset 29, -7
  42 000c CDB7      		in r28,__SP_L__
  43 000e DEB7      		in r29,__SP_H__
  44               	.LCFI6:
  45               		.cfi_def_cfa_register 28
  46 0010 AC97      		sbiw r28,44
  47               	.LCFI7:
  48               		.cfi_def_cfa_offset 52
  49 0012 0FB6      		in __tmp_reg__,__SREG__
  50 0014 F894      		cli
  51 0016 DEBF      		out __SP_H__,r29
  52 0018 0FBE      		out __SREG__,__tmp_reg__
  53 001a CDBF      		out __SP_L__,r28
  54               	/* prologue: function */
  55               	/* frame size = 44 */
  56               	/* stack size = 50 */
  57               	.L__stack_usage = 50
  58               	.LVL0:
  51:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	#if defined(ARCH_BIG_ENDIAN)
  52:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	USB_ControlRequest.bmRequestType = Endpoint_Read_8();
  53:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	USB_ControlRequest.bRequest      = Endpoint_Read_8();
  54:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
  55:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
  56:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
  57:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	#else
  58:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;
  59               		.loc 1 58 0
  60 001c E0E0      		ldi r30,lo8(USB_ControlRequest)
  61 001e F0E0      		ldi r31,hi8(USB_ControlRequest)
  62               	.LVL1:
  63               	.L2:
  64               	.LBB178:
  65               	.LBB179:
  66               	.LBB180:
  67               		.file 2 "../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h"
   1:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /*
   2:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****              LUFA Library
   3:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****      Copyright (C) Dean Camera, 2012.
   4:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
   5:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   dean [at] fourwalledcubicle [dot] com
   6:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****            www.lufa-lib.org
   7:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** */
   8:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
   9:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /*
  10:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   Copyright 2012  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  12:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   Permission to use, copy, modify, distribute, and sell this
  13:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   software and its documentation for any purpose is hereby granted
  14:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   without fee, provided that the above copyright notice appear in
  15:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   all copies and that both that the copyright notice and this
  16:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   permission notice and warranty disclaimer appear in supporting
  17:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   documentation, and that the name of the author not be used in
  18:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   advertising or publicity pertaining to distribution of the
  19:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   software without specific, written prior permission.
  20:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  21:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   The author disclaim all warranties with regard to this
  22:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   software, including all implied warranties of merchantability
  23:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   and fitness.  In no event shall the author be liable for any
  24:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   special, indirect or consequential damages or any damages
  25:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   whatsoever resulting from loss of use, data or profits, whether
  26:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   in an action of contract, negligence or other tortious action,
  27:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   arising out of or in connection with the use or performance of
  28:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   this software.
  29:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** */
  30:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  31:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \file
  32:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief USB Endpoint definitions for the AVR8 microcontrollers.
  33:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \copydetails Group_EndpointManagement_AVR8
  34:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  35:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \note This file should not be included directly. It is automatically included as needed by the 
  36:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *        dispatch header located in LUFA/Drivers/USB/USB.h.
  37:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  38:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  39:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \ingroup Group_EndpointRW
  40:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \defgroup Group_EndpointRW_AVR8 Endpoint Data Reading and Writing (AVR8)
  41:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief Endpoint data read/write definitions for the Atmel AVR8 architecture.
  42:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  43:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  Functions, macros, variables, enums and types related to data reading and writing from and to e
  44:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  45:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  46:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \ingroup Group_EndpointPrimitiveRW
  47:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \defgroup Group_EndpointPrimitiveRW_AVR8 Read/Write of Primitive Data Types (AVR8)
  48:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief Endpoint primitive read/write definitions for the Atmel AVR8 architecture.
  49:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  50:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  Functions, macros, variables, enums and types related to data reading and writing of primitive 
  51:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  from and to endpoints.
  52:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  53:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  54:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \ingroup Group_EndpointPacketManagement
  55:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \defgroup Group_EndpointPacketManagement_AVR8 Endpoint Packet Management (AVR8)
  56:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief Endpoint packet management definitions for the Atmel AVR8 architecture.
  57:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  58:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  Functions, macros, variables, enums and types related to packet management of endpoints.
  59:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  60:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  61:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \ingroup Group_EndpointManagement
  62:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \defgroup Group_EndpointManagement_AVR8 Endpoint Management (AVR8)
  63:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief Endpoint management definitions for the Atmel AVR8 architecture.
  64:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  65:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  Functions, macros and enums related to endpoint management when in USB Device mode. This
  66:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  module contains the endpoint management macros, as well as endpoint interrupt and data
  67:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  send/receive functions for various data types.
  68:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  69:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  @{
  70:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  71:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  72:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** #ifndef __ENDPOINT_AVR8_H__
  73:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** #define __ENDPOINT_AVR8_H__
  74:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  75:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Includes: */
  76:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#include "../../../../Common/Common.h"
  77:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#include "../USBTask.h"
  78:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#include "../USBInterrupt.h"
  79:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  80:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Enable C linkage for C++ Compilers: */
  81:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#if defined(__cplusplus)
  82:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			extern "C" {
  83:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#endif
  84:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  85:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Preprocessor Checks: */
  86:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#if !defined(__INCLUDE_FROM_USB_DRIVER)
  87:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#error Do not include this file directly. Include LUFA/Drivers/USB/USB.h instead.
  88:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#endif
  89:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  90:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Private Interface - For use in library only: */
  91:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	#if !defined(__DOXYGEN__)
  92:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Macros: */
  93:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#define _ENDPOINT_GET_MAXSIZE(EPIndex)         _ENDPOINT_GET_MAXSIZE2(ENDPOINT_DETAILS_EP ## EPI
  94:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#define _ENDPOINT_GET_MAXSIZE2(EPDetails)      _ENDPOINT_GET_MAXSIZE3(EPDetails)
  95:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#define _ENDPOINT_GET_MAXSIZE3(MaxSize, Banks) (MaxSize)
  96:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  97:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#define _ENDPOINT_GET_BANKS(EPIndex)           _ENDPOINT_GET_BANKS2(ENDPOINT_DETAILS_EP ## EPInd
  98:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#define _ENDPOINT_GET_BANKS2(EPDetails)        _ENDPOINT_GET_BANKS3(EPDetails)
  99:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#define _ENDPOINT_GET_BANKS3(MaxSize, Banks)   (Banks)
 100:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 101:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
 102:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_MAXEP             7
 103:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 104:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP0               64,  1
 105:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP1               256, 2
 106:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP2               64,  2
 107:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP3               64,  2
 108:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP4               64,  2
 109:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP5               64,  2
 110:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP6               64,  2
 111:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#else
 112:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_MAXEP             5
 113:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 114:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP0               64,  1
 115:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP1               64,  1
 116:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP2               64,  1
 117:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP3               64,  2
 118:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP4               64,  2
 119:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#endif
 120:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 121:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Inline Functions: */
 122:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT A
 123:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                                                       ATTR_ALWAYS_INLINE;
 124:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
 125:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 126:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				uint8_t  MaskVal    = 0;
 127:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				uint16_t CheckBytes = 8;
 128:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 129:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				while (CheckBytes < Bytes)
 130:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				{
 131:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					MaskVal++;
 132:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					CheckBytes <<= 1;
 133:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				}
 134:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 135:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return (MaskVal << EPSIZE0);
 136:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 137:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 138:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Function Prototypes: */
 139:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			void Endpoint_ClearEndpoints(void);
 140:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			bool Endpoint_ConfigureEndpoint_Prv(const uint8_t Number,
 141:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                    const uint8_t UECFG0XData,
 142:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                    const uint8_t UECFG1XData);
 143:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 144:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	#endif
 145:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 146:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Public Interface - May be used in end-application: */
 147:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Macros: */
 148:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** \name Endpoint Bank Mode Masks */
 149:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			//@{
 150:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Mask for the bank mode selection for the \ref Endpoint_ConfigureEndpoint() macro. This indic
 151:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  that the endpoint should have one single bank, which requires less USB FIFO memory but resul
 152:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  in slower transfers as only one USB device (the AVR or the host) can access the endpoint's
 153:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  bank at the one time.
 154:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 155:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#define ENDPOINT_BANK_SINGLE                    (0 << EPBK0)
 156:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 157:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Mask for the bank mode selection for the \ref Endpoint_ConfigureEndpoint() macro. This indic
 158:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  that the endpoint should have two banks, which requires more USB FIFO memory but results
 159:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  in faster transfers as one USB device (the AVR or the host) can access one bank while the ot
 160:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  accesses the second bank.
 161:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 162:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#define ENDPOINT_BANK_DOUBLE                    (1 << EPBK0)
 163:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			//@}
 164:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 165:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#if (!defined(FIXED_CONTROL_ENDPOINT_SIZE) || defined(__DOXYGEN__))
 166:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				/** Default size of the default control endpoint's bank, until altered by the control endpoint 
 167:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				 *  value in the device descriptor. Not available if the \c FIXED_CONTROL_ENDPOINT_SIZE token i
 168:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				 */
 169:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_CONTROLEP_DEFAULT_SIZE     8
 170:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#endif
 171:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 172:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Retrieves the maximum bank size in bytes of a given endpoint.
 173:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 174:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note This macro will only work correctly on endpoint indexes that are compile-time constant
 175:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        defined by the preprocessor.
 176:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 177:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] EPIndex  Endpoint number, a value between 0 and (\ref ENDPOINT_TOTAL_ENDPOINTS - 
 178:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 179:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#define ENDPOINT_MAX_SIZE(EPIndex)              _ENDPOINT_GET_MAXSIZE(EPIndex)
 180:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 181:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Retrieves the total number of banks supported by the given endpoint.
 182:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 183:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note This macro will only work correctly on endpoint indexes that are compile-time constant
 184:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        defined by the preprocessor.
 185:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 186:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] EPIndex  Endpoint number, a value between 0 and (\ref ENDPOINT_TOTAL_ENDPOINTS - 
 187:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 188:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#define ENDPOINT_BANKS_SUPPORTED(EPIndex)       _ENDPOINT_GET_BANKS(EPIndex)
 189:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 190:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#if !defined(CONTROL_ONLY_DEVICE) || defined(__DOXYGEN__)
 191:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				/** Total number of endpoints (including the default control endpoint at address 0) which may
 192:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				 *  be used in the device. Different USB AVR models support different amounts of endpoints,
 193:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				 *  this value reflects the maximum number of endpoints for the currently selected AVR model.
 194:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				 */
 195:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_TOTAL_ENDPOINTS            ENDPOINT_DETAILS_MAXEP
 196:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#else
 197:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_TOTAL_ENDPOINTS            1
 198:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#endif
 199:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 200:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Enums: */
 201:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Enum for the possible error return codes of the \ref Endpoint_WaitUntilReady() function.
 202:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 203:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointRW_AVR8
 204:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 205:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			enum Endpoint_WaitUntilReady_ErrorCodes_t
 206:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 207:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_NoError                 = 0, /**< Endpoint is ready for next packet, no erro
 208:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_EndpointStalled         = 1, /**< The endpoint was stalled during the stream
 209:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   transfer by the host or device.
 210:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 */
 211:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_DeviceDisconnected      = 2,	/**< Device was disconnected from the host whil
 212:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   waiting for the endpoint to become ready.
 213:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 */
 214:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_BusSuspended            = 3, /**< The USB bus has been suspended by the host
 215:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   no USB endpoint traffic can occur until th
 216:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   has resumed.
 217:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 */
 218:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_Timeout                 = 4, /**< The host failed to accept or send the next
 219:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   within the software timeout period set by 
 220:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   \ref USB_STREAM_TIMEOUT_MS macro.
 221:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 */
 222:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			};
 223:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 224:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Inline Functions: */
 225:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Configures the specified endpoint number with the given endpoint type, direction, bank size
 226:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  and banking mode. Once configured, the endpoint may be read from or written to, depending
 227:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  on its direction.
 228:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 229:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Number     Endpoint number to configure. This must be more than 0 and less than
 230:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        \ref ENDPOINT_TOTAL_ENDPOINTS.
 231:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 232:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Type       Type of endpoint to configure, a \c EP_TYPE_* mask. Not all endpoint t
 233:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        are available on Low Speed USB devices - refer to the USB 2.0 specific
 234:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 235:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Direction  Endpoint data direction, either \ref ENDPOINT_DIR_OUT or \ref ENDPOINT
 236:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        All endpoints (except Control type) are unidirectional - data may only
 237:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        from or written to the endpoint bank based on its direction, not both.
 238:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 239:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Size       Size of the endpoint's bank, where packets are stored before they are 
 240:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        to the USB host, or after they have been received from the USB host (d
 241:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        the endpoint's data direction). The bank size must indicate the maximu
 242:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        that the endpoint can handle.
 243:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 244:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Banks      Number of banks to use for the endpoint being configured, an \c ENDPOI
 245:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        More banks uses more USB DPRAM, but offers better performance. Isochro
 246:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        endpoints <b>must</b> have at least two banks.
 247:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 248:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note When the \c ORDERED_EP_CONFIG compile time option is used, Endpoints <b>must</b> be co
 249:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        ascending order, or bank corruption will occur.
 250:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        \n\n
 251:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 252:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note Different endpoints may have different maximum packet sizes based on the endpoint's in
 253:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        the chosen microcontroller model's datasheet to determine the maximum bank size for ea
 254:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        \n\n
 255:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 256:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note The default control endpoint should not be manually configured by the user application
 257:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        it is automatically configured by the library internally.
 258:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        \n\n
 259:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 260:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note This routine will automatically select the specified endpoint upon success. Upon failu
 261:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        which failed to reconfigure correctly will be selected.
 262:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 263:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the configuration succeeded, \c false otherwise.
 264:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 265:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Number,
 266:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Type,
 267:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Direction,
 268:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint16_t Size,
 269:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Banks) ATTR_ALWAYS_INLINE;
 270:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Number,
 271:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Type,
 272:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Direction,
 273:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint16_t Size,
 274:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Banks)
 275:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 276:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 
 277:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                      ((1 << ALLOC) | Banks | Endpoint_BytesToEPSizeMask(Size))
 278:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 279:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 280:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Indicates the number of bytes currently stored in the current endpoint's selected bank.
 281:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 282:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note The return width of this function may differ, depending on the maximum endpoint bank s
 283:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        of the selected AVR model.
 284:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 285:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointRW_AVR8
 286:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 287:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Total number of bytes in the currently selected Endpoint's FIFO buffer.
 288:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 289:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
 290:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint16_t Endpoint_BytesInEndpoint(void)
 291:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 292:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
 293:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return UEBCX;
 294:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#elif defined(USB_SERIES_4_AVR)
 295:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return (((uint16_t)UEBCHX << 8) | UEBCLX);
 296:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#elif defined(USB_SERIES_2_AVR)
 297:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return UEBCLX;
 298:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 299:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 300:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 301:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Get the endpoint address of the currently selected endpoint. This is typically used to save
 302:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  the currently selected endpoint number so that it can be restored after another endpoint has
 303:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  been manipulated.
 304:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 305:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Index of the currently selected endpoint.
 306:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 307:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLI
 308:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
 309:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 310:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 311:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return (UENUM & ENDPOINT_EPNUM_MASK);
 312:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 313:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return ENDPOINT_CONTROLEP;
 314:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 315:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 316:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 317:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Selects the given endpoint number. If the address from the device descriptors is used, the
 318:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  value should be masked with the \ref ENDPOINT_EPNUM_MASK constant to extract only the endpoi
 319:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  number (and discarding the endpoint direction bit).
 320:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 321:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  Any endpoint operations which do not require the endpoint number to be indicated will operat
 322:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  the currently selected endpoint.
 323:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 324:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] EndpointNumber Endpoint number to select.
 325:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 326:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
 327:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
 328:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 329:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 330:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UENUM = EndpointNumber;
 331:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 332:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 333:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 334:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Resets the endpoint bank FIFO. This clears all the endpoint banks and resets the USB control
 335:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  data In and Out pointers to the bank's contents.
 336:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 337:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
 338:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 339:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
 340:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber)
 341:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 342:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UERST = (1 << EndpointNumber);
 343:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UERST = 0;
 344:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 345:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 346:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Enables the currently selected endpoint so that data can be sent and received through it to
 347:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  and from a host.
 348:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 349:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
 350:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 351:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
 352:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_EnableEndpoint(void)
 353:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 354:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX |= (1 << EPEN);
 355:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 356:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 357:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Disables the currently selected endpoint so that data cannot be sent and received through it
 358:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  to and from a host.
 359:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 360:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
 361:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_DisableEndpoint(void)
 362:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 363:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX &= ~(1 << EPEN);
 364:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 365:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 366:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the currently selected endpoint is enabled, but not necessarily configured.
 367:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 368:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
 369:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 370:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 371:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsEnabled(void)
 372:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 373:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UECONX & (1 << EPEN)) ? true : false);
 374:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 375:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 376:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Retrieves the number of busy banks in the currently selected endpoint, which have been queue
 377:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  transmission via the \ref Endpoint_ClearIN() command, or are awaiting acknowledgement via th
 378:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ref Endpoint_ClearOUT() command.
 379:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 380:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 381:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 382:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Total number of busy banks in the selected endpoint.
 383:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 384:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetBusyBanks(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
 385:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetBusyBanks(void)
 386:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 387:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return (UESTA0X & (0x03 << NBUSYBK0));
 388:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 389:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 390:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Aborts all pending IN transactions on the currently selected endpoint, once the bank
 391:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  has been queued for transmission to the host via \ref Endpoint_ClearIN(). This function
 392:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  will terminate all queued transactions, resetting the endpoint banks ready for a new
 393:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  packet.
 394:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 395:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 396:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 397:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_AbortPendingIN(void)
 398:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 399:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				while (Endpoint_GetBusyBanks() != 0)
 400:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				{
 401:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX |= (1 << RXOUTI);
 402:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					while (UEINTX & (1 << RXOUTI));
 403:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				}
 404:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 405:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 406:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the currently selected endpoint may be read from (if data is waiting in the en
 407:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  bank and the endpoint is an OUT direction, or if the bank is not yet full if the endpoint is
 408:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  direction). This function will return false if an error has occurred in the endpoint, if the
 409:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  is an OUT direction and no packet (or an empty packet) has been received, or if the endpoint
 410:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  direction and the endpoint bank is full.
 411:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 412:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 413:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 414:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the currently selected endpoint may be read from or written to, d
 415:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *          on its direction.
 416:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 417:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 418:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsReadWriteAllowed(void)
 419:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 420:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << RWAL)) ? true : false);
 421:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 422:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 423:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the currently selected endpoint is configured.
 424:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 425:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false oth
 426:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 427:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 428:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsConfigured(void)
 429:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 430:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UESTA0X & (1 << CFGOK)) ? true : false);
 431:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 432:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 433:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Returns a mask indicating which INTERRUPT type endpoints have interrupted - i.e. their
 434:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  interrupt duration has elapsed. Which endpoints have interrupted can be determined by
 435:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  masking the return value against <tt>(1 << <i>{Endpoint Number}</i>)</tt>.
 436:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 437:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Mask whose bits indicate which endpoints have interrupted.
 438:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 439:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetEndpointInterrupts(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_I
 440:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetEndpointInterrupts(void)
 441:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 442:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return UEINT;
 443:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 444:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 445:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the specified endpoint number has interrupted (valid only for INTERRUPT type
 446:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  endpoints).
 447:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 448:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] EndpointNumber  Index of the endpoint whose interrupt flag should be tested.
 449:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 450:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the specified endpoint has interrupted, \c false otherwise.
 451:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 452:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_HasEndpointInterrupted(const uint8_t EndpointNumber) ATTR_WARN_UNUSE
 453:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_HasEndpointInterrupted(const uint8_t EndpointNumber)
 454:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 455:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((Endpoint_GetEndpointInterrupts() & (1 << EndpointNumber)) ? true : false);
 456:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 457:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 458:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the selected IN endpoint is ready for a new packet to be sent to the host.
 459:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 460:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 461:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 462:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwis
 463:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 464:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 465:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsINReady(void)
 466:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 467:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << TXINI)) ? true : false);
 468:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 469:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 470:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the selected OUT endpoint has received new packet from the host.
 471:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 472:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 473:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 474:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwis
 475:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 476:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 477:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsOUTReceived(void)
 478:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 479:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 480:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 481:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 482:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the current CONTROL type endpoint has received a SETUP packet.
 483:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 484:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 485:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 486:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false other
 487:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 488:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 489:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsSETUPReceived(void)
 490:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 491:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 492:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 493:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 494:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Clears a received SETUP packet on the currently selected CONTROL type endpoint, freeing up t
 495:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  endpoint for the next packet.
 496:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 497:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 498:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 499:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note This is not applicable for non CONTROL type endpoints.
 500:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 501:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
 502:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearSETUP(void)
 503:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 504:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UEINTX &= ~(1 << RXSTPI);
 505:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 506:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 507:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Sends an IN packet to the host on the currently selected endpoint, freeing up the endpoint f
 508:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  next packet and switching to the alternative endpoint bank if double banked.
 509:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 510:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 511:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 512:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
 513:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearIN(void)
 514:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 515:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 516:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 517:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 518:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~(1 << TXINI);
 519:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 520:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 521:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 522:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Acknowledges an OUT packet to the host on the currently selected endpoint, freeing up the en
 523:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  for the next packet and switching to the alternative endpoint bank if double banked.
 524:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 525:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 526:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 527:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
 528:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearOUT(void)
 529:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 530:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 531:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 532:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 533:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~(1 << RXOUTI);
 534:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 535:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 536:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 537:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Stalls the current endpoint, indicating to the host that a logical problem occurred with the
 538:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  indicated endpoint and that the current transfer sequence should be aborted. This provides a
 539:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  way for devices to indicate invalid commands to the host so that the current transfer can be
 540:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  aborted and the host can begin its own recovery sequence.
 541:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 542:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  The currently selected endpoint remains stalled until either the \ref Endpoint_ClearStall() 
 543:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  is called, or the host issues a CLEAR FEATURE request to the device for the currently select
 544:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  endpoint.
 545:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 546:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 547:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 548:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
 549:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_StallTransaction(void)
 550:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 551:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX |= (1 << STALLRQ);
 552:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 553:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 554:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Clears the STALL condition on the currently selected endpoint.
 555:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 556:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 557:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 558:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
 559:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearStall(void)
 560:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 561:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX |= (1 << STALLRQC);
 562:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 563:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 564:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the currently selected endpoint is stalled, false otherwise.
 565:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 566:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 567:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 568:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
 569:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 570:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 571:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsStalled(void)
 572:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 573:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UECONX & (1 << STALLRQ)) ? true : false);
 574:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 575:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 576:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Resets the data toggle of the currently selected endpoint. */
 577:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
 578:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ResetDataToggle(void)
 579:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 580:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX |= (1 << RSTDT);
 581:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 582:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 583:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines the currently selected endpoint's direction.
 584:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 585:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
 586:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 587:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_IN
 588:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetEndpointDirection(void)
 589:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 590:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 591:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 592:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 593:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Sets the direction of the currently selected endpoint.
 594:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 595:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
 596:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 597:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE
 598:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
 599:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 600:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
 601:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 602:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 603:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Reads one byte from the currently selected endpoint's bank, for OUT direction endpoints.
 604:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 605:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPrimitiveRW_AVR8
 606:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 607:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
 608:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 609:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 610:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_Read_8(void)
 611:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 612:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return UEDATX;
  68               		.loc 2 612 0
  69 0020 8091 F100 		lds r24,241
  70               	.LBE180:
  71               	.LBE179:
  59:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 
  60:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeade
  61:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	  *(RequestHeader++) = Endpoint_Read_8();
  72               		.loc 1 61 0
  73 0024 8193      		st Z+,r24
  74               	.LVL2:
  60:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeade
  75               		.loc 1 60 0
  76 0026 20E0      		ldi r18,hi8(USB_ControlRequest+8)
  77 0028 E030      		cpi r30,lo8(USB_ControlRequest+8)
  78 002a F207      		cpc r31,r18
  79 002c 01F4      		brne .L2
  80               	.LBE178:
  62:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	#endif
  63:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 
  64:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	EVENT_USB_Device_ControlRequest();
  81               		.loc 1 64 0
  82 002e 0E94 0000 		call EVENT_USB_Device_ControlRequest
  83               	.LVL3:
  84               	.LBB181:
  85               	.LBB182:
 491:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << RXSTPI)) ? true : false);
  86               		.loc 2 491 0
  87 0032 8091 E800 		lds r24,232
  88               	.LBE182:
  89               	.LBE181:
  65:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 
  66:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	if (Endpoint_IsSETUPReceived())
  90               		.loc 1 66 0
  91 0036 83FF      		sbrs r24,3
  92 0038 00C0      		rjmp .L3
  93               	.LBB183:
  67:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	{
  68:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
  94               		.loc 1 68 0
  95 003a 8091 0000 		lds r24,USB_ControlRequest
  96               	.LVL4:
  69:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 
  70:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 		switch (USB_ControlRequest.bRequest)
  97               		.loc 1 70 0
  98 003e 9091 0000 		lds r25,USB_ControlRequest+1
  99 0042 9530      		cpi r25,lo8(5)
 100 0044 01F4      		brne .+2
 101 0046 00C0      		rjmp .L6
 102 0048 00F4      		brsh .L10
 103 004a 9130      		cpi r25,lo8(1)
 104 004c 01F0      		breq .L5
 105 004e 00F0      		brlo .L4
 106 0050 9330      		cpi r25,lo8(3)
 107 0052 01F0      		breq .+2
 108 0054 00C0      		rjmp .L3
 109 0056 00C0      		rjmp .L5
 110               	.L10:
 111 0058 9830      		cpi r25,lo8(8)
 112 005a 01F4      		brne .+2
 113 005c 00C0      		rjmp .L8
 114 005e 9930      		cpi r25,lo8(9)
 115 0060 01F4      		brne .+2
 116 0062 00C0      		rjmp .L9
 117 0064 9630      		cpi r25,lo8(6)
 118 0066 01F0      		breq .+2
 119 0068 00C0      		rjmp .L3
 120 006a 00C0      		rjmp .L7
 121               	.L4:
  71:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 		{
  72:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 			case REQ_GetStatus:
  73:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 122               		.loc 1 73 0
 123 006c 8038      		cpi r24,lo8(-128)
 124 006e 01F0      		breq .L11
 125               		.loc 1 73 0 is_stmt 0 discriminator 1
 126 0070 8238      		cpi r24,lo8(-126)
 127 0072 01F0      		breq .+2
 128 0074 00C0      		rjmp .L3
 129 0076 00C0      		rjmp .L12
 130               	.L11:
 131               	.LVL5:
  74:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 					(bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT)))
  75:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 				{
  76:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 					USB_Device_GetStatus();
  77:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 				}
  78:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 
  79:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 				break;
  80:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 			case REQ_ClearFeature:
  81:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 			case REQ_SetFeature:
  82:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
  83:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 					(bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_ENDPOINT)))
  84:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 				{
  85:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 					USB_Device_ClearSetFeature();
  86:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 				}
  87:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 
  88:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 				break;
  89:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 			case REQ_SetAddress:
  90:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
  91:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 				  USB_Device_SetAddress();
  92:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 
  93:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 				break;
  94:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 			case REQ_GetDescriptor:
  95:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
  96:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 					(bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_INTERFACE)))
  97:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 				{
  98:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 					USB_Device_GetDescriptor();
  99:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 				}
 100:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 
 101:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 				break;
 102:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 			case REQ_GetConfiguration:
 103:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
 104:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 				  USB_Device_GetConfiguration();
 105:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 
 106:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 				break;
 107:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 			case REQ_SetConfiguration:
 108:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 109:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 				  USB_Device_SetConfiguration();
 110:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 
 111:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 				break;
 112:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 		}
 113:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	}
 114:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 
 115:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	if (Endpoint_IsSETUPReceived())
 116:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	{
 117:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 		Endpoint_StallTransaction();
 118:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 		Endpoint_ClearSETUP();
 119:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	}
 120:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** }
 121:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 
 122:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** static void USB_Device_SetAddress(void)
 123:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** {
 124:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	uint8_t    DeviceAddress    = (USB_ControlRequest.wValue & 0x7F);
 125:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
 126:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	GlobalInterruptDisable();
 127:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 
 128:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	Endpoint_ClearSETUP();
 129:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 
 130:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	Endpoint_ClearStatusStage();
 131:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 
 132:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	while (!(Endpoint_IsINReady()));
 133:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 
 134:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	USB_Device_SetDeviceAddress(DeviceAddress);
 135:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
 136:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 
 137:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	SetGlobalInterruptMask(CurrentGlobalInt);
 138:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** }
 139:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 
 140:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** static void USB_Device_SetConfiguration(void)
 141:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** {
 142:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	#if defined(FIXED_NUM_CONFIGURATIONS)
 143:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
 144:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	  return;
 145:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	#else
 146:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	USB_Descriptor_Device_t* DevDescriptorPtr;
 147:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 
 148:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	#if defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
 149:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 		#if defined(USE_FLASH_DESCRIPTORS)
 150:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 			#define MemoryAddressSpace  MEMSPACE_FLASH
 151:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 		#elif defined(USE_EEPROM_DESCRIPTORS)
 152:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 			#define MemoryAddressSpace  MEMSPACE_EEPROM
 153:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 		#elif defined(USE_SRAM_DESCRIPTORS)
 154:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 			#define MemoryAddressSpace  MEMSPACE_SRAM
 155:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 		#else
 156:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 			uint8_t MemoryAddressSpace;
 157:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 		#endif
 158:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	#endif
 159:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 
 160:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	if (CALLBACK_USB_GetDescriptor((DTYPE_Device << 8), 0, (void*)&DevDescriptorPtr
 161:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	#if defined(ARCH_HAS_MULTI_ADDRESS_SPACE) && \
 162:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIP
 163:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	                               , &MemoryAddressSpace
 164:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	#endif
 165:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	                               ) == NO_DESCRIPTOR)
 166:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	{
 167:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 		return;
 168:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	}
 169:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 
 170:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	#if defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
 171:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	if (MemoryAddressSpace == MEMSPACE_FLASH)
 172:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	{
 173:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 		if (((uint8_t)USB_ControlRequest.wValue > pgm_read_byte(&DevDescriptorPtr->NumberOfConfigurations
 174:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 		  return;
 175:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	}
 176:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	else if (MemoryAddressSpace == MEMSPACE_EEPROM)
 177:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	{
 178:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 		if (((uint8_t)USB_ControlRequest.wValue > eeprom_read_byte(&DevDescriptorPtr->NumberOfConfigurati
 179:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 		  return;
 180:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	}
 181:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	else
 182:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	{
 183:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 		if ((uint8_t)USB_ControlRequest.wValue > DevDescriptorPtr->NumberOfConfigurations)
 184:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 		  return;
 185:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	}
 186:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	#else
 187:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	if ((uint8_t)USB_ControlRequest.wValue > DevDescriptorPtr->NumberOfConfigurations)
 188:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	  return;
 189:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	#endif
 190:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	#endif
 191:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 
 192:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	Endpoint_ClearSETUP();
 193:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 
 194:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
 195:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 
 196:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	Endpoint_ClearStatusStage();
 197:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 
 198:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	if (USB_Device_ConfigurationNumber)
 199:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	  USB_DeviceState = DEVICE_STATE_Configured;
 200:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	else
 201:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 202:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 
 203:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	EVENT_USB_Device_ConfigurationChanged();
 204:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** }
 205:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 
 206:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** static void USB_Device_GetConfiguration(void)
 207:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** {
 208:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	Endpoint_ClearSETUP();
 209:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 
 210:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	Endpoint_Write_8(USB_Device_ConfigurationNumber);
 211:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	Endpoint_ClearIN();
 212:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 
 213:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	Endpoint_ClearStatusStage();
 214:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** }
 215:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 
 216:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** #if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
 217:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** static void USB_Device_GetInternalSerialDescriptor(void)
 218:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** {
 219:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	struct
 220:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	{
 221:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 		USB_Descriptor_Header_t Header;
 222:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
 223:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	} SignatureDescriptor;
 224:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 
 225:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	SignatureDescriptor.Header.Type = DTYPE_String;
 226:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
 227:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 
 228:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);
 229:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 
 230:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	Endpoint_ClearSETUP();
 231:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 
 232:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
 233:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	Endpoint_ClearOUT();
 234:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** }
 235:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** #endif
 236:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 
 237:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** static void USB_Device_GetDescriptor(void)
 238:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** {
 239:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	const void* DescriptorPointer;
 240:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	uint16_t    DescriptorSize;
 241:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 
 242:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	#if defined(ARCH_HAS_MULTI_ADDRESS_SPACE) && \
 243:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIP
 244:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	uint8_t DescriptorAddressSpace;
 245:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	#endif
 246:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 
 247:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
 248:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
 249:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	{
 250:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 		USB_Device_GetInternalSerialDescriptor();
 251:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 		return;
 252:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	}
 253:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	#endif
 254:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 
 255:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIn
 256:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	                                                 &DescriptorPointer
 257:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	#if defined(ARCH_HAS_MULTI_ADDRESS_SPACE) && \
 258:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIP
 259:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	                                                 , &DescriptorAddressSpace
 260:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	#endif
 261:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 													 )) == NO_DESCRIPTOR)
 262:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	{
 263:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 		return;
 264:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	}
 265:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 
 266:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	Endpoint_ClearSETUP();
 267:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 
 268:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
 269:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
 270:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	#elif defined(USE_EEPROM_DESCRIPTORS)
 271:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
 272:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	#elif defined(USE_FLASH_DESCRIPTORS)
 273:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
 274:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	#else
 275:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	if (DescriptorAddressSpace == MEMSPACE_FLASH)
 276:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	  Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
 277:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	else if (DescriptorAddressSpace == MEMSPACE_EEPROM)
 278:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	  Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
 279:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	else
 280:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	  Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
 281:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	#endif
 282:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 
 283:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	Endpoint_ClearOUT();
 284:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** }
 285:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 
 286:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** static void USB_Device_GetStatus(void)
 287:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** {
 288:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	uint8_t CurrentStatus = 0;
 132               		.loc 1 288 0 is_stmt 1
 133 0078 8091 0000 		lds r24,USB_Device_CurrentlySelfPowered
 134               	.LVL6:
 135               	.LBB184:
 136               	.LBB185:
 289:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 
 290:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	switch (USB_ControlRequest.bmRequestType)
 291:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	{
 292:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 		#if !defined(NO_DEVICE_SELF_POWER) || !defined(NO_DEVICE_REMOTE_WAKEUP)
 293:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE):
 294:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 			#if !defined(NO_DEVICE_SELF_POWER)
 295:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 			if (USB_Device_CurrentlySelfPowered)
 296:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
 297:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 			#endif
 298:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 
 299:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
 300:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 			if (USB_Device_RemoteWakeupEnabled)
 137               		.loc 1 300 0
 138 007c 9091 0000 		lds r25,USB_Device_RemoteWakeupEnabled
 139 0080 9923      		tst r25
 140 0082 01F0      		breq .L13
 301:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
 141               		.loc 1 301 0
 142 0084 8260      		ori r24,lo8(2)
 143               	.LVL7:
 144 0086 00C0      		rjmp .L13
 145               	.LVL8:
 146               	.L12:
 147               	.LBE185:
 302:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 			#endif
 303:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 			break;
 304:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 		#endif
 305:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 		#if !defined(CONTROL_ONLY_DEVICE)
 306:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
 307:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 148               		.loc 1 307 0
 149 0088 8091 0000 		lds r24,USB_ControlRequest+4
 150 008c 9091 0000 		lds r25,USB_ControlRequest+4+1
 151               	.LVL9:
 152 0090 8F70      		andi r24,15
 153 0092 9927      		clr r25
 154               	.LBB196:
 155               	.LBB186:
 156               	.LBB187:
 330:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UENUM = EndpointNumber;
 157               		.loc 2 330 0
 158 0094 8093 E900 		sts 233,r24
 159               	.LBE187:
 160               	.LBE186:
 161               	.LBB188:
 162               	.LBB189:
 573:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UECONX & (1 << STALLRQ)) ? true : false);
 163               		.loc 2 573 0
 164 0098 8091 EB00 		lds r24,235
 165 009c 85FB      		bst r24,5
 166 009e 8827      		clr r24
 167 00a0 80F9      		bld r24,0
 168               	.LVL10:
 169               	.LBE189:
 170               	.LBE188:
 171               	.LBB190:
 172               	.LBB191:
 330:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UENUM = EndpointNumber;
 173               		.loc 2 330 0
 174 00a2 1092 E900 		sts 233,__zero_reg__
 175               	.LVL11:
 176               	.L13:
 177               	.LBE191:
 178               	.LBE190:
 179               	.LBB192:
 180               	.LBB193:
 504:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UEINTX &= ~(1 << RXSTPI);
 181               		.loc 2 504 0
 182 00a6 9091 E800 		lds r25,232
 183 00aa 977F      		andi r25,lo8(-9)
 184 00ac 9093 E800 		sts 232,r25
 185               	.LVL12:
 186               	.LBE193:
 187               	.LBE192:
 188               	.LBB194:
 189               	.LBB195:
 613:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 614:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 615:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Writes one byte to the currently selected endpoint's bank, for IN direction endpoints.
 616:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 617:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPrimitiveRW_AVR8
 618:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 619:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
 620:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 621:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
 622:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_Write_8(const uint8_t Data)
 623:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 624:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UEDATX = Data;
 625:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 626:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 627:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Discards one byte from the currently selected endpoint's bank, for OUT direction endpoints.
 628:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 629:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPrimitiveRW_AVR8
 630:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 631:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_Discard_8(void) ATTR_ALWAYS_INLINE;
 632:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_Discard_8(void)
 633:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 634:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				uint8_t Dummy;
 635:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 636:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				Dummy = UEDATX;
 637:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 638:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				(void)Dummy;
 639:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 640:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 641:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Reads two bytes from the currently selected endpoint's bank in little endian format, for OUT
 642:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  direction endpoints.
 643:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 644:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPrimitiveRW_AVR8
 645:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 646:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Next two bytes in the currently selected endpoint's FIFO buffer.
 647:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 648:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint16_t Endpoint_Read_16_LE(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 649:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint16_t Endpoint_Read_16_LE(void)
 650:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 651:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				union
 652:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				{
 653:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					uint16_t Value;
 654:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					uint8_t  Bytes[2];
 655:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				} Data;
 656:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 657:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				Data.Bytes[0] = UEDATX;
 658:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				Data.Bytes[1] = UEDATX;
 659:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 660:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return Data.Value;
 661:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 662:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 663:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Reads two bytes from the currently selected endpoint's bank in big endian format, for OUT
 664:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  direction endpoints.
 665:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 666:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPrimitiveRW_AVR8
 667:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 668:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Next two bytes in the currently selected endpoint's FIFO buffer.
 669:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 670:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint16_t Endpoint_Read_16_BE(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 671:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint16_t Endpoint_Read_16_BE(void)
 672:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 673:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				union
 674:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				{
 675:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					uint16_t Value;
 676:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					uint8_t  Bytes[2];
 677:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				} Data;
 678:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 679:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				Data.Bytes[1] = UEDATX;
 680:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				Data.Bytes[0] = UEDATX;
 681:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 682:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return Data.Value;
 683:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 684:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 685:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Writes two bytes to the currently selected endpoint's bank in little endian format, for IN
 686:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  direction endpoints.
 687:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 688:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPrimitiveRW_AVR8
 689:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 690:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
 691:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 692:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
 693:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_Write_16_LE(const uint16_t Data)
 694:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 695:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UEDATX = (Data & 0xFF);
 190               		.loc 2 695 0
 191 00b0 8093 F100 		sts 241,r24
 696:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UEDATX = (Data >> 8);
 192               		.loc 2 696 0
 193 00b4 1092 F100 		sts 241,__zero_reg__
 194 00b8 00C0      		rjmp .L78
 195               	.LVL13:
 196               	.L5:
 197               	.LBE195:
 198               	.LBE194:
 199               	.LBE196:
 200               	.LBE184:
  82:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 201               		.loc 1 82 0
 202 00ba 8823      		tst r24
 203 00bc 01F0      		breq .L14
  82:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 204               		.loc 1 82 0 is_stmt 0 discriminator 1
 205 00be 8230      		cpi r24,lo8(2)
 206 00c0 01F0      		breq .+2
 207 00c2 00C0      		rjmp .L3
 208               	.L14:
 209               	.LBB197:
 308:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 
 309:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 			CurrentStatus = Endpoint_IsStalled();
 310:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 
 311:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 			Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
 312:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 
 313:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 			break;
 314:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 		#endif
 315:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 		default:
 316:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 			return;
 317:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	}
 318:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 
 319:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	Endpoint_ClearSETUP();
 320:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 
 321:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	Endpoint_Write_16_LE(CurrentStatus);
 322:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	Endpoint_ClearIN();
 323:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 
 324:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	Endpoint_ClearStatusStage();
 325:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** }
 326:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 
 327:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** static void USB_Device_ClearSetFeature(void)
 328:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** {
 329:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
 210               		.loc 1 329 0 is_stmt 1
 211 00c4 8F71      		andi r24,lo8(31)
 212               	.LVL14:
 213               	.LBB198:
 214 00c6 01F0      		breq .L15
 215 00c8 8230      		cpi r24,lo8(2)
 216 00ca 01F0      		breq .+2
 217 00cc 00C0      		rjmp .L3
 218 00ce 00C0      		rjmp .L16
 219               	.L15:
 330:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	{
 331:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
 332:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 		case REQREC_DEVICE:
 333:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
 220               		.loc 1 333 0
 221 00d0 8091 0000 		lds r24,USB_ControlRequest+2
 222 00d4 8130      		cpi r24,lo8(1)
 223 00d6 01F0      		breq .+2
 224 00d8 00C0      		rjmp .L3
 334:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
 225               		.loc 1 334 0
 226 00da 9330      		cpi r25,lo8(3)
 227 00dc 01F0      		breq .L17
 228 00de 80E0      		ldi r24,0
 229               	.L17:
 230 00e0 8093 0000 		sts USB_Device_RemoteWakeupEnabled,r24
 231 00e4 00C0      		rjmp .L18
 232               	.L16:
 335:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 			else
 336:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 			  return;
 337:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 
 338:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 			break;
 339:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 		#endif
 340:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 		#if !defined(CONTROL_ONLY_DEVICE)
 341:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 		case REQREC_ENDPOINT:
 342:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
 233               		.loc 1 342 0
 234 00e6 8091 0000 		lds r24,USB_ControlRequest+2
 235 00ea 8111      		cpse r24,__zero_reg__
 236 00ec 00C0      		rjmp .L18
 237               	.LBE198:
 343:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 			{
 344:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 238               		.loc 1 344 0
 239 00ee 8091 0000 		lds r24,USB_ControlRequest+4
 240 00f2 9091 0000 		lds r25,USB_ControlRequest+4+1
 241 00f6 8F70      		andi r24,15
 242 00f8 9927      		clr r25
 243               	.LVL15:
 244               	.LBB216:
 245               	.LBB199:
 345:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 
 346:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 				if (EndpointIndex == ENDPOINT_CONTROLEP)
 246               		.loc 1 346 0
 247 00fa 0097      		sbiw r24,0
 248 00fc 01F4      		brne .+2
 249 00fe 00C0      		rjmp .L3
 250               	.LBB200:
 251               	.LBB201:
 330:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UENUM = EndpointNumber;
 252               		.loc 2 330 0
 253 0100 8093 E900 		sts 233,r24
 254               	.LBE201:
 255               	.LBE200:
 256               	.LBB202:
 257               	.LBB203:
 373:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UECONX & (1 << EPEN)) ? true : false);
 258               		.loc 2 373 0
 259 0104 2091 EB00 		lds r18,235
 260               	.LBE203:
 261               	.LBE202:
 347:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 				  return;
 348:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 
 349:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 				Endpoint_SelectEndpoint(EndpointIndex);
 350:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 
 351:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 				if (Endpoint_IsEnabled())
 262               		.loc 1 351 0
 263 0108 20FF      		sbrs r18,0
 264 010a 00C0      		rjmp .L18
 352:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 				{
 353:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 					if (USB_ControlRequest.bRequest == REQ_SetFeature)
 265               		.loc 1 353 0
 266 010c 2091 0000 		lds r18,USB_ControlRequest+1
 267 0110 2330      		cpi r18,lo8(3)
 268 0112 01F4      		brne .L21
 269               	.LBB204:
 270               	.LBB205:
 551:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX |= (1 << STALLRQ);
 271               		.loc 2 551 0
 272 0114 8091 EB00 		lds r24,235
 273               	.LVL16:
 274 0118 8062      		ori r24,lo8(32)
 275 011a 00C0      		rjmp .L75
 276               	.LVL17:
 277               	.L21:
 278               	.LBE205:
 279               	.LBE204:
 280               	.LBB206:
 281               	.LBB207:
 561:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX |= (1 << STALLRQC);
 282               		.loc 2 561 0
 283 011c 9091 EB00 		lds r25,235
 284 0120 9061      		ori r25,lo8(16)
 285 0122 9093 EB00 		sts 235,r25
 286               	.LBE207:
 287               	.LBE206:
 288               	.LBB208:
 289               	.LBB209:
 342:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UERST = (1 << EndpointNumber);
 290               		.loc 2 342 0
 291 0126 21E0      		ldi r18,lo8(1)
 292 0128 30E0      		ldi r19,0
 293 012a 00C0      		rjmp 2f
 294               		1:
 295 012c 220F      		lsl r18
 296               		2:
 297 012e 8A95      		dec r24
 298 0130 02F4      		brpl 1b
 299 0132 2093 EA00 		sts 234,r18
 343:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UERST = 0;
 300               		.loc 2 343 0
 301 0136 1092 EA00 		sts 234,__zero_reg__
 302               	.LBE209:
 303               	.LBE208:
 304               	.LBB210:
 305               	.LBB211:
 580:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX |= (1 << RSTDT);
 306               		.loc 2 580 0
 307 013a 8091 EB00 		lds r24,235
 308               	.LVL18:
 309 013e 8860      		ori r24,lo8(8)
 310               	.L75:
 311 0140 8093 EB00 		sts 235,r24
 312               	.LVL19:
 313               	.L18:
 314               	.LBE211:
 315               	.LBE210:
 316               	.LBE199:
 317               	.LBB212:
 318               	.LBB213:
 330:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UENUM = EndpointNumber;
 319               		.loc 2 330 0
 320 0144 1092 E900 		sts 233,__zero_reg__
 321               	.LBE213:
 322               	.LBE212:
 323               	.LBB214:
 324               	.LBB215:
 504:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UEINTX &= ~(1 << RXSTPI);
 325               		.loc 2 504 0
 326 0148 8091 E800 		lds r24,232
 327 014c 877F      		andi r24,lo8(-9)
 328               	.LVL20:
 329               	.L76:
 330 014e 8093 E800 		sts 232,r24
 331               	.LBE215:
 332               	.LBE214:
 354:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 					{
 355:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 						Endpoint_StallTransaction();
 356:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 					}
 357:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 					else
 358:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 					{
 359:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 						Endpoint_ClearStall();
 360:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 						Endpoint_ResetEndpoint(EndpointIndex);
 361:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 						Endpoint_ResetDataToggle();
 362:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 					}
 363:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 				}
 364:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 			}
 365:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 
 366:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 			break;
 367:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 		#endif
 368:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 		default:
 369:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 			return;
 370:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	}
 371:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 
 372:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
 373:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 
 374:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	Endpoint_ClearSETUP();
 375:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 
 376:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	Endpoint_ClearStatusStage();
 333               		.loc 1 376 0
 334 0152 0E94 0000 		call Endpoint_ClearStatusStage
 335               	.LVL21:
 336 0156 00C0      		rjmp .L3
 337               	.LVL22:
 338               	.L6:
 339               	.LBE216:
 340               	.LBE197:
  90:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 341               		.loc 1 90 0
 342 0158 8111      		cpse r24,__zero_reg__
 343 015a 00C0      		rjmp .L3
 344               	.LBB217:
 124:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	uint8_t    DeviceAddress    = (USB_ControlRequest.wValue & 0x7F);
 345               		.loc 1 124 0
 346 015c 0091 0000 		lds r16,USB_ControlRequest+2
 347 0160 1091 0000 		lds r17,USB_ControlRequest+2+1
 348 0164 0F77      		andi r16,127
 349 0166 1127      		clr r17
 350               	.LBB218:
 351 0168 E02E      		mov r14,r16
 352               	.LVL23:
 353               	.LBB219:
 354               	.LBB220:
 355               		.file 3 "../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h"
   1:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** /*
   2:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h ****              LUFA Library
   3:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h ****      Copyright (C) Dean Camera, 2012.
   4:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 
   5:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h ****   dean [at] fourwalledcubicle [dot] com
   6:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h ****            www.lufa-lib.org
   7:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** */
   8:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 
   9:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** /*
  10:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h ****   Copyright 2012  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 
  12:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h ****   Permission to use, copy, modify, distribute, and sell this
  13:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h ****   software and its documentation for any purpose is hereby granted
  14:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h ****   without fee, provided that the above copyright notice appear in
  15:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h ****   all copies and that both that the copyright notice and this
  16:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h ****   permission notice and warranty disclaimer appear in supporting
  17:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h ****   documentation, and that the name of the author not be used in
  18:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h ****   advertising or publicity pertaining to distribution of the
  19:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h ****   software without specific, written prior permission.
  20:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 
  21:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h ****   The author disclaim all warranties with regard to this
  22:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h ****   software, including all implied warranties of merchantability
  23:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h ****   and fitness.  In no event shall the author be liable for any
  24:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h ****   special, indirect or consequential damages or any damages
  25:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h ****   whatsoever resulting from loss of use, data or profits, whether
  26:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h ****   in an action of contract, negligence or other tortious action,
  27:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h ****   arising out of or in connection with the use or performance of
  28:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h ****   this software.
  29:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** */
  30:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 
  31:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** /** \file
  32:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h ****  *  \brief Common library convenience headers, macros and functions.
  33:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h ****  *
  34:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h ****  *  \copydetails Group_Common
  35:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h ****  */
  36:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 
  37:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** /** \defgroup Group_Common Common Utility Headers - LUFA/Drivers/Common/Common.h
  38:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h ****  *  \brief Common library convenience headers, macros and functions.
  39:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h ****  *
  40:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h ****  *  Common utility headers containing macros, functions, enums and types which are common to all
  41:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h ****  *  aspects of the library.
  42:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h ****  *
  43:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h ****  *  @{
  44:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h ****  */
  45:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 
  46:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** /** \defgroup Group_GlobalInt Global Interrupt Macros
  47:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h ****  *  \brief Convenience macros for the management of interrupts globally within the device.
  48:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h ****  *
  49:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h ****  *  Macros and functions to create and control global interrupts within the device.
  50:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h ****  */
  51:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 
  52:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** #ifndef __LUFA_COMMON_H__
  53:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** #define __LUFA_COMMON_H__
  54:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 
  55:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 	/* Macros: */
  56:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 		#define __INCLUDE_FROM_COMMON_H
  57:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 
  58:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 	/* Includes: */
  59:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 		#include <stdint.h>
  60:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 		#include <stdbool.h>
  61:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 		#include <string.h>
  62:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 		#include <stddef.h>
  63:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 
  64:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 		#if defined(USE_LUFA_CONFIG_HEADER)
  65:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			#include "LUFAConfig.h"
  66:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 		#endif
  67:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 
  68:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 		#include "Architectures.h"
  69:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 		#include "BoardTypes.h"
  70:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 		#include "ArchitectureSpecific.h"
  71:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 		#include "CompilerSpecific.h"
  72:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 		#include "Attributes.h"
  73:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 
  74:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 	/* Enable C linkage for C++ Compilers: */
  75:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 		#if defined(__cplusplus)
  76:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			extern "C" {
  77:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 		#endif
  78:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 
  79:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 	/* Architecture specific utility includes: */
  80:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 		#if defined(__DOXYGEN__)
  81:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			/** Type define for an unsigned integer the same width as the selected architecture's machine re
  82:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			 *  This is distinct from the non-specific standard int data type, whose width is machine depend
  83:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			 *  which may not reflect the actual machine register width on some targets (e.g. AVR8).
  84:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			 */
  85:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			typedef MACHINE_REG_t uint_reg_t;
  86:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 		#elif (ARCH == ARCH_AVR8)
  87:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			#include <avr/io.h>
  88:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			#include <avr/interrupt.h>
  89:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			#include <avr/pgmspace.h>
  90:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			#include <avr/eeprom.h>
  91:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			#include <avr/boot.h>
  92:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			#include <math.h>
  93:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			#include <util/delay.h>
  94:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 
  95:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			typedef uint8_t uint_reg_t;
  96:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 
  97:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			#define ARCH_HAS_EEPROM_ADDRESS_SPACE
  98:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			#define ARCH_HAS_FLASH_ADDRESS_SPACE
  99:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			#define ARCH_HAS_MULTI_ADDRESS_SPACE
 100:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			#define ARCH_LITTLE_ENDIAN
 101:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 
 102:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			#include "Endianness.h"
 103:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 		#elif (ARCH == ARCH_UC3)
 104:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			#include <avr32/io.h>
 105:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 
 106:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			// === TODO: Find abstracted way to handle these ===
 107:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			#define PROGMEM                  const
 108:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			#define pgm_read_byte(x)         *x
 109:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			#define memcmp_P(...)            memcmp(__VA_ARGS__)
 110:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			#define memcpy_P(...)            memcpy(__VA_ARGS__)
 111:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			// =================================================
 112:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 
 113:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			typedef uint32_t uint_reg_t;
 114:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 
 115:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			#define ARCH_BIG_ENDIAN
 116:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 
 117:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			#include "Endianness.h"
 118:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 		#elif (ARCH == ARCH_XMEGA)
 119:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			#include <avr/io.h>
 120:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			#include <avr/interrupt.h>
 121:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			#include <avr/pgmspace.h>
 122:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			#include <avr/eeprom.h>
 123:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			#include <math.h>
 124:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			#include <util/delay.h>
 125:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 
 126:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			typedef uint8_t uint_reg_t;
 127:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 
 128:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			#define ARCH_HAS_EEPROM_ADDRESS_SPACE
 129:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			#define ARCH_HAS_FLASH_ADDRESS_SPACE
 130:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			#define ARCH_HAS_MULTI_ADDRESS_SPACE
 131:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			#define ARCH_LITTLE_ENDIAN
 132:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 
 133:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			#include "Endianness.h"
 134:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 		#else
 135:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			#error Unknown device architecture specified.
 136:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 		#endif
 137:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 
 138:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 	/* Public Interface - May be used in end-application: */
 139:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 		/* Macros: */
 140:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			/** Macro for encasing other multi-statement macros. This should be used along with an opening b
 141:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			 *  before the start of any multi-statement macro, so that the macros contents as a whole are tr
 142:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			 *  as a discrete block and not as a list of separate statements which may cause problems when u
 143:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			 *  a block (such as inline \c if statements).
 144:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			 */
 145:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			#define MACROS                  do
 146:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 
 147:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			/** Macro for encasing other multi-statement macros. This should be used along with a preceding 
 148:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			 *  brace at the end of any multi-statement macro, so that the macros contents as a whole are tr
 149:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			 *  as a discrete block and not as a list of separate statements which may cause problems when u
 150:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			 *  a block (such as inline \c if statements).
 151:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			 */
 152:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			#define MACROE                  while (0)
 153:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 
 154:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			/** Convenience macro to determine the larger of two values.
 155:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			 *
 156:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			 *  \note This macro should only be used with operands that do not have side effects from being 
 157:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			 *        multiple times.
 158:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			 *
 159:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			 *  \param[in] x  First value to compare
 160:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			 *  \param[in] y  First value to compare
 161:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			 *
 162:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			 *  \return The larger of the two input parameters
 163:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			 */
 164:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			#if !defined(MAX) || defined(__DOXYGEN__)
 165:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				#define MAX(x, y)               (((x) > (y)) ? (x) : (y))
 166:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			#endif
 167:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 
 168:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			/** Convenience macro to determine the smaller of two values.
 169:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			 *
 170:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			 *  \note This macro should only be used with operands that do not have side effects from being 
 171:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			 *        multiple times.
 172:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			 *
 173:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			 *  \param[in] x  First value to compare
 174:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			 *  \param[in] y  First value to compare
 175:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			 *
 176:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			 *  \return The smaller of the two input parameters
 177:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			 */
 178:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			#if !defined(MIN) || defined(__DOXYGEN__)
 179:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				#define MIN(x, y)               (((x) < (y)) ? (x) : (y))
 180:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			#endif
 181:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 
 182:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			#if !defined(STRINGIFY) || defined(__DOXYGEN__)
 183:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				/** Converts the given input into a string, via the C Preprocessor. This macro puts literal quo
 184:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				 *  marks around the input, converting the source into a string literal.
 185:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				 *
 186:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				 *  \param[in] x  Input to convert into a string literal.
 187:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				 *
 188:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				 *  \return String version of the input.
 189:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				 */
 190:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				#define STRINGIFY(x)            #x
 191:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 
 192:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				/** Converts the given input into a string after macro expansion, via the C Preprocessor. This 
 193:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				 *  literal quotation marks around the expanded input, converting the source into a string lite
 194:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				 *
 195:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				 *  \param[in] x  Input to expand and convert into a string literal.
 196:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				 *
 197:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				 *  \return String version of the expanded input.
 198:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				 */
 199:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				#define STRINGIFY_EXPANDED(x)   STRINGIFY(x)
 200:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			#endif
 201:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 
 202:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			#if !defined(ISR) || defined(__DOXYGEN__)
 203:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				/** Macro for the definition of interrupt service routines, so that the compiler can insert the
 204:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				 *  prologue and epilogue code to properly manage the interrupt routine without affecting the m
 205:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				 *  state with unintentional side-effects.
 206:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				 *
 207:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				 *  Interrupt handlers written using this macro may still need to be registered with the microc
 208:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				 *  Interrupt Controller (if present) before they will properly handle incoming interrupt event
 209:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				 *
 210:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				 *  \note This macro is only supplied on some architectures, where the standard library does no
 211:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				 *        definition. If an existing definition exists, the alternative definition here will be
 212:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				 *
 213:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				 *  \ingroup Group_GlobalInt
 214:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				 *
 215:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				 *  \param Name  Unique name of the interrupt service routine.
 216:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				 */
 217:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				#define ISR(Name, ...)          void Name (void) __attribute__((__interrupt__)) __VA_ARGS__; vo
 218:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			#endif
 219:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 
 220:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 		/* Inline Functions: */
 221:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			/** Function to reverse the individual bits in a byte - i.e. bit 7 is moved to bit 0, bit 6 to b
 222:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			 *  etc.
 223:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			 *
 224:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			 *  \param[in] Byte  Byte of data whose bits are to be reversed.
 225:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			 *
 226:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			 *  \return Input data with the individual bits reversed (mirrored).
 227:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			 */
 228:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			static inline uint8_t BitReverse(uint8_t Byte) ATTR_WARN_UNUSED_RESULT ATTR_CONST;
 229:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			static inline uint8_t BitReverse(uint8_t Byte)
 230:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			{
 231:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				Byte = (((Byte & 0xF0) >> 4) | ((Byte & 0x0F) << 4));
 232:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				Byte = (((Byte & 0xCC) >> 2) | ((Byte & 0x33) << 2));
 233:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				Byte = (((Byte & 0xAA) >> 1) | ((Byte & 0x55) << 1));
 234:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 
 235:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				return Byte;
 236:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			}
 237:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 
 238:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			/** Function to perform a blocking delay for a specified number of milliseconds. The actual dela
 239:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			 *  at a minimum the specified number of milliseconds, however due to loop overhead and internal
 240:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			 *  may be slightly higher.
 241:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			 *
 242:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			 *  \param[in] Milliseconds  Number of milliseconds to delay
 243:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			 */
 244:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			static inline void Delay_MS(uint16_t Milliseconds) ATTR_ALWAYS_INLINE;
 245:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			static inline void Delay_MS(uint16_t Milliseconds)
 246:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			{
 247:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				#if (ARCH == ARCH_AVR8)
 248:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				if (GCC_IS_COMPILE_CONST(Milliseconds))
 249:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				{
 250:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 					_delay_ms(Milliseconds);
 251:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				}
 252:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				else
 253:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				{
 254:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 					while (Milliseconds--)
 255:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 					  _delay_ms(1);
 256:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				}
 257:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				#elif (ARCH == ARCH_UC3)
 258:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				while (Milliseconds--)
 259:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				{
 260:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 					__builtin_mtsr(AVR32_COUNT, 0);
 261:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 					while ((uint32_t)__builtin_mfsr(AVR32_COUNT) < (F_CPU / 1000));
 262:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				}
 263:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				#elif (ARCH == ARCH_XMEGA)
 264:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				if (GCC_IS_COMPILE_CONST(Milliseconds))
 265:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				{
 266:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 					_delay_ms(Milliseconds);
 267:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				}
 268:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				else
 269:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				{
 270:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 					while (Milliseconds--)
 271:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 					  _delay_ms(1);
 272:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				}
 273:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				#endif
 274:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			}
 275:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 
 276:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			/** Retrieves a mask which contains the current state of the global interrupts for the device. T
 277:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			 *  value can be stored before altering the global interrupt enable state, before restoring the
 278:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			 *  flag(s) back to their previous values after a critical section using \ref SetGlobalInterrupt
 279:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			 *
 280:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			 *  \ingroup Group_GlobalInt
 281:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			 *
 282:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			 *  \return  Mask containing the current Global Interrupt Enable Mask bit(s).
 283:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			 */
 284:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			static inline uint_reg_t GetGlobalInterruptMask(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT
 285:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			static inline uint_reg_t GetGlobalInterruptMask(void)
 286:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			{
 287:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				GCC_MEMORY_BARRIER();
 356               		.loc 3 287 0
 288:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 
 289:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				#if (ARCH == ARCH_AVR8)
 290:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				return SREG;
 357               		.loc 3 290 0
 358 016a FFB6      		in r15,__SREG__
 359               	.LBE220:
 360               	.LBE219:
 361               	.LBB221:
 362               	.LBB222:
 291:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				#elif (ARCH == ARCH_UC3)
 292:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				return __builtin_mfsr(AVR32_SR);
 293:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				#elif (ARCH == ARCH_XMEGA)
 294:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				return SREG;
 295:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				#endif
 296:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 
 297:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				GCC_MEMORY_BARRIER();
 298:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			}
 299:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 
 300:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			/** Sets the global interrupt enable state of the microcontroller to the mask passed into the fu
 301:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			 *  This can be combined with \ref GetGlobalInterruptMask() to save and restore the Global Inter
 302:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			 *  Mask bit(s) of the device after a critical section has completed.
 303:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			 *
 304:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			 *  \ingroup Group_GlobalInt
 305:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			 *
 306:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			 *  \param[in] GlobalIntState  Global Interrupt Enable Mask value to use
 307:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			 */
 308:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState) ATTR_ALWAYS_INLINE;
 309:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
 310:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			{
 311:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				GCC_MEMORY_BARRIER();
 312:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 
 313:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				#if (ARCH == ARCH_AVR8)
 314:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				SREG = GlobalIntState;
 315:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				#elif (ARCH == ARCH_UC3)
 316:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				if (GlobalIntState & AVR32_SR_GM)
 317:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				  __builtin_ssrf(AVR32_SR_GM_OFFSET);
 318:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				else
 319:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				  __builtin_csrf(AVR32_SR_GM_OFFSET);
 320:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				#elif (ARCH == ARCH_XMEGA)
 321:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				SREG = GlobalIntState;
 322:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				#endif
 323:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 
 324:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				GCC_MEMORY_BARRIER();
 325:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			}
 326:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 
 327:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			/** Enables global interrupt handling for the device, allowing interrupts to be handled.
 328:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			 *
 329:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			 *  \ingroup Group_GlobalInt
 330:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			 */
 331:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			static inline void GlobalInterruptEnable(void) ATTR_ALWAYS_INLINE;
 332:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			static inline void GlobalInterruptEnable(void)
 333:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			{
 334:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				GCC_MEMORY_BARRIER();
 335:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 
 336:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				#if (ARCH == ARCH_AVR8)
 337:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				sei();
 338:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				#elif (ARCH == ARCH_UC3)
 339:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				__builtin_csrf(AVR32_SR_GM_OFFSET);
 340:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				#elif (ARCH == ARCH_XMEGA)
 341:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				sei();
 342:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				#endif
 343:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 
 344:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				GCC_MEMORY_BARRIER();
 345:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			}
 346:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 
 347:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			/** Disabled global interrupt handling for the device, preventing interrupts from being handled.
 348:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			 *
 349:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			 *  \ingroup Group_GlobalInt
 350:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			 */
 351:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			static inline void GlobalInterruptDisable(void) ATTR_ALWAYS_INLINE;
 352:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			static inline void GlobalInterruptDisable(void)
 353:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			{
 354:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				GCC_MEMORY_BARRIER();
 363               		.loc 3 354 0
 355:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 
 356:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				#if (ARCH == ARCH_AVR8)
 357:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				cli();
 364               		.loc 3 357 0
 365               	/* #APP */
 366               	 ;  357 "../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h" 1
 367 016c F894      		cli
 368               	 ;  0 "" 2
 358:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				#elif (ARCH == ARCH_UC3)
 359:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				__builtin_ssrf(AVR32_SR_GM_OFFSET);
 360:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				#elif (ARCH == ARCH_XMEGA)
 361:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				cli();
 362:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				#endif
 363:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 
 364:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				GCC_MEMORY_BARRIER();
 369               		.loc 3 364 0
 370               	/* #NOAPP */
 371               	.LBE222:
 372               	.LBE221:
 373               	.LBB223:
 374               	.LBB224:
 504:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UEINTX &= ~(1 << RXSTPI);
 375               		.loc 2 504 0
 376 016e 8091 E800 		lds r24,232
 377               	.LVL24:
 378 0172 877F      		andi r24,lo8(-9)
 379 0174 8093 E800 		sts 232,r24
 380               	.LBE224:
 381               	.LBE223:
 130:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	Endpoint_ClearStatusStage();
 382               		.loc 1 130 0
 383 0178 0E94 0000 		call Endpoint_ClearStatusStage
 384               	.LVL25:
 385               	.L22:
 386               	.LBB225:
 387               	.LBB226:
 467:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << TXINI)) ? true : false);
 388               		.loc 2 467 0
 389 017c 8091 E800 		lds r24,232
 390               	.LBE226:
 391               	.LBE225:
 132:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	while (!(Endpoint_IsINReady()));
 392               		.loc 1 132 0
 393 0180 80FF      		sbrs r24,0
 394 0182 00C0      		rjmp .L22
 395               	.LVL26:
 396               	.LBB227:
 397               	.LBB228:
 398               		.file 4 "../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h"
   1:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** /*
   2:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****              LUFA Library
   3:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****      Copyright (C) Dean Camera, 2012.
   4:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 
   5:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****   dean [at] fourwalledcubicle [dot] com
   6:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****            www.lufa-lib.org
   7:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** */
   8:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 
   9:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** /*
  10:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****   Copyright 2012  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 
  12:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****   Permission to use, copy, modify, distribute, and sell this
  13:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****   software and its documentation for any purpose is hereby granted
  14:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****   without fee, provided that the above copyright notice appear in
  15:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****   all copies and that both that the copyright notice and this
  16:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****   permission notice and warranty disclaimer appear in supporting
  17:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****   documentation, and that the name of the author not be used in
  18:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****   advertising or publicity pertaining to distribution of the
  19:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****   software without specific, written prior permission.
  20:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 
  21:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****   The author disclaim all warranties with regard to this
  22:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****   software, including all implied warranties of merchantability
  23:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****   and fitness.  In no event shall the author be liable for any
  24:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****   special, indirect or consequential damages or any damages
  25:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****   whatsoever resulting from loss of use, data or profits, whether
  26:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****   in an action of contract, negligence or other tortious action,
  27:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****   arising out of or in connection with the use or performance of
  28:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****   this software.
  29:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** */
  30:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 
  31:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** /** \file
  32:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****  *  \brief USB Device definitions for the AVR8 microcontrollers.
  33:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****  *  \copydetails Group_Device_AVR8
  34:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****  *
  35:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****  *  \note This file should not be included directly. It is automatically included as needed by the 
  36:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****  *        dispatch header located in LUFA/Drivers/USB/USB.h.
  37:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****  */
  38:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 
  39:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** /** \ingroup Group_Device
  40:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****  *  \defgroup Group_Device_AVR8 Device Management (AVR8)
  41:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****  *  \brief USB Device definitions for the AVR8 microcontrollers.
  42:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****  *
  43:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****  *  Architecture specific USB Device definitions for the Atmel 8-bit AVR microcontrollers.
  44:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****  *
  45:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****  *  @{
  46:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****  */
  47:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 
  48:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** #ifndef __USBDEVICE_AVR8_H__
  49:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** #define __USBDEVICE_AVR8_H__
  50:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 
  51:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 	/* Includes: */
  52:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 		#include "../../../../Common/Common.h"
  53:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 		#include "../USBController.h"
  54:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 		#include "../StdDescriptors.h"
  55:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 		#include "../USBInterrupt.h"
  56:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 		#include "../Endpoint.h"
  57:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 
  58:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 	/* Enable C linkage for C++ Compilers: */
  59:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 		#if defined(__cplusplus)
  60:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			extern "C" {
  61:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 		#endif
  62:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 
  63:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 	/* Preprocessor Checks: */
  64:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 		#if !defined(__INCLUDE_FROM_USB_DRIVER)
  65:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			#error Do not include this file directly. Include LUFA/Drivers/USB/USB.h instead.
  66:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 		#endif
  67:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 
  68:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 		#if (defined(USE_RAM_DESCRIPTORS) && defined(USE_EEPROM_DESCRIPTORS))
  69:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			#error USE_RAM_DESCRIPTORS and USE_EEPROM_DESCRIPTORS are mutually exclusive.
  70:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 		#endif
  71:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 
  72:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 		#if (defined(USE_FLASH_DESCRIPTORS) && defined(USE_EEPROM_DESCRIPTORS))
  73:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			#error USE_FLASH_DESCRIPTORS and USE_EEPROM_DESCRIPTORS are mutually exclusive.
  74:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 		#endif
  75:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 
  76:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 		#if (defined(USE_FLASH_DESCRIPTORS) && defined(USE_RAM_DESCRIPTORS))
  77:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			#error USE_FLASH_DESCRIPTORS and USE_RAM_DESCRIPTORS are mutually exclusive.
  78:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 		#endif
  79:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 
  80:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 	/* Public Interface - May be used in end-application: */
  81:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 		/* Macros: */
  82:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			/** \name USB Device Mode Option Masks */
  83:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			//@{
  84:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR) || defin
  85:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				/** Mask for the Options parameter of the \ref USB_Init() function. This indicates that the
  86:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 *  USB interface should be initialized in low speed (1.5Mb/s) mode.
  87:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 *
  88:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 *  \note Low Speed mode is not available on all USB AVR models.
  89:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 *        \n
  90:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 *
  91:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 *  \note Restrictions apply on the number, size and type of endpoints which can be used
  92:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 *        when running in low speed mode - refer to the USB 2.0 specification.
  93:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 */
  94:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				#define USB_DEVICE_OPT_LOWSPEED            (1 << 0)
  95:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			#endif
  96:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 
  97:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			/** Mask for the Options parameter of the \ref USB_Init() function. This indicates that the
  98:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			 *  USB interface should be initialized in full speed (12Mb/s) mode.
  99:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			 */
 100:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			#define USB_DEVICE_OPT_FULLSPEED               (0 << 0)
 101:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			//@}
 102:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 
 103:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			#if (!defined(NO_INTERNAL_SERIAL) && \
 104:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			     (defined(USB_SERIES_7_AVR) || defined(USB_SERIES_6_AVR) || \
 105:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			      defined(USB_SERIES_4_AVR) || defined(USB_SERIES_2_AVR) || \
 106:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				  defined(__DOXYGEN__)))
 107:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				/** String descriptor index for the device's unique serial number string descriptor within the 
 108:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 *  This unique serial number is used by the host to associate resources to the device (such as
 109:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 *  number allocations) to a device regardless of the port it is plugged in to on the host. Som
 110:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 *  a unique serial number internally, and setting the device descriptors serial number string 
 111:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 *  will cause it to use the internal serial number.
 112:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 *
 113:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 *  On unsupported devices, this will evaluate to \ref NO_DESCRIPTOR and so will force the host
 114:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 *  number for the device.
 115:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 */
 116:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				#define USE_INTERNAL_SERIAL            0xDC
 117:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 
 118:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				/** Length of the device's unique internal serial number, in bits, if present on the selected m
 119:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 *  model.
 120:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 */
 121:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				#define INTERNAL_SERIAL_LENGTH_BITS    80
 122:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 
 123:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				/** Start address of the internal serial number, in the appropriate address space, if present o
 124:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 *  model.
 125:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 */
 126:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				#define INTERNAL_SERIAL_START_ADDRESS  0x0E
 127:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			#else
 128:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				#define USE_INTERNAL_SERIAL            NO_DESCRIPTOR
 129:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 
 130:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				#define INTERNAL_SERIAL_LENGTH_BITS    0
 131:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				#define INTERNAL_SERIAL_START_ADDRESS  0
 132:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			#endif
 133:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 
 134:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 		/* Function Prototypes: */
 135:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			/** Sends a Remote Wakeup request to the host. This signals to the host that the device should
 136:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			 *  be taken out of suspended mode, and communications should resume.
 137:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			 *
 138:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			 *  Typically, this is implemented so that HID devices (mice, keyboards, etc.) can wake up the
 139:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			 *  host computer when the host has suspended all USB devices to enter a low power state.
 140:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			 *
 141:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			 *  \note This macro should only be used if the device has indicated to the host that it
 142:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			 *        supports the Remote Wakeup feature in the device descriptors, and should only be
 143:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			 *        issued if the host is currently allowing remote wakeup events from the device (i.e.,
 144:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			 *        the \ref USB_Device_RemoteWakeupEnabled flag is set). When the \c NO_DEVICE_REMOTE_WAK
 145:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			 *        compile time option is used, this macro is unavailable.
 146:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			 *        \n\n
 147:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			 *
 148:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			 *  \note The USB clock must be running for this function to operate. If the stack is initialize
 149:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			 *        the \ref USB_OPT_MANUAL_PLL option enabled, the user must ensure that the PLL is runni
 150:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			 *        before attempting to call this function.
 151:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			 *
 152:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			 *  \see \ref Group_StdDescriptors for more information on the RMWAKEUP feature and device descr
 153:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			 */
 154:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			void USB_Device_SendRemoteWakeup(void);
 155:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 
 156:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 		/* Inline Functions: */
 157:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			/** Returns the current USB frame number, when in device mode. Every millisecond the USB bus is 
 158:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			 *  the frame number is incremented by one.
 159:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			 *
 160:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			 *  \return Current USB frame number from the USB controller.
 161:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			 */
 162:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESUL
 163:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			static inline uint16_t USB_Device_GetFrameNumber(void)
 164:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			{
 165:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				return UDFNUM;
 166:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			}
 167:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 
 168:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			#if !defined(NO_SOF_EVENTS)
 169:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				/** Enables the device mode Start Of Frame events. When enabled, this causes the
 170:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 *  \ref EVENT_USB_Device_StartOfFrame() event to fire once per millisecond, synchronized to th
 171:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 *  at the start of each USB frame when enumerated in device mode.
 172:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 *
 173:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 *  \note Not available when the \c NO_SOF_EVENTS compile time token is defined.
 174:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 */
 175:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				static inline void USB_Device_EnableSOFEvents(void) ATTR_ALWAYS_INLINE;
 176:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				static inline void USB_Device_EnableSOFEvents(void)
 177:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				{
 178:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 					USB_INT_Enable(USB_INT_SOFI);
 179:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				}
 180:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 
 181:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				/** Disables the device mode Start Of Frame events. When disabled, this stops the firing of the
 182:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 *  \ref EVENT_USB_Device_StartOfFrame() event when enumerated in device mode.
 183:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 *
 184:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 *  \note Not available when the \c NO_SOF_EVENTS compile time token is defined.
 185:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 */
 186:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				static inline void USB_Device_DisableSOFEvents(void) ATTR_ALWAYS_INLINE;
 187:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				static inline void USB_Device_DisableSOFEvents(void)
 188:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				{
 189:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 					USB_INT_Disable(USB_INT_SOFI);
 190:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				}
 191:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			#endif
 192:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 
 193:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 	/* Private Interface - For use in library only: */
 194:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 	#if !defined(__DOXYGEN__)
 195:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 		/* Inline Functions: */
 196:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			#if defined(USB_DEVICE_OPT_LOWSPEED)
 197:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			static inline void USB_Device_SetLowSpeed(void) ATTR_ALWAYS_INLINE;
 198:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			static inline void USB_Device_SetLowSpeed(void)
 199:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			{
 200:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				UDCON |=  (1 << LSM);
 201:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			}
 202:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 
 203:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
 204:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			static inline void USB_Device_SetFullSpeed(void)
 205:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			{
 206:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				UDCON &= ~(1 << LSM);
 207:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			}
 208:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			#endif
 209:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 
 210:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
 211:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
 212:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			{
 213:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				uint8_t Temp = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
 399               		.loc 4 213 0
 400 0184 8091 E300 		lds r24,227
 401 0188 8078      		andi r24,lo8(-128)
 402 018a 802B      		or r24,r16
 403               	.LVL27:
 214:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 
 215:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				UDADDR = Temp;
 404               		.loc 4 215 0
 405 018c 8093 E300 		sts 227,r24
 216:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				UDADDR = Temp | (1 << ADDEN);
 406               		.loc 4 216 0
 407 0190 8068      		ori r24,lo8(-128)
 408               	.LVL28:
 409 0192 8093 E300 		sts 227,r24
 410               	.LBE228:
 411               	.LBE227:
 135:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
 412               		.loc 1 135 0
 413 0196 EE20      		tst r14
 414 0198 01F0      		breq .L34
 415 019a 83E0      		ldi r24,lo8(3)
 416               	.LVL29:
 417 019c 00C0      		rjmp .L23
 418               	.L34:
 419 019e 82E0      		ldi r24,lo8(2)
 420               	.L23:
 421               	.LVL30:
 422 01a0 8093 0000 		sts USB_DeviceState,r24
 423               	.LVL31:
 424               	.LBB229:
 425               	.LBB230:
 311:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				GCC_MEMORY_BARRIER();
 426               		.loc 3 311 0
 314:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				SREG = GlobalIntState;
 427               		.loc 3 314 0
 428 01a4 FFBE      		out __SREG__,r15
 324:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				GCC_MEMORY_BARRIER();
 429               		.loc 3 324 0
 430 01a6 00C0      		rjmp .L3
 431               	.LVL32:
 432               	.L7:
 433               	.LBE230:
 434               	.LBE229:
 435               	.LBE218:
 436               	.LBE217:
  95:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 437               		.loc 1 95 0
 438 01a8 8058      		subi r24,lo8(-(-128))
 439               	.LVL33:
 440 01aa 8230      		cpi r24,lo8(2)
 441 01ac 00F0      		brlo .+2
 442 01ae 00C0      		rjmp .L3
 443               	.LBB231:
 444               	.LBB232:
 248:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
 445               		.loc 1 248 0
 446 01b0 8091 0000 		lds r24,USB_ControlRequest+2
 447 01b4 9091 0000 		lds r25,USB_ControlRequest+2+1
 448 01b8 8C3D      		cpi r24,-36
 449 01ba 23E0      		ldi r18,3
 450 01bc 9207      		cpc r25,r18
 451 01be 01F4      		brne .L24
 452               	.LBB233:
 453               	.LBB234:
 225:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	SignatureDescriptor.Header.Type = DTYPE_String;
 454               		.loc 1 225 0
 455 01c0 83E0      		ldi r24,lo8(3)
 456 01c2 8A83      		std Y+2,r24
 226:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
 457               		.loc 1 226 0
 458 01c4 8AE2      		ldi r24,lo8(42)
 459 01c6 8983      		std Y+1,r24
 460               	.LVL34:
 461               	.LBB235:
 462               	.LBB236:
 463               	.LBB237:
 464               	.LBB238:
 287:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				GCC_MEMORY_BARRIER();
 465               		.loc 3 287 0
 290:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				return SREG;
 466               		.loc 3 290 0
 467 01c8 4FB7      		in r20,__SREG__
 468               	.LBE238:
 469               	.LBE237:
 470               	.LBB239:
 471               	.LBB240:
 354:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				GCC_MEMORY_BARRIER();
 472               		.loc 3 354 0
 357:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				cli();
 473               		.loc 3 357 0
 474               	/* #APP */
 475               	 ;  357 "../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h" 1
 476 01ca F894      		cli
 477               	 ;  0 "" 2
 478               		.loc 3 364 0
 479               	.LVL35:
 228:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);
 480               		.loc 1 228 0
 481               	/* #NOAPP */
 482 01cc DE01      		movw r26,r28
 483 01ce 1396      		adiw r26,3
 217:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			}
 218:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 
 219:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
 220:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			static inline bool USB_Device_IsAddressSet(void)
 221:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			{
 222:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				return (UDADDR & (1 << ADDEN));
 223:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			}
 224:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 
 225:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			#if (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
 226:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString) ATTR_NON_NULL_PTR_A
 227:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
 228:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			{
 229:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
 230:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				GlobalInterruptDisable();
 231:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 
 232:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
 233:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 
 234:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNu
 484               		.loc 4 234 0
 485 01d0 20E0      		ldi r18,0
 232:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
 486               		.loc 4 232 0
 487 01d2 3EE0      		ldi r19,lo8(14)
 488               	.LBE240:
 489               	.LBE239:
 490               	.LBB241:
 491               	.LBB242:
 492               	.LBB243:
 235:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				{
 236:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
 493               		.loc 4 236 0
 494 01d4 51E2      		ldi r21,lo8(33)
 495               	.LVL36:
 496               	.L28:
 497 01d6 E32F      		mov r30,r19
 498 01d8 F0E0      		ldi r31,0
 499               	/* #APP */
 500               	 ;  236 "../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h" 1
 501 01da 5093 5700 		sts 87, r21
 502 01de E491      		lpm r30, Z
 503               		
 504               	 ;  0 "" 2
 505               	.LVL37:
 506               	/* #NOAPP */
 507               	.LBE243:
 237:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 
 238:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 					if (SerialCharNum & 0x01)
 508               		.loc 4 238 0
 509 01e0 20FF      		sbrs r18,0
 510 01e2 00C0      		rjmp .L25
 239:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 					{
 240:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 						SerialByte >>= 4;
 511               		.loc 4 240 0
 512 01e4 E295      		swap r30
 513               	.LVL38:
 514 01e6 EF70      		andi r30,lo8(15)
 515               	.LVL39:
 241:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 						SigReadAddress++;
 516               		.loc 4 241 0
 517 01e8 3F5F      		subi r19,lo8(-(1))
 518               	.LVL40:
 519               	.L25:
 242:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 					}
 243:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 
 244:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 					SerialByte &= 0x0F;
 520               		.loc 4 244 0
 521 01ea EF70      		andi r30,lo8(15)
 522               	.LVL41:
 523 01ec 8E2F      		mov r24,r30
 524 01ee 90E0      		ldi r25,0
 245:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 
 246:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
 525               		.loc 4 246 0
 526 01f0 EA30      		cpi r30,lo8(10)
 527 01f2 00F0      		brlo .L26
 528 01f4 C796      		adiw r24,55
 529 01f6 00C0      		rjmp .L27
 530               	.LVL42:
 531               	.L26:
 532 01f8 C096      		adiw r24,48
 533               	.LVL43:
 534               	.L27:
 535 01fa 8D93      		st X+,r24
 536 01fc 9D93      		st X+,r25
 537               	.LBE242:
 234:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNu
 538               		.loc 4 234 0
 539 01fe 2F5F      		subi r18,lo8(-(1))
 540               	.LVL44:
 541 0200 2431      		cpi r18,lo8(20)
 542 0202 01F4      		brne .L28
 543               	.LVL45:
 544               	.LBE241:
 545               	.LBB244:
 546               	.LBB245:
 311:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				GCC_MEMORY_BARRIER();
 547               		.loc 3 311 0
 314:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				SREG = GlobalIntState;
 548               		.loc 3 314 0
 549 0204 4FBF      		out __SREG__,r20
 324:../LUFA-120219/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				GCC_MEMORY_BARRIER();
 550               		.loc 3 324 0
 551               	.LBE245:
 552               	.LBE244:
 553               	.LBE236:
 554               	.LBE235:
 555               	.LBB246:
 556               	.LBB247:
 504:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UEINTX &= ~(1 << RXSTPI);
 557               		.loc 2 504 0
 558 0206 8091 E800 		lds r24,232
 559 020a 877F      		andi r24,lo8(-9)
 560 020c 8093 E800 		sts 232,r24
 561               	.LBE247:
 562               	.LBE246:
 232:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
 563               		.loc 1 232 0
 564 0210 6AE2      		ldi r22,lo8(42)
 565 0212 70E0      		ldi r23,0
 566 0214 CE01      		movw r24,r28
 567 0216 0196      		adiw r24,1
 568 0218 0E94 0000 		call Endpoint_Write_Control_Stream_LE
 569               	.LVL46:
 570 021c 00C0      		rjmp .L77
 571               	.LVL47:
 572               	.L24:
 573               	.LBE234:
 574               	.LBE233:
 255:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIn
 575               		.loc 1 255 0
 576 021e AE01      		movw r20,r28
 577 0220 455D      		subi r20,-43
 578 0222 5F4F      		sbci r21,-1
 579 0224 6091 0000 		lds r22,USB_ControlRequest+4
 580 0228 0E94 0000 		call CALLBACK_USB_GetDescriptor
 581               	.LVL48:
 582 022c 0097      		sbiw r24,0
 583 022e 01F0      		breq .L3
 584               	.LBB248:
 585               	.LBB249:
 504:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UEINTX &= ~(1 << RXSTPI);
 586               		.loc 2 504 0
 587 0230 2091 E800 		lds r18,232
 588 0234 277F      		andi r18,lo8(-9)
 589 0236 2093 E800 		sts 232,r18
 590               	.LBE249:
 591               	.LBE248:
 273:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
 592               		.loc 1 273 0
 593 023a BC01      		movw r22,r24
 594               	.LVL49:
 595 023c 8BA5      		ldd r24,Y+43
 596 023e 9CA5      		ldd r25,Y+44
 597               	.LVL50:
 598 0240 0E94 0000 		call Endpoint_Write_Control_PStream_LE
 599               	.LVL51:
 600               	.L77:
 601               	.LBB250:
 602               	.LBB251:
 531:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 603               		.loc 2 531 0
 604 0244 8091 E800 		lds r24,232
 605 0248 8B77      		andi r24,lo8(123)
 606 024a 8093 E800 		sts 232,r24
 607 024e 00C0      		rjmp .L3
 608               	.LVL52:
 609               	.L8:
 610               	.LBE251:
 611               	.LBE250:
 612               	.LBE232:
 613               	.LBE231:
 103:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
 614               		.loc 1 103 0
 615 0250 8038      		cpi r24,lo8(-128)
 616 0252 01F4      		brne .L3
 617               	.LBB252:
 618               	.LBB253:
 619               	.LBB254:
 620               	.LBB255:
 504:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UEINTX &= ~(1 << RXSTPI);
 621               		.loc 2 504 0
 622 0254 8091 E800 		lds r24,232
 623               	.LVL53:
 624 0258 877F      		andi r24,lo8(-9)
 625 025a 8093 E800 		sts 232,r24
 626               	.LBE255:
 627               	.LBE254:
 210:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	Endpoint_Write_8(USB_Device_ConfigurationNumber);
 628               		.loc 1 210 0
 629 025e 8091 0000 		lds r24,USB_Device_ConfigurationNumber
 630               	.LVL54:
 631               	.LBB256:
 632               	.LBB257:
 624:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UEDATX = Data;
 633               		.loc 2 624 0
 634 0262 8093 F100 		sts 241,r24
 635               	.LVL55:
 636               	.L78:
 637               	.LBE257:
 638               	.LBE256:
 639               	.LBB258:
 640               	.LBB259:
 516:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 641               		.loc 2 516 0
 642 0266 8091 E800 		lds r24,232
 643 026a 8E77      		andi r24,lo8(126)
 644 026c 00C0      		rjmp .L76
 645               	.LVL56:
 646               	.L9:
 647               	.LBE259:
 648               	.LBE258:
 649               	.LBE253:
 650               	.LBE252:
 108:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 651               		.loc 1 108 0
 652 026e 8111      		cpse r24,__zero_reg__
 653 0270 00C0      		rjmp .L3
 654               	.LBB260:
 655               	.LBB261:
 143:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
 656               		.loc 1 143 0
 657 0272 9091 0000 		lds r25,USB_ControlRequest+2
 658 0276 9230      		cpi r25,lo8(2)
 659 0278 00F4      		brsh .L3
 660               	.LBB262:
 661               	.LBB263:
 504:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UEINTX &= ~(1 << RXSTPI);
 662               		.loc 2 504 0
 663 027a 8091 E800 		lds r24,232
 664               	.LVL57:
 665 027e 877F      		andi r24,lo8(-9)
 666 0280 8093 E800 		sts 232,r24
 667               	.LBE263:
 668               	.LBE262:
 194:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
 669               		.loc 1 194 0
 670 0284 9093 0000 		sts USB_Device_ConfigurationNumber,r25
 196:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	Endpoint_ClearStatusStage();
 671               		.loc 1 196 0
 672 0288 0E94 0000 		call Endpoint_ClearStatusStage
 673               	.LVL58:
 198:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	if (USB_Device_ConfigurationNumber)
 674               		.loc 1 198 0
 675 028c 8091 0000 		lds r24,USB_Device_ConfigurationNumber
 676 0290 8111      		cpse r24,__zero_reg__
 677 0292 00C0      		rjmp .L79
 678               	.L30:
 679               	.LBB264:
 680               	.LBB265:
 222:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				return (UDADDR & (1 << ADDEN));
 681               		.loc 4 222 0
 682 0294 8091 E300 		lds r24,227
 683               	.LBE265:
 684               	.LBE264:
 201:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 685               		.loc 1 201 0
 686 0298 87FF      		sbrs r24,7
 687 029a 00C0      		rjmp .L35
 688               	.L79:
 689 029c 84E0      		ldi r24,lo8(4)
 690 029e 00C0      		rjmp .L32
 691               	.L35:
 692 02a0 81E0      		ldi r24,lo8(1)
 693               	.L32:
 694               	.LVL59:
 695 02a2 8093 0000 		sts USB_DeviceState,r24
 203:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	EVENT_USB_Device_ConfigurationChanged();
 696               		.loc 1 203 0
 697 02a6 0E94 0000 		call EVENT_USB_Device_ConfigurationChanged
 698               	.LVL60:
 699               	.L3:
 700               	.LBE261:
 701               	.LBE260:
 702               	.LBE183:
 703               	.LBB266:
 704               	.LBB267:
 491:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 705               		.loc 2 491 0
 706 02aa 8091 E800 		lds r24,232
 707               	.LVL61:
 708               	.LBE267:
 709               	.LBE266:
 115:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	if (Endpoint_IsSETUPReceived())
 710               		.loc 1 115 0
 711 02ae 83FF      		sbrs r24,3
 712 02b0 00C0      		rjmp .L1
 713               	.LBB268:
 714               	.LBB269:
 551:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX |= (1 << STALLRQ);
 715               		.loc 2 551 0
 716 02b2 8091 EB00 		lds r24,235
 717 02b6 8062      		ori r24,lo8(32)
 718 02b8 8093 EB00 		sts 235,r24
 719               	.LBE269:
 720               	.LBE268:
 721               	.LBB270:
 722               	.LBB271:
 504:../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UEINTX &= ~(1 << RXSTPI);
 723               		.loc 2 504 0
 724 02bc 8091 E800 		lds r24,232
 725 02c0 877F      		andi r24,lo8(-9)
 726 02c2 8093 E800 		sts 232,r24
 727               	.L1:
 728               	/* epilogue start */
 729               	.LBE271:
 730               	.LBE270:
 120:../LUFA-120219/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** }
 731               		.loc 1 120 0
 732 02c6 AC96      		adiw r28,44
 733 02c8 0FB6      		in __tmp_reg__,__SREG__
 734 02ca F894      		cli
 735 02cc DEBF      		out __SP_H__,r29
 736 02ce 0FBE      		out __SREG__,__tmp_reg__
 737 02d0 CDBF      		out __SP_L__,r28
 738 02d2 DF91      		pop r29
 739 02d4 CF91      		pop r28
 740 02d6 1F91      		pop r17
 741 02d8 0F91      		pop r16
 742 02da FF90      		pop r15
 743 02dc EF90      		pop r14
 744 02de 0895      		ret
 745               		.cfi_endproc
 746               	.LFE84:
 748               		.comm	USB_Device_RemoteWakeupEnabled,1,1
 749               		.comm	USB_Device_CurrentlySelfPowered,1,1
 750               		.comm	USB_Device_ConfigurationNumber,1,1
 751               		.text
 752               	.Letext0:
 753               		.file 5 "/usr/lib/gcc/avr/4.7.2/../../../../avr/include/stdint.h"
 754               		.file 6 "../LUFA-120219/LUFA/Drivers/USB/Core/StdDescriptors.h"
 755               		.file 7 "../LUFA-120219/LUFA/Drivers/USB/Core/StdRequestType.h"
 756               		.file 8 "../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../Device.h"
 757               		.file 9 "../LUFA-120219/LUFA/Drivers/USB/Core/USBTask.h"
 758               		.file 10 "../LUFA-120219/LUFA/Drivers/USB/Core/AVR8/../AVR8/EndpointStream_AVR8.h"
 759               		.file 11 "../LUFA-120219/LUFA/Drivers/USB/Core/Events.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 DeviceStandardReq.c
     /tmp/ccTSFlLy.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccTSFlLy.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccTSFlLy.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccTSFlLy.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccTSFlLy.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccTSFlLy.s:13     .text.USB_Device_ProcessControlRequest:0000000000000000 USB_Device_ProcessControlRequest
                            *COM*:0000000000000001 USB_Device_CurrentlySelfPowered
                            *COM*:0000000000000001 USB_Device_RemoteWakeupEnabled
                            *COM*:0000000000000001 USB_Device_ConfigurationNumber

UNDEFINED SYMBOLS
USB_ControlRequest
EVENT_USB_Device_ControlRequest
Endpoint_ClearStatusStage
USB_DeviceState
Endpoint_Write_Control_Stream_LE
CALLBACK_USB_GetDescriptor
Endpoint_Write_Control_PStream_LE
EVENT_USB_Device_ConfigurationChanged
__do_clear_bss
