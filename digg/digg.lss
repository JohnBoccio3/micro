
digg.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000070e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  0000070e  000007a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  0080006a  00000718  000007ac  2**0
                  ALLOC
  3 .eeprom       00000002  00810000  00810000  000007ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         00000360  00000000  00000000  000007b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      0000005f  00000000  00000000  00000b10  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_aranges 00000020  00000000  00000000  00000b6f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 0000019d  00000000  00000000  00000b8f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00000757  00000000  00000000  00000d2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000026b  00000000  00000000  00001483  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00000700  00000000  00000000  000016ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  000000a0  00000000  00000000  00001df0  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0000023d  00000000  00000000  00001e90  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000044c  00000000  00000000  000020cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000018  00000000  00000000  00002519  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	26 c0       	rjmp	.+76     	; 0x4e <__ctors_end>
   2:	e4 c0       	rjmp	.+456    	; 0x1cc <__vector_1>
   4:	3d c0       	rjmp	.+122    	; 0x80 <__bad_interrupt>
   6:	3c c0       	rjmp	.+120    	; 0x80 <__bad_interrupt>
   8:	3b c0       	rjmp	.+118    	; 0x80 <__bad_interrupt>
   a:	3a c0       	rjmp	.+116    	; 0x80 <__bad_interrupt>
   c:	39 c0       	rjmp	.+114    	; 0x80 <__bad_interrupt>
   e:	38 c0       	rjmp	.+112    	; 0x80 <__bad_interrupt>
  10:	37 c0       	rjmp	.+110    	; 0x80 <__bad_interrupt>
  12:	36 c0       	rjmp	.+108    	; 0x80 <__bad_interrupt>
  14:	35 c0       	rjmp	.+106    	; 0x80 <__bad_interrupt>
  16:	34 c0       	rjmp	.+104    	; 0x80 <__bad_interrupt>
  18:	33 c0       	rjmp	.+102    	; 0x80 <__bad_interrupt>
  1a:	32 c0       	rjmp	.+100    	; 0x80 <__bad_interrupt>
  1c:	31 c0       	rjmp	.+98     	; 0x80 <__bad_interrupt>
  1e:	30 c0       	rjmp	.+96     	; 0x80 <__bad_interrupt>
  20:	2f c0       	rjmp	.+94     	; 0x80 <__bad_interrupt>
  22:	2e c0       	rjmp	.+92     	; 0x80 <__bad_interrupt>
  24:	2d c0       	rjmp	.+90     	; 0x80 <__bad_interrupt>

00000026 <numbertable>:
  26:	7e 30 6d 79 33 5b 5f 70 7f 73                       ~0my3[_p.s

00000030 <numbertable_p>:
  30:	26 00                                               &.

00000032 <alphatable>:
  32:	7d 1f 0d 3d 6f 47 7b 17 30 3c 57 0e 55 15 1d 67     }..=oG{.0<W.U..g
  42:	f3 05 5b 0f 1c 1c 5c 37 3b 6d                       ..[...\7;m

0000004c <alphatable_p>:
  4c:	32 00                                               2.

0000004e <__ctors_end>:
  4e:	11 24       	eor	r1, r1
  50:	1f be       	out	0x3f, r1	; 63
  52:	cf ed       	ldi	r28, 0xDF	; 223
  54:	cd bf       	out	0x3d, r28	; 61

00000056 <__do_copy_data>:
  56:	10 e0       	ldi	r17, 0x00	; 0
  58:	a0 e6       	ldi	r26, 0x60	; 96
  5a:	b0 e0       	ldi	r27, 0x00	; 0
  5c:	ee e0       	ldi	r30, 0x0E	; 14
  5e:	f7 e0       	ldi	r31, 0x07	; 7
  60:	02 c0       	rjmp	.+4      	; 0x66 <.do_copy_data_start>

00000062 <.do_copy_data_loop>:
  62:	05 90       	lpm	r0, Z+
  64:	0d 92       	st	X+, r0

00000066 <.do_copy_data_start>:
  66:	aa 36       	cpi	r26, 0x6A	; 106
  68:	b1 07       	cpc	r27, r17
  6a:	d9 f7       	brne	.-10     	; 0x62 <.do_copy_data_loop>

0000006c <__do_clear_bss>:
  6c:	10 e0       	ldi	r17, 0x00	; 0
  6e:	aa e6       	ldi	r26, 0x6A	; 106
  70:	b0 e0       	ldi	r27, 0x00	; 0
  72:	01 c0       	rjmp	.+2      	; 0x76 <.do_clear_bss_start>

00000074 <.do_clear_bss_loop>:
  74:	1d 92       	st	X+, r1

00000076 <.do_clear_bss_start>:
  76:	aa 37       	cpi	r26, 0x7A	; 122
  78:	b1 07       	cpc	r27, r17
  7a:	e1 f7       	brne	.-8      	; 0x74 <.do_clear_bss_loop>
  7c:	c9 d0       	rcall	.+402    	; 0x210 <main>
  7e:	46 c3       	rjmp	.+1676   	; 0x70c <_exit>

00000080 <__bad_interrupt>:
  80:	bf cf       	rjmp	.-130    	; 0x0 <__vectors>

00000082 <digits>:
volatile uint16_t display_timer = 0;
#define SCROLL_SPEED 300UL

///////////////ADDED HERE/////////////////////

uint8_t digits(uint16_t n) {
  82:	84 36       	cpi	r24, 0x64	; 100
  84:	91 05       	cpc	r25, r1
  86:	18 f0       	brcs	.+6      	; 0x8e <digits+0xc>
	if (n >= 100)
  88:	83 e0       	ldi	r24, 0x03	; 3
  8a:	90 e0       	ldi	r25, 0x00	; 0
  8c:	08 95       	ret
  8e:	82 e0       	ldi	r24, 0x02	; 2
  90:	90 e0       	ldi	r25, 0x00	; 0
	  return 3;
	if (n >= 10);
	return 2;
	return 1;
}
  92:	08 95       	ret

00000094 <hundreds>:


uint8_t hundreds(uint16_t n) {
  94:	20 e0       	ldi	r18, 0x00	; 0
  96:	30 e0       	ldi	r19, 0x00	; 0
  98:	02 c0       	rjmp	.+4      	; 0x9e <hundreds+0xa>
	uint8_t i=0;
	
	while (n >= 100) {
		n-=100;
  9a:	84 56       	subi	r24, 0x64	; 100
  9c:	90 40       	sbci	r25, 0x00	; 0
  9e:	42 2f       	mov	r20, r18
  a0:	2f 5f       	subi	r18, 0xFF	; 255
  a2:	3f 4f       	sbci	r19, 0xFF	; 255


uint8_t hundreds(uint16_t n) {
	uint8_t i=0;
	
	while (n >= 100) {
  a4:	84 36       	cpi	r24, 0x64	; 100
  a6:	91 05       	cpc	r25, r1
  a8:	c0 f7       	brcc	.-16     	; 0x9a <hundreds+0x6>
		n-=100;
		i++;
	}
	return i;
}
  aa:	84 2f       	mov	r24, r20
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	08 95       	ret

000000b0 <tens>:

uint8_t tens(uint16_t n) {
  b0:	02 c0       	rjmp	.+4      	; 0xb6 <tens+0x6>
	uint8_t i=0;
	
	while (n >= 100) {
		n-=100;
  b2:	84 56       	subi	r24, 0x64	; 100
  b4:	90 40       	sbci	r25, 0x00	; 0
}

uint8_t tens(uint16_t n) {
	uint8_t i=0;
	
	while (n >= 100) {
  b6:	84 36       	cpi	r24, 0x64	; 100
  b8:	91 05       	cpc	r25, r1
  ba:	d8 f7       	brcc	.-10     	; 0xb2 <tens+0x2>
  bc:	20 e0       	ldi	r18, 0x00	; 0
  be:	30 e0       	ldi	r19, 0x00	; 0
  c0:	01 c0       	rjmp	.+2      	; 0xc4 <tens+0x14>
		n-=100;
	}
	while (n >= 10) {
		n-=10;
  c2:	0a 97       	sbiw	r24, 0x0a	; 10
  c4:	42 2f       	mov	r20, r18
  c6:	2f 5f       	subi	r18, 0xFF	; 255
  c8:	3f 4f       	sbci	r19, 0xFF	; 255
	uint8_t i=0;
	
	while (n >= 100) {
		n-=100;
	}
	while (n >= 10) {
  ca:	8a 30       	cpi	r24, 0x0A	; 10
  cc:	91 05       	cpc	r25, r1
  ce:	c8 f7       	brcc	.-14     	; 0xc2 <tens+0x12>
		n-=10;
		i++;
	}
	return i;
}
  d0:	84 2f       	mov	r24, r20
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	08 95       	ret

000000d6 <display_one>:
  }
}



void display_one(uint8_t d) {
  d6:	28 2f       	mov	r18, r24
  d8:	80 ff       	sbrs	r24, 0
  da:	02 c0       	rjmp	.+4      	; 0xe0 <__stack+0x1>
	if (d & 0x1)  // G 
		PORTD |= _BV(SEG_G);
  dc:	91 9a       	sbi	0x12, 1	; 18
  de:	01 c0       	rjmp	.+2      	; 0xe2 <__stack+0x3>
	else
		PORTD &= ~_BV(SEG_G);
  e0:	91 98       	cbi	0x12, 1	; 18

	if (d & 0x2)  // F 
  e2:	21 ff       	sbrs	r18, 1
  e4:	02 c0       	rjmp	.+4      	; 0xea <__stack+0xb>
		PORTB  |= _BV(SEG_F);
  e6:	c6 9a       	sbi	0x18, 6	; 24
  e8:	01 c0       	rjmp	.+2      	; 0xec <__stack+0xd>
	else
		PORTB &= ~_BV(SEG_F);
  ea:	c6 98       	cbi	0x18, 6	; 24

	if (d & 0x4)  // E
  ec:	22 ff       	sbrs	r18, 2
  ee:	02 c0       	rjmp	.+4      	; 0xf4 <__stack+0x15>
		PORTB  |= _BV(SEG_E);
  f0:	c3 9a       	sbi	0x18, 3	; 24
  f2:	01 c0       	rjmp	.+2      	; 0xf6 <__stack+0x17>
	else
		PORTB &= ~_BV(SEG_E);
  f4:	c3 98       	cbi	0x18, 3	; 24

	if (d & 0x8)  // D
  f6:	23 ff       	sbrs	r18, 3
  f8:	02 c0       	rjmp	.+4      	; 0xfe <__stack+0x1f>
		PORTB  |= _BV(SEG_D);
  fa:	c0 9a       	sbi	0x18, 0	; 24
  fc:	01 c0       	rjmp	.+2      	; 0x100 <__stack+0x21>
	else
		PORTB &= ~_BV(SEG_D);
  fe:	c0 98       	cbi	0x18, 0	; 24

	if (d & 0x10)  // C
 100:	24 ff       	sbrs	r18, 4
 102:	02 c0       	rjmp	.+4      	; 0x108 <__stack+0x29>
		PORTB  |= _BV(SEG_C);
 104:	c2 9a       	sbi	0x18, 2	; 24
 106:	01 c0       	rjmp	.+2      	; 0x10a <__stack+0x2b>
	else
		PORTB &= ~_BV(SEG_C);
 108:	c2 98       	cbi	0x18, 2	; 24

	if (d & 0x20)  // B
 10a:	25 ff       	sbrs	r18, 5
 10c:	02 c0       	rjmp	.+4      	; 0x112 <__stack+0x33>
		PORTB  |= _BV(SEG_B);
 10e:	c4 9a       	sbi	0x18, 4	; 24
 110:	01 c0       	rjmp	.+2      	; 0x114 <__stack+0x35>
	else
		PORTB &= ~_BV(SEG_B);
 112:	c4 98       	cbi	0x18, 4	; 24

	if (d & 0x40)  // A
 114:	26 ff       	sbrs	r18, 6
 116:	02 c0       	rjmp	.+4      	; 0x11c <__stack+0x3d>
		PORTB  |= _BV(SEG_A);
 118:	c5 9a       	sbi	0x18, 5	; 24
 11a:	01 c0       	rjmp	.+2      	; 0x11e <__stack+0x3f>
	else
		PORTB &= ~_BV(SEG_A);
 11c:	c5 98       	cbi	0x18, 5	; 24

	if (d & 0x80)  // dot
 11e:	87 ff       	sbrs	r24, 7
 120:	02 c0       	rjmp	.+4      	; 0x126 <__stack+0x47>
		PORTD  |= _BV(SEG_DP);
 122:	96 9a       	sbi	0x12, 6	; 18
 124:	08 95       	ret
	else
		PORTD &= ~_BV(SEG_DP);
 126:	96 98       	cbi	0x12, 6	; 18
 128:	08 95       	ret

0000012a <display_digit>:
}

void display_digit(uint8_t digit, uint8_t value) {
 12a:	1f 93       	push	r17
 12c:	18 2f       	mov	r17, r24

	// turn them all off (to prevent ghosting)
	SEG_CC1_PORT |= _BV(SEG_CC1);
 12e:	c1 9a       	sbi	0x18, 1	; 24
	SEG_CC2_PORT |= _BV(SEG_CC2);
 130:	90 9a       	sbi	0x12, 0	; 18
	SEG_CC3_PORT |= _BV(SEG_CC3);
 132:	94 9a       	sbi	0x12, 4	; 18
	SEG_DCC_PORT |= _BV(SEG_DCC);	
 134:	c7 9a       	sbi	0x18, 7	; 24

	// set the anodes
	if (value <= 9) {
 136:	6a 30       	cpi	r22, 0x0A	; 10
 138:	30 f4       	brcc	.+12     	; 0x146 <display_digit+0x1c>
	  display_one(pgm_read_byte(numbertable_p + value));
 13a:	e6 2f       	mov	r30, r22
 13c:	f0 e0       	ldi	r31, 0x00	; 0
 13e:	ea 5d       	subi	r30, 0xDA	; 218
 140:	ff 4f       	sbci	r31, 0xFF	; 255
 142:	e4 91       	lpm	r30, Z
 144:	09 c0       	rjmp	.+18     	; 0x158 <display_digit+0x2e>
	} else if ((value >= 'a') && (value <= 'z')) {
 146:	86 2f       	mov	r24, r22
 148:	81 56       	subi	r24, 0x61	; 97
 14a:	8a 31       	cpi	r24, 0x1A	; 26
 14c:	38 f4       	brcc	.+14     	; 0x15c <display_digit+0x32>
	  display_one(pgm_read_byte(alphatable_p + value - 'a'));
 14e:	e6 2f       	mov	r30, r22
 150:	f0 e0       	ldi	r31, 0x00	; 0
 152:	ef 52       	subi	r30, 0x2F	; 47
 154:	f0 40       	sbci	r31, 0x00	; 0
 156:	e4 91       	lpm	r30, Z
 158:	8e 2f       	mov	r24, r30
 15a:	03 c0       	rjmp	.+6      	; 0x162 <display_digit+0x38>
	} else if (value == ' ') {
 15c:	60 32       	cpi	r22, 0x20	; 32
 15e:	11 f4       	brne	.+4      	; 0x164 <display_digit+0x3a>
		display_one(0x0);
 160:	80 e0       	ldi	r24, 0x00	; 0
 162:	b9 df       	rcall	.-142    	; 0xd6 <display_one>
	}
	
	// turn on cathodes
	if (digit == 0) {
 164:	11 23       	and	r17, r17
 166:	11 f4       	brne	.+4      	; 0x16c <display_digit+0x42>
		SEG_CC1_PORT &= ~_BV(SEG_CC1);
 168:	c1 98       	cbi	0x18, 1	; 24
 16a:	0b c0       	rjmp	.+22     	; 0x182 <display_digit+0x58>
	} else if (digit == 1) {
 16c:	11 30       	cpi	r17, 0x01	; 1
 16e:	11 f4       	brne	.+4      	; 0x174 <display_digit+0x4a>
		SEG_CC2_PORT &= ~_BV(SEG_CC2);
 170:	90 98       	cbi	0x12, 0	; 18
 172:	07 c0       	rjmp	.+14     	; 0x182 <display_digit+0x58>
	} else if (digit == 2) {
 174:	12 30       	cpi	r17, 0x02	; 2
 176:	11 f4       	brne	.+4      	; 0x17c <display_digit+0x52>
		SEG_CC3_PORT &= ~_BV(SEG_CC3);
 178:	94 98       	cbi	0x12, 4	; 18
 17a:	03 c0       	rjmp	.+6      	; 0x182 <display_digit+0x58>
	} else if (digit == 3) {
 17c:	13 30       	cpi	r17, 0x03	; 3
 17e:	09 f4       	brne	.+2      	; 0x182 <display_digit+0x58>
		SEG_DCC_PORT &= ~_BV(SEG_DCC);
 180:	c7 98       	cbi	0x18, 7	; 24
 182:	1f 91       	pop	r17
 184:	08 95       	ret

00000186 <segments>:
	}
}

uint8_t segments(uint8_t value) {
 186:	e8 2f       	mov	r30, r24
	int x, i, j;

	if (value <= 9) {
 188:	8a 30       	cpi	r24, 0x0A	; 10
 18a:	50 f4       	brcc	.+20     	; 0x1a0 <segments+0x1a>
	  x = pgm_read_byte(numbertable_p + value);
 18c:	f0 e0       	ldi	r31, 0x00	; 0
 18e:	ea 5d       	subi	r30, 0xDA	; 218
 190:	ff 4f       	sbci	r31, 0xFF	; 255
 192:	e4 91       	lpm	r30, Z
 194:	f0 e0       	ldi	r31, 0x00	; 0
 196:	20 e0       	ldi	r18, 0x00	; 0
 198:	30 e0       	ldi	r19, 0x00	; 0
 19a:	80 e0       	ldi	r24, 0x00	; 0
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	0d c0       	rjmp	.+26     	; 0x1ba <segments+0x34>
	} else if ((value >= 'a') && (value <= 'z')) {
 1a0:	81 56       	subi	r24, 0x61	; 97
 1a2:	8a 31       	cpi	r24, 0x1A	; 26
 1a4:	18 f0       	brcs	.+6      	; 0x1ac <segments+0x26>
 1a6:	80 e0       	ldi	r24, 0x00	; 0
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	08 95       	ret
	  x = pgm_read_byte(alphatable_p + value - 'a');
 1ac:	f0 e0       	ldi	r31, 0x00	; 0
 1ae:	ef 52       	subi	r30, 0x2F	; 47
 1b0:	f0 40       	sbci	r31, 0x00	; 0
 1b2:	e4 91       	lpm	r30, Z
 1b4:	ef cf       	rjmp	.-34     	; 0x194 <segments+0xe>
	j = 0;

	for (i=0; i<8; i++) {
		if (x & 0x1)
			j++;
		x >>= 1;
 1b6:	f5 95       	asr	r31
 1b8:	e7 95       	ror	r30
	}
	
	j = 0;

	for (i=0; i<8; i++) {
		if (x & 0x1)
 1ba:	e0 fd       	sbrc	r30, 0
			j++;
 1bc:	01 96       	adiw	r24, 0x01	; 1
	  return 0x0;
	}
	
	j = 0;

	for (i=0; i<8; i++) {
 1be:	2f 5f       	subi	r18, 0xFF	; 255
 1c0:	3f 4f       	sbci	r19, 0xFF	; 255
 1c2:	28 30       	cpi	r18, 0x08	; 8
 1c4:	31 05       	cpc	r19, r1
 1c6:	b9 f7       	brne	.-18     	; 0x1b6 <segments+0x30>
		if (x & 0x1)
			j++;
		x >>= 1;
	}
	return j;
 1c8:	90 e0       	ldi	r25, 0x00	; 0
}
 1ca:	08 95       	ret

000001cc <__vector_1>:
}

//////////////END ADDED HERE/////////////////


SIGNAL (SIG_INT0) {
 1cc:	1f 92       	push	r1
 1ce:	0f 92       	push	r0
 1d0:	0f b6       	in	r0, 0x3f	; 63
 1d2:	0f 92       	push	r0
 1d4:	11 24       	eor	r1, r1
 1d6:	8f 93       	push	r24
 1d8:	9f 93       	push	r25
  GIMSK = 0;
 1da:	1b be       	out	0x3b, r1	; 59
  poweroff_timer = 0;
 1dc:	10 92 6b 00 	sts	0x006B, r1
 1e0:	10 92 6c 00 	sts	0x006C, r1
 1e4:	10 92 6d 00 	sts	0x006D, r1
 1e8:	10 92 6e 00 	sts	0x006E, r1
  button_timer == 0xFFFF;
 1ec:	80 91 77 00 	lds	r24, 0x0077
 1f0:	90 91 78 00 	lds	r25, 0x0078
 1f4:	04 c0       	rjmp	.+8      	; 0x1fe <__vector_1+0x32>
 1f6:	84 ec       	ldi	r24, 0xC4	; 196
 1f8:	99 e0       	ldi	r25, 0x09	; 9
 1fa:	01 97       	sbiw	r24, 0x01	; 1
 1fc:	f1 f7       	brne	.-4      	; 0x1fa <__vector_1+0x2e>
  while (! (BUTTON_PIN & _BV(BUTTON)))  {
 1fe:	82 9b       	sbis	0x10, 2	; 16
 200:	fa cf       	rjmp	.-12     	; 0x1f6 <__vector_1+0x2a>
 202:	9f 91       	pop	r25
 204:	8f 91       	pop	r24
 206:	0f 90       	pop	r0
 208:	0f be       	out	0x3f, r0	; 63
 20a:	0f 90       	pop	r0
 20c:	1f 90       	pop	r1
 20e:	18 95       	reti

00000210 <main>:
		x >>= 1;
	}
	return j;
}

int main(void) {
 210:	0f 93       	push	r16
 212:	1f 93       	push	r17
 214:	cf 93       	push	r28
 216:	df 93       	push	r29
  uint8_t button_state, last_button_state, cleared = 0;
  uint16_t temp;

  DDRB = 0xFF;
 218:	8f ef       	ldi	r24, 0xFF	; 255
 21a:	87 bb       	out	0x17, r24	; 23
  DDRD = 0xFF;
 21c:	81 bb       	out	0x11, r24	; 17
  DDRA = 0x0; // the unused crystal pins are for changing the timeout.
 21e:	1a ba       	out	0x1a, r1	; 26
  PORTA = 0xF; // but they have pullups
 220:	8f e0       	ldi	r24, 0x0F	; 15
 222:	8b bb       	out	0x1b, r24	; 27
  
  GIMSK = 0;
 224:	1b be       	out	0x3b, r1	; 59
  
  BUTTON_DDR &= ~_BV(BUTTON);
 226:	8a 98       	cbi	0x11, 2	; 17
  BUTTON_PORT |= _BV(BUTTON);
 228:	92 9a       	sbi	0x12, 2	; 18
 22a:	a0 e0       	ldi	r26, 0x00	; 0
 22c:	b0 e0       	ldi	r27, 0x00	; 0
 22e:	50 d2       	rcall	.+1184   	; 0x6d0 <__eeprom_read_word_1C1D1E>
  
  number = eeprom_read_word(&stored_number);
 230:	f0 93 73 00 	sts	0x0073, r31
 234:	e0 93 72 00 	sts	0x0072, r30
  
  // set up an interrupt that goes off @ 1KHz)
  TCCR0A = _BV(WGM01);
 238:	82 e0       	ldi	r24, 0x02	; 2
 23a:	80 bf       	out	0x30, r24	; 48
  TCCR0B = 2; // 500K/8 = 62.3KHz
 23c:	83 bf       	out	0x33, r24	; 51
  OCR0A = 63; // divide that by 63 -> 1KHz
 23e:	8f e3       	ldi	r24, 0x3F	; 63
 240:	86 bf       	out	0x36, r24	; 54
  TIMSK = _BV(OCIE0A); // turn on the interrupt
 242:	81 e0       	ldi	r24, 0x01	; 1
 244:	89 bf       	out	0x39, r24	; 57
  sei(); // turn on interrupts
 246:	78 94       	sei
  // now all the LED stuff (persistence of vision) is done in interrupts, so watch for button presses
  
  button_timer = 0xFFFF;
 248:	8f ef       	ldi	r24, 0xFF	; 255
 24a:	9f ef       	ldi	r25, 0xFF	; 255
 24c:	90 93 78 00 	sts	0x0078, r25
 250:	80 93 77 00 	sts	0x0077, r24
 254:	41 e0       	ldi	r20, 0x01	; 1
 256:	11 e0       	ldi	r17, 0x01	; 1
 258:	00 e0       	ldi	r16, 0x00	; 0
 25a:	c0 e0       	ldi	r28, 0x00	; 0
 25c:	d0 e0       	ldi	r29, 0x00	; 0
  while (1) {
    // first, debounce the switch by performing a lowpass filter: the button
    // must be pressed for 10ms (on or off) for it to count. otherwise we get
    // weird effects from the bouncing.

    if ((! (BUTTON_PIN & _BV(BUTTON))) && (button_state == 1)) {
 25e:	82 99       	sbic	0x10, 2	; 16
 260:	1f c0       	rjmp	.+62     	; 0x2a0 <main+0x90>
 262:	41 30       	cpi	r20, 0x01	; 1
 264:	e9 f4       	brne	.+58     	; 0x2a0 <main+0x90>
      poweroff_timer = 0;
 266:	10 92 6b 00 	sts	0x006B, r1
 26a:	10 92 6c 00 	sts	0x006C, r1
 26e:	10 92 6d 00 	sts	0x006D, r1
 272:	10 92 6e 00 	sts	0x006E, r1

      //button was just pressed
      // wait 10 ms and see if the button is still pressed the entire time
      button_timer = 0;
 276:	10 92 78 00 	sts	0x0078, r1
 27a:	10 92 77 00 	sts	0x0077, r1
 27e:	02 c0       	rjmp	.+4      	; 0x284 <main+0x74>
      while (button_timer < 10) {
	if (BUTTON_PIN & _BV(BUTTON)) { // released
 280:	82 99       	sbic	0x10, 2	; 16
 282:	06 c0       	rjmp	.+12     	; 0x290 <main+0x80>
      poweroff_timer = 0;

      //button was just pressed
      // wait 10 ms and see if the button is still pressed the entire time
      button_timer = 0;
      while (button_timer < 10) {
 284:	80 91 77 00 	lds	r24, 0x0077
 288:	90 91 78 00 	lds	r25, 0x0078
 28c:	0a 97       	sbiw	r24, 0x0a	; 10
 28e:	c4 f3       	brlt	.-16     	; 0x280 <main+0x70>
	if (BUTTON_PIN & _BV(BUTTON)) { // released
	  break;
	}
      }
      if (button_timer >= 10) { // was held entire time
 290:	80 91 77 00 	lds	r24, 0x0077
 294:	90 91 78 00 	lds	r25, 0x0078
 298:	0a 97       	sbiw	r24, 0x0a	; 10
 29a:	0c f0       	brlt	.+2      	; 0x29e <main+0x8e>
 29c:	40 e0       	ldi	r20, 0x00	; 0
 29e:	00 e0       	ldi	r16, 0x00	; 0
	button_state = 0;
      }
      cleared = 0;
    }
    
    if ((BUTTON_PIN & _BV(BUTTON)) && (!button_state)) {
 2a0:	82 9b       	sbis	0x10, 2	; 16
 2a2:	1f c0       	rjmp	.+62     	; 0x2e2 <main+0xd2>
 2a4:	44 23       	and	r20, r20
 2a6:	a1 f5       	brne	.+104    	; 0x310 <main+0x100>
      poweroff_timer = 0;
 2a8:	10 92 6b 00 	sts	0x006B, r1
 2ac:	10 92 6c 00 	sts	0x006C, r1
 2b0:	10 92 6d 00 	sts	0x006D, r1
 2b4:	10 92 6e 00 	sts	0x006E, r1

      // wait 10 ms and see if the button is released the entire time
      button_timer = 0;
 2b8:	10 92 78 00 	sts	0x0078, r1
 2bc:	10 92 77 00 	sts	0x0077, r1
 2c0:	02 c0       	rjmp	.+4      	; 0x2c6 <main+0xb6>
      while (button_timer < 10) {
	if (! (BUTTON_PIN & _BV(BUTTON))) { // pressed
 2c2:	82 9b       	sbis	0x10, 2	; 16
 2c4:	06 c0       	rjmp	.+12     	; 0x2d2 <main+0xc2>
    if ((BUTTON_PIN & _BV(BUTTON)) && (!button_state)) {
      poweroff_timer = 0;

      // wait 10 ms and see if the button is released the entire time
      button_timer = 0;
      while (button_timer < 10) {
 2c6:	80 91 77 00 	lds	r24, 0x0077
 2ca:	90 91 78 00 	lds	r25, 0x0078
 2ce:	0a 97       	sbiw	r24, 0x0a	; 10
 2d0:	c4 f3       	brlt	.-16     	; 0x2c2 <main+0xb2>
	if (! (BUTTON_PIN & _BV(BUTTON))) { // pressed
	  break;
	}
      }
      if (button_timer >= 10) { // was held entire time
 2d2:	80 91 77 00 	lds	r24, 0x0077
 2d6:	90 91 78 00 	lds	r25, 0x0078
 2da:	0a 97       	sbiw	r24, 0x0a	; 10
 2dc:	0c f0       	brlt	.+2      	; 0x2e0 <main+0xd0>
 2de:	b1 c0       	rjmp	.+354    	; 0x442 <main+0x232>
 2e0:	02 c0       	rjmp	.+4      	; 0x2e6 <main+0xd6>
    }

    // debounce/lowpassing done, 
    // button_state tells whether the button is pressed (0) or released (1)
    // now see if it was a short or long press
    if (!button_state && last_button_state) { // just pressed
 2e2:	44 23       	and	r20, r20
 2e4:	a9 f4       	brne	.+42     	; 0x310 <main+0x100>
      last_button_state = button_state;
      // do nothing
    }
   
    if (!button_state && !last_button_state && 
 2e6:	80 91 77 00 	lds	r24, 0x0077
 2ea:	90 91 78 00 	lds	r25, 0x0078
 2ee:	88 5b       	subi	r24, 0xB8	; 184
 2f0:	9b 40       	sbci	r25, 0x0B	; 11
 2f2:	0c f4       	brge	.+2      	; 0x2f6 <main+0xe6>
 2f4:	a4 c0       	rjmp	.+328    	; 0x43e <main+0x22e>
	(button_timer >= LONG_PRESS_TIME)) { // pressed and held
      number = 0;
 2f6:	10 92 73 00 	sts	0x0073, r1
 2fa:	10 92 72 00 	sts	0x0072, r1
      eeprom_write_word(&stored_number, number);
 2fe:	80 91 72 00 	lds	r24, 0x0072
 302:	90 91 73 00 	lds	r25, 0x0073
 306:	de 01       	movw	r26, r28
 308:	0c 01       	movw	r0, r24
 30a:	e7 d1       	rcall	.+974    	; 0x6da <__eeprom_write_word_1C1D1E>
 30c:	01 e0       	ldi	r16, 0x01	; 1
 30e:	97 c0       	rjmp	.+302    	; 0x43e <main+0x22e>
      cleared = 1; // just cleared
    }

   if (button_state && !last_button_state && !cleared) { // just released
 310:	11 23       	and	r17, r17
 312:	69 f5       	brne	.+90     	; 0x36e <main+0x15e>
 314:	00 23       	and	r16, r16
 316:	59 f5       	brne	.+86     	; 0x36e <main+0x15e>
      last_button_state = button_state;
      temp = number+1;
 318:	20 91 72 00 	lds	r18, 0x0072
 31c:	30 91 73 00 	lds	r19, 0x0073
 320:	2f 5f       	subi	r18, 0xFF	; 255
 322:	3f 4f       	sbci	r19, 0xFF	; 255
      number = 1001;
 324:	89 ee       	ldi	r24, 0xE9	; 233
 326:	93 e0       	ldi	r25, 0x03	; 3
 328:	90 93 73 00 	sts	0x0073, r25
 32c:	80 93 72 00 	sts	0x0072, r24
      digit1 = 'd';
 330:	84 e6       	ldi	r24, 0x64	; 100
 332:	80 93 79 00 	sts	0x0079, r24
      digit2 = 'u';
 336:	85 e7       	ldi	r24, 0x75	; 117
 338:	80 93 74 00 	sts	0x0074, r24
      digit3 = 'g';
 33c:	87 e6       	ldi	r24, 0x67	; 103
 33e:	80 93 75 00 	sts	0x0075, r24
 342:	84 e2       	ldi	r24, 0x24	; 36
 344:	94 ef       	ldi	r25, 0xF4	; 244
 346:	fc 01       	movw	r30, r24
 348:	31 97       	sbiw	r30, 0x01	; 1
 34a:	f1 f7       	brne	.-4      	; 0x348 <main+0x138>
      _delay_ms(250);
      _delay_ms(250);
      _delay_ms(250);
      number = temp;
 34c:	fc 01       	movw	r30, r24
 34e:	31 97       	sbiw	r30, 0x01	; 1
 350:	f1 f7       	brne	.-4      	; 0x34e <main+0x13e>
 352:	01 97       	sbiw	r24, 0x01	; 1
 354:	f1 f7       	brne	.-4      	; 0x352 <main+0x142>
 356:	30 93 73 00 	sts	0x0073, r19
 35a:	20 93 72 00 	sts	0x0072, r18
      eeprom_write_word(&stored_number, number); 
 35e:	80 91 72 00 	lds	r24, 0x0072
 362:	90 91 73 00 	lds	r25, 0x0073
 366:	de 01       	movw	r26, r28
 368:	0c 01       	movw	r0, r24
 36a:	b7 d1       	rcall	.+878    	; 0x6da <__eeprom_write_word_1C1D1E>
 36c:	14 2f       	mov	r17, r20
    }


   // do special stuff
    if ((number >= 1000) || !(PINA & 0x2)) {
 36e:	80 91 72 00 	lds	r24, 0x0072
 372:	90 91 73 00 	lds	r25, 0x0073
 376:	88 5e       	subi	r24, 0xE8	; 232
 378:	93 40       	sbci	r25, 0x03	; 3
 37a:	10 f4       	brcc	.+4      	; 0x380 <main+0x170>
 37c:	c9 99       	sbic	0x19, 1	; 25
 37e:	6f cf       	rjmp	.-290    	; 0x25e <main+0x4e>
      if (number == 1000) 
 380:	80 91 72 00 	lds	r24, 0x0072
 384:	90 91 73 00 	lds	r25, 0x0073
 388:	88 5e       	subi	r24, 0xE8	; 232
 38a:	93 40       	sbci	r25, 0x03	; 3
 38c:	11 f4       	brne	.+4      	; 0x392 <main+0x182>
	string_index = 0;
 38e:	10 92 6f 00 	sts	0x006F, r1

      digit1 = display_string[string_index%strlen(display_string)];
 392:	20 91 67 00 	lds	r18, 0x0067
 396:	30 91 68 00 	lds	r19, 0x0068
 39a:	80 91 6f 00 	lds	r24, 0x006F
 39e:	f9 01       	movw	r30, r18
 3a0:	01 90       	ld	r0, Z+
 3a2:	00 20       	and	r0, r0
 3a4:	e9 f7       	brne	.-6      	; 0x3a0 <main+0x190>
 3a6:	31 97       	sbiw	r30, 0x01	; 1
 3a8:	e2 1b       	sub	r30, r18
 3aa:	f3 0b       	sbc	r31, r19
 3ac:	90 e0       	ldi	r25, 0x00	; 0
 3ae:	bf 01       	movw	r22, r30
 3b0:	7b d1       	rcall	.+758    	; 0x6a8 <__udivmodhi4>
 3b2:	f9 01       	movw	r30, r18
 3b4:	e8 0f       	add	r30, r24
 3b6:	f9 1f       	adc	r31, r25
 3b8:	80 81       	ld	r24, Z
 3ba:	80 93 79 00 	sts	0x0079, r24
      digit2 = display_string[(string_index+1)%strlen(display_string)];
 3be:	80 91 6f 00 	lds	r24, 0x006F
 3c2:	f9 01       	movw	r30, r18
 3c4:	01 90       	ld	r0, Z+
 3c6:	00 20       	and	r0, r0
 3c8:	e9 f7       	brne	.-6      	; 0x3c4 <main+0x1b4>
 3ca:	31 97       	sbiw	r30, 0x01	; 1
 3cc:	e2 1b       	sub	r30, r18
 3ce:	f3 0b       	sbc	r31, r19
 3d0:	90 e0       	ldi	r25, 0x00	; 0
 3d2:	01 96       	adiw	r24, 0x01	; 1
 3d4:	bf 01       	movw	r22, r30
 3d6:	68 d1       	rcall	.+720    	; 0x6a8 <__udivmodhi4>
 3d8:	f9 01       	movw	r30, r18
 3da:	e8 0f       	add	r30, r24
 3dc:	f9 1f       	adc	r31, r25
 3de:	80 81       	ld	r24, Z
 3e0:	80 93 74 00 	sts	0x0074, r24
      digit3 = display_string[(string_index+2)%strlen(display_string)];
 3e4:	80 91 6f 00 	lds	r24, 0x006F
 3e8:	f9 01       	movw	r30, r18
 3ea:	01 90       	ld	r0, Z+
 3ec:	00 20       	and	r0, r0
 3ee:	e9 f7       	brne	.-6      	; 0x3ea <main+0x1da>
 3f0:	31 97       	sbiw	r30, 0x01	; 1
 3f2:	e2 1b       	sub	r30, r18
 3f4:	f3 0b       	sbc	r31, r19
 3f6:	90 e0       	ldi	r25, 0x00	; 0
 3f8:	02 96       	adiw	r24, 0x02	; 2
 3fa:	bf 01       	movw	r22, r30
 3fc:	55 d1       	rcall	.+682    	; 0x6a8 <__udivmodhi4>
 3fe:	28 0f       	add	r18, r24
 400:	39 1f       	adc	r19, r25
 402:	f9 01       	movw	r30, r18
 404:	80 81       	ld	r24, Z
 406:	80 93 75 00 	sts	0x0075, r24
      if (number == 1000)
 40a:	80 91 72 00 	lds	r24, 0x0072
 40e:	90 91 73 00 	lds	r25, 0x0073
 412:	88 5e       	subi	r24, 0xE8	; 232
 414:	93 40       	sbci	r25, 0x03	; 3
 416:	21 f4       	brne	.+8      	; 0x420 <main+0x210>
 418:	88 ea       	ldi	r24, 0xA8	; 168
 41a:	91 e6       	ldi	r25, 0x61	; 97
 41c:	01 97       	sbiw	r24, 0x01	; 1
 41e:	f1 f7       	brne	.-4      	; 0x41c <main+0x20c>
	_delay_ms(100);
      number = 1001;
 420:	89 ee       	ldi	r24, 0xE9	; 233
 422:	93 e0       	ldi	r25, 0x03	; 3
 424:	90 93 73 00 	sts	0x0073, r25
 428:	80 93 72 00 	sts	0x0072, r24
      poweroff_timer = 0;
 42c:	10 92 6b 00 	sts	0x006B, r1
 430:	10 92 6c 00 	sts	0x006C, r1
 434:	10 92 6d 00 	sts	0x006D, r1
 438:	10 92 6e 00 	sts	0x006E, r1
 43c:	10 cf       	rjmp	.-480    	; 0x25e <main+0x4e>
 43e:	10 e0       	ldi	r17, 0x00	; 0
 440:	96 cf       	rjmp	.-212    	; 0x36e <main+0x15e>
 442:	41 e0       	ldi	r20, 0x01	; 1
 444:	65 cf       	rjmp	.-310    	; 0x310 <main+0x100>

00000446 <SIG_OUTPUT_COMPARE0A>:
  while (! (BUTTON_PIN & _BV(BUTTON)))  {
    _delay_ms(10);
  }
}

SIGNAL (SIG_OUTPUT_COMPARE0A) {
 446:	1f 92       	push	r1
 448:	0f 92       	push	r0
 44a:	0f b6       	in	r0, 0x3f	; 63
 44c:	0f 92       	push	r0
 44e:	11 24       	eor	r1, r1
 450:	2f 93       	push	r18
 452:	3f 93       	push	r19
 454:	4f 93       	push	r20
 456:	5f 93       	push	r21
 458:	6f 93       	push	r22
 45a:	7f 93       	push	r23
 45c:	8f 93       	push	r24
 45e:	9f 93       	push	r25
 460:	af 93       	push	r26
 462:	bf 93       	push	r27
 464:	ef 93       	push	r30
 466:	ff 93       	push	r31
  if (button_timer != 0xFFFF) {
 468:	80 91 77 00 	lds	r24, 0x0077
 46c:	90 91 78 00 	lds	r25, 0x0078
 470:	8f 5f       	subi	r24, 0xFF	; 255
 472:	9f 4f       	sbci	r25, 0xFF	; 255
 474:	49 f0       	breq	.+18     	; 0x488 <SIG_OUTPUT_COMPARE0A+0x42>
    button_timer++;
 476:	80 91 77 00 	lds	r24, 0x0077
 47a:	90 91 78 00 	lds	r25, 0x0078
 47e:	01 96       	adiw	r24, 0x01	; 1
 480:	90 93 78 00 	sts	0x0078, r25
 484:	80 93 77 00 	sts	0x0077, r24
  }

  if (display_timer != 0xFFFF) {
 488:	80 91 70 00 	lds	r24, 0x0070
 48c:	90 91 71 00 	lds	r25, 0x0071
 490:	8f 5f       	subi	r24, 0xFF	; 255
 492:	9f 4f       	sbci	r25, 0xFF	; 255
 494:	b1 f1       	breq	.+108    	; 0x502 <SIG_OUTPUT_COMPARE0A+0xbc>
    display_timer++;
 496:	80 91 70 00 	lds	r24, 0x0070
 49a:	90 91 71 00 	lds	r25, 0x0071
 49e:	01 96       	adiw	r24, 0x01	; 1
 4a0:	90 93 71 00 	sts	0x0071, r25
 4a4:	80 93 70 00 	sts	0x0070, r24
    if (display_timer >= SCROLL_SPEED) {
 4a8:	80 91 70 00 	lds	r24, 0x0070
 4ac:	90 91 71 00 	lds	r25, 0x0071
 4b0:	8c 52       	subi	r24, 0x2C	; 44
 4b2:	91 40       	sbci	r25, 0x01	; 1
 4b4:	30 f1       	brcs	.+76     	; 0x502 <SIG_OUTPUT_COMPARE0A+0xbc>
      display_timer = 0;
 4b6:	10 92 71 00 	sts	0x0071, r1
 4ba:	10 92 70 00 	sts	0x0070, r1
      string_index++;
 4be:	80 91 6f 00 	lds	r24, 0x006F
 4c2:	8f 5f       	subi	r24, 0xFF	; 255
 4c4:	80 93 6f 00 	sts	0x006F, r24
      if (string_index > strlen(display_string)+3)
 4c8:	80 91 6f 00 	lds	r24, 0x006F
 4cc:	a0 91 67 00 	lds	r26, 0x0067
 4d0:	b0 91 68 00 	lds	r27, 0x0068
 4d4:	fd 01       	movw	r30, r26
 4d6:	01 90       	ld	r0, Z+
 4d8:	00 20       	and	r0, r0
 4da:	e9 f7       	brne	.-6      	; 0x4d6 <SIG_OUTPUT_COMPARE0A+0x90>
 4dc:	ea 1b       	sub	r30, r26
 4de:	fb 0b       	sbc	r31, r27
 4e0:	90 e0       	ldi	r25, 0x00	; 0
 4e2:	32 96       	adiw	r30, 0x02	; 2
 4e4:	e8 17       	cp	r30, r24
 4e6:	f9 07       	cpc	r31, r25
 4e8:	60 f4       	brcc	.+24     	; 0x502 <SIG_OUTPUT_COMPARE0A+0xbc>
	string_index -= strlen(display_string);
 4ea:	80 91 6f 00 	lds	r24, 0x006F
 4ee:	fd 01       	movw	r30, r26
 4f0:	01 90       	ld	r0, Z+
 4f2:	00 20       	and	r0, r0
 4f4:	e9 f7       	brne	.-6      	; 0x4f0 <SIG_OUTPUT_COMPARE0A+0xaa>
 4f6:	31 97       	sbiw	r30, 0x01	; 1
 4f8:	ea 1b       	sub	r30, r26
 4fa:	fb 0b       	sbc	r31, r27
 4fc:	8e 1b       	sub	r24, r30
 4fe:	80 93 6f 00 	sts	0x006F, r24
    }
  }

  if (PINA & 0x1) {
 502:	c8 9b       	sbis	0x19, 0	; 25
 504:	2b c0       	rjmp	.+86     	; 0x55c <SIG_OUTPUT_COMPARE0A+0x116>
    if (poweroff_timer < POWEROFF_TIME) {
 506:	80 91 6b 00 	lds	r24, 0x006B
 50a:	90 91 6c 00 	lds	r25, 0x006C
 50e:	a0 91 6d 00 	lds	r26, 0x006D
 512:	b0 91 6e 00 	lds	r27, 0x006E
 516:	80 5e       	subi	r24, 0xE0	; 224
 518:	93 49       	sbci	r25, 0x93	; 147
 51a:	a4 40       	sbci	r26, 0x04	; 4
 51c:	b0 40       	sbci	r27, 0x00	; 0
 51e:	a0 f4       	brcc	.+40     	; 0x548 <SIG_OUTPUT_COMPARE0A+0x102>
      poweroff_timer++;
 520:	80 91 6b 00 	lds	r24, 0x006B
 524:	90 91 6c 00 	lds	r25, 0x006C
 528:	a0 91 6d 00 	lds	r26, 0x006D
 52c:	b0 91 6e 00 	lds	r27, 0x006E
 530:	01 96       	adiw	r24, 0x01	; 1
 532:	a1 1d       	adc	r26, r1
 534:	b1 1d       	adc	r27, r1
 536:	80 93 6b 00 	sts	0x006B, r24
 53a:	90 93 6c 00 	sts	0x006C, r25
 53e:	a0 93 6d 00 	sts	0x006D, r26
 542:	b0 93 6e 00 	sts	0x006E, r27
 546:	0a c0       	rjmp	.+20     	; 0x55c <SIG_OUTPUT_COMPARE0A+0x116>
    } else {
      // time to sleep!
      // turn off all LEDs
      
      display_digit(9, 99);
 548:	63 e6       	ldi	r22, 0x63	; 99
 54a:	89 e0       	ldi	r24, 0x09	; 9
 54c:	ee dd       	rcall	.-1060   	; 0x12a <display_digit>
      MCUCR |= _BV(SM1) | _BV(SM0) | _BV(SE);
 54e:	85 b7       	in	r24, 0x35	; 53
 550:	80 67       	ori	r24, 0x70	; 112
 552:	85 bf       	out	0x35, r24	; 53
      GIMSK = _BV(INT0);
 554:	80 e4       	ldi	r24, 0x40	; 64
 556:	8b bf       	out	0x3b, r24	; 59
      sei();
 558:	78 94       	sei
      asm("sleep");
 55a:	88 95       	sleep
    }
  } // otherwise, its always on!
  
  
  if ((PINA & 0x2) && (number <= 999)) { /* display whatever is stored in the number variable */
 55c:	c9 9b       	sbis	0x19, 1	; 25
 55e:	3b c0       	rjmp	.+118    	; 0x5d6 <SIG_OUTPUT_COMPARE0A+0x190>
 560:	80 91 72 00 	lds	r24, 0x0072
 564:	90 91 73 00 	lds	r25, 0x0073
 568:	88 5e       	subi	r24, 0xE8	; 232
 56a:	93 40       	sbci	r25, 0x03	; 3
 56c:	a0 f5       	brcc	.+104    	; 0x5d6 <SIG_OUTPUT_COMPARE0A+0x190>
    // display a number
    if (number >= 100) {
 56e:	80 91 72 00 	lds	r24, 0x0072
 572:	90 91 73 00 	lds	r25, 0x0073
 576:	84 36       	cpi	r24, 0x64	; 100
 578:	91 05       	cpc	r25, r1
 57a:	90 f0       	brcs	.+36     	; 0x5a0 <SIG_OUTPUT_COMPARE0A+0x15a>
      digit1 = hundreds(number);
 57c:	80 91 72 00 	lds	r24, 0x0072
 580:	90 91 73 00 	lds	r25, 0x0073
 584:	20 e0       	ldi	r18, 0x00	; 0
 586:	30 e0       	ldi	r19, 0x00	; 0
 588:	02 c0       	rjmp	.+4      	; 0x58e <SIG_OUTPUT_COMPARE0A+0x148>

uint8_t hundreds(uint16_t n) {
	uint8_t i=0;
	
	while (n >= 100) {
		n-=100;
 58a:	84 56       	subi	r24, 0x64	; 100
 58c:	90 40       	sbci	r25, 0x00	; 0
 58e:	42 2f       	mov	r20, r18
 590:	2f 5f       	subi	r18, 0xFF	; 255
 592:	3f 4f       	sbci	r19, 0xFF	; 255


uint8_t hundreds(uint16_t n) {
	uint8_t i=0;
	
	while (n >= 100) {
 594:	84 36       	cpi	r24, 0x64	; 100
 596:	91 05       	cpc	r25, r1
 598:	c0 f7       	brcc	.-16     	; 0x58a <SIG_OUTPUT_COMPARE0A+0x144>
  
  
  if ((PINA & 0x2) && (number <= 999)) { /* display whatever is stored in the number variable */
    // display a number
    if (number >= 100) {
      digit1 = hundreds(number);
 59a:	40 93 79 00 	sts	0x0079, r20
 59e:	03 c0       	rjmp	.+6      	; 0x5a6 <SIG_OUTPUT_COMPARE0A+0x160>
    } else {
      digit1 = ' ';
 5a0:	80 e2       	ldi	r24, 0x20	; 32
 5a2:	80 93 79 00 	sts	0x0079, r24
    }
    
    if (number >= 10) {
 5a6:	80 91 72 00 	lds	r24, 0x0072
 5aa:	90 91 73 00 	lds	r25, 0x0073
 5ae:	0a 97       	sbiw	r24, 0x0a	; 10
 5b0:	30 f0       	brcs	.+12     	; 0x5be <SIG_OUTPUT_COMPARE0A+0x178>
      digit2 = tens(number);
 5b2:	80 91 72 00 	lds	r24, 0x0072
 5b6:	90 91 73 00 	lds	r25, 0x0073
 5ba:	7a dd       	rcall	.-1292   	; 0xb0 <tens>
 5bc:	01 c0       	rjmp	.+2      	; 0x5c0 <SIG_OUTPUT_COMPARE0A+0x17a>
    } else {
      digit2 = ' ';
 5be:	80 e2       	ldi	r24, 0x20	; 32
 5c0:	80 93 74 00 	sts	0x0074, r24
    }
    
    digit3 = number % 10;
 5c4:	80 91 72 00 	lds	r24, 0x0072
 5c8:	90 91 73 00 	lds	r25, 0x0073
 5cc:	6a e0       	ldi	r22, 0x0A	; 10
 5ce:	70 e0       	ldi	r23, 0x00	; 0
 5d0:	6b d0       	rcall	.+214    	; 0x6a8 <__udivmodhi4>
 5d2:	80 93 75 00 	sts	0x0075, r24
  } else {
    // do whatever the main code sez
  }
  
  per_digit_timer--;
 5d6:	80 91 76 00 	lds	r24, 0x0076
 5da:	81 50       	subi	r24, 0x01	; 1
 5dc:	80 93 76 00 	sts	0x0076, r24
  if (per_digit_timer == 0) {		
 5e0:	80 91 76 00 	lds	r24, 0x0076
 5e4:	88 23       	and	r24, r24
 5e6:	09 f0       	breq	.+2      	; 0x5ea <SIG_OUTPUT_COMPARE0A+0x1a4>
 5e8:	4e c0       	rjmp	.+156    	; 0x686 <SIG_OUTPUT_COMPARE0A+0x240>
    current_digit_displayed++;
 5ea:	80 91 6a 00 	lds	r24, 0x006A
 5ee:	8f 5f       	subi	r24, 0xFF	; 255
 5f0:	80 93 6a 00 	sts	0x006A, r24
    if (current_digit_displayed >= 3)
 5f4:	80 91 6a 00 	lds	r24, 0x006A
 5f8:	83 30       	cpi	r24, 0x03	; 3
 5fa:	10 f0       	brcs	.+4      	; 0x600 <SIG_OUTPUT_COMPARE0A+0x1ba>
      current_digit_displayed = 0;
 5fc:	10 92 6a 00 	sts	0x006A, r1
    
    if (current_digit_displayed == 0) { 
 600:	80 91 6a 00 	lds	r24, 0x006A
 604:	88 23       	and	r24, r24
 606:	99 f4       	brne	.+38     	; 0x62e <SIG_OUTPUT_COMPARE0A+0x1e8>
      if (segments(digit1) == 0) {
 608:	80 91 79 00 	lds	r24, 0x0079
 60c:	bc dd       	rcall	.-1160   	; 0x186 <segments>
 60e:	88 23       	and	r24, r24
 610:	29 f4       	brne	.+10     	; 0x61c <SIG_OUTPUT_COMPARE0A+0x1d6>
	SEG_CC1_PORT |= _BV(SEG_CC1);
 612:	c1 9a       	sbi	0x18, 1	; 24
	current_digit_displayed = 1;
 614:	81 e0       	ldi	r24, 0x01	; 1
 616:	80 93 6a 00 	sts	0x006A, r24
 61a:	09 c0       	rjmp	.+18     	; 0x62e <SIG_OUTPUT_COMPARE0A+0x1e8>
      } else {
	display_digit(0, digit1);
 61c:	60 91 79 00 	lds	r22, 0x0079
 620:	80 e0       	ldi	r24, 0x00	; 0
 622:	83 dd       	rcall	.-1274   	; 0x12a <display_digit>
	per_digit_timer = segments(digit1);
 624:	80 91 79 00 	lds	r24, 0x0079
 628:	ae dd       	rcall	.-1188   	; 0x186 <segments>
 62a:	80 93 76 00 	sts	0x0076, r24
      }
    }
    if (current_digit_displayed == 1) {
 62e:	80 91 6a 00 	lds	r24, 0x006A
 632:	81 30       	cpi	r24, 0x01	; 1
 634:	99 f4       	brne	.+38     	; 0x65c <SIG_OUTPUT_COMPARE0A+0x216>
      if (segments(digit2) == 0) {
 636:	80 91 74 00 	lds	r24, 0x0074
 63a:	a5 dd       	rcall	.-1206   	; 0x186 <segments>
 63c:	88 23       	and	r24, r24
 63e:	29 f4       	brne	.+10     	; 0x64a <SIG_OUTPUT_COMPARE0A+0x204>
	SEG_CC2_PORT |= _BV(SEG_CC2);
 640:	90 9a       	sbi	0x12, 0	; 18
	current_digit_displayed = 2;
 642:	82 e0       	ldi	r24, 0x02	; 2
 644:	80 93 6a 00 	sts	0x006A, r24
 648:	09 c0       	rjmp	.+18     	; 0x65c <SIG_OUTPUT_COMPARE0A+0x216>
      } else {
	display_digit(1, digit2);
 64a:	60 91 74 00 	lds	r22, 0x0074
 64e:	81 e0       	ldi	r24, 0x01	; 1
 650:	6c dd       	rcall	.-1320   	; 0x12a <display_digit>
	per_digit_timer = segments(digit2);
 652:	80 91 74 00 	lds	r24, 0x0074
 656:	97 dd       	rcall	.-1234   	; 0x186 <segments>
 658:	80 93 76 00 	sts	0x0076, r24
      }
    } 
    if (current_digit_displayed == 2) {
 65c:	80 91 6a 00 	lds	r24, 0x006A
 660:	82 30       	cpi	r24, 0x02	; 2
 662:	89 f4       	brne	.+34     	; 0x686 <SIG_OUTPUT_COMPARE0A+0x240>
      if (segments(digit3) == 0) {
 664:	80 91 75 00 	lds	r24, 0x0075
 668:	8e dd       	rcall	.-1252   	; 0x186 <segments>
 66a:	88 23       	and	r24, r24
 66c:	19 f4       	brne	.+6      	; 0x674 <SIG_OUTPUT_COMPARE0A+0x22e>
	SEG_CC3_PORT |= _BV(SEG_CC3);
 66e:	94 9a       	sbi	0x12, 4	; 18
	per_digit_timer = 1;
 670:	81 e0       	ldi	r24, 0x01	; 1
 672:	07 c0       	rjmp	.+14     	; 0x682 <SIG_OUTPUT_COMPARE0A+0x23c>
      } else {
	display_digit(2, digit3);
 674:	60 91 75 00 	lds	r22, 0x0075
 678:	82 e0       	ldi	r24, 0x02	; 2
 67a:	57 dd       	rcall	.-1362   	; 0x12a <display_digit>
	per_digit_timer = segments(digit3);
 67c:	80 91 75 00 	lds	r24, 0x0075
 680:	82 dd       	rcall	.-1276   	; 0x186 <segments>
 682:	80 93 76 00 	sts	0x0076, r24
 686:	ff 91       	pop	r31
 688:	ef 91       	pop	r30
 68a:	bf 91       	pop	r27
 68c:	af 91       	pop	r26
 68e:	9f 91       	pop	r25
 690:	8f 91       	pop	r24
 692:	7f 91       	pop	r23
 694:	6f 91       	pop	r22
 696:	5f 91       	pop	r21
 698:	4f 91       	pop	r20
 69a:	3f 91       	pop	r19
 69c:	2f 91       	pop	r18
 69e:	0f 90       	pop	r0
 6a0:	0f be       	out	0x3f, r0	; 63
 6a2:	0f 90       	pop	r0
 6a4:	1f 90       	pop	r1
 6a6:	18 95       	reti

000006a8 <__udivmodhi4>:
 6a8:	aa 1b       	sub	r26, r26
 6aa:	bb 1b       	sub	r27, r27
 6ac:	51 e1       	ldi	r21, 0x11	; 17
 6ae:	07 c0       	rjmp	.+14     	; 0x6be <__udivmodhi4_ep>

000006b0 <__udivmodhi4_loop>:
 6b0:	aa 1f       	adc	r26, r26
 6b2:	bb 1f       	adc	r27, r27
 6b4:	a6 17       	cp	r26, r22
 6b6:	b7 07       	cpc	r27, r23
 6b8:	10 f0       	brcs	.+4      	; 0x6be <__udivmodhi4_ep>
 6ba:	a6 1b       	sub	r26, r22
 6bc:	b7 0b       	sbc	r27, r23

000006be <__udivmodhi4_ep>:
 6be:	88 1f       	adc	r24, r24
 6c0:	99 1f       	adc	r25, r25
 6c2:	5a 95       	dec	r21
 6c4:	a9 f7       	brne	.-22     	; 0x6b0 <__udivmodhi4_loop>
 6c6:	80 95       	com	r24
 6c8:	90 95       	com	r25
 6ca:	bc 01       	movw	r22, r24
 6cc:	cd 01       	movw	r24, r26
 6ce:	08 95       	ret

000006d0 <__eeprom_read_word_1C1D1E>:
 6d0:	09 d0       	rcall	.+18     	; 0x6e4 <__eeprom_read_byte_1C1D1E>
 6d2:	e0 2d       	mov	r30, r0
 6d4:	07 d0       	rcall	.+14     	; 0x6e4 <__eeprom_read_byte_1C1D1E>
 6d6:	f0 2d       	mov	r31, r0
 6d8:	08 95       	ret

000006da <__eeprom_write_word_1C1D1E>:
 6da:	0c d0       	rcall	.+24     	; 0x6f4 <__eeprom_write_byte_1C1D1E>
 6dc:	01 2c       	mov	r0, r1
 6de:	0a d0       	rcall	.+20     	; 0x6f4 <__eeprom_write_byte_1C1D1E>
 6e0:	11 24       	eor	r1, r1
 6e2:	08 95       	ret

000006e4 <__eeprom_read_byte_1C1D1E>:
 6e4:	e1 99       	sbic	0x1c, 1	; 28
 6e6:	fe cf       	rjmp	.-4      	; 0x6e4 <__eeprom_read_byte_1C1D1E>
 6e8:	bf bb       	out	0x1f, r27	; 31
 6ea:	ae bb       	out	0x1e, r26	; 30
 6ec:	e0 9a       	sbi	0x1c, 0	; 28
 6ee:	11 96       	adiw	r26, 0x01	; 1
 6f0:	0d b2       	in	r0, 0x1d	; 29
 6f2:	08 95       	ret

000006f4 <__eeprom_write_byte_1C1D1E>:
 6f4:	e1 99       	sbic	0x1c, 1	; 28
 6f6:	fe cf       	rjmp	.-4      	; 0x6f4 <__eeprom_write_byte_1C1D1E>
 6f8:	bf bb       	out	0x1f, r27	; 31
 6fa:	ae bb       	out	0x1e, r26	; 30
 6fc:	0d ba       	out	0x1d, r0	; 29
 6fe:	11 96       	adiw	r26, 0x01	; 1
 700:	0f b6       	in	r0, 0x3f	; 63
 702:	f8 94       	cli
 704:	e2 9a       	sbi	0x1c, 2	; 28
 706:	e1 9a       	sbi	0x1c, 1	; 28
 708:	0f be       	out	0x3f, r0	; 63
 70a:	08 95       	ret

0000070c <_exit>:
 70c:	ff cf       	rjmp	.-2      	; 0x70c <_exit>
