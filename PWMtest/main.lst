   1               		.file	"main.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   9               		.text
  10               	.Ltext0:
  74               	.global	delay_ms
  76               	delay_ms:
  77               		.stabd	46,0,0
   1:main.c        **** /* PWM test */
   2:main.c        **** 
   3:main.c        **** /* Include useful pre-defined functions */
   4:main.c        **** #include <avr/interrupt.h>    // Enable interrupt functions.
   5:main.c        **** #define F_CPU 8000000	      // Sets up the default speed for delay.h
   6:main.c        **** #include <avr/io.h>           // Defines pins, ports, etc to make programs easier to read
   7:main.c        **** #include <util/delay.h>
   8:main.c        **** 
   9:main.c        **** void delay_ms(uint16_t ms)
  10:main.c        **** {
  79               	.LM0:
  80               	.LFBB1:
  81               	/* prologue: function */
  82               	/* frame size = 0 */
  83               	/* stack size = 0 */
  84               	.L__stack_usage = 0
  11:main.c        ****     while(ms){
  86               	.LM1:
  87 0000 00C0      		rjmp .L2
  88               	.L3:
  89               	.LBB4:
  90               	.LBB5:
  92               	.Ltext1:
   1:/usr/lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h ****    All rights reserved.
   5:/usr/lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h **** 
   6:/usr/lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h **** 
   9:/usr/lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h **** 
  12:/usr/lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h ****      distribution.
  16:/usr/lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h **** 
  17:/usr/lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h **** 
  21:/usr/lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h **** 
  33:/usr/lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h **** /* $Id: delay.h.in 2251 2011-09-14 08:20:33Z joerg_wunsch $ */
  34:/usr/lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h **** 
  35:/usr/lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h **** 
  38:/usr/lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h **** #ifndef __HAS_DELAY_CYCLES
  39:/usr/lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h **** #define __HAS_DELAY_CYCLES 1
  40:/usr/lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h **** #endif
  41:/usr/lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h **** 
  42:/usr/lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h **** #include <inttypes.h>
  43:/usr/lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h **** #include <util/delay_basic.h>
  44:/usr/lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h **** #include <math.h>
  45:/usr/lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h **** 
  46:/usr/lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h **** /** \file */
  47:/usr/lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  48:/usr/lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h ****     \code
  49:/usr/lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  50:/usr/lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  51:/usr/lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h ****     #include <util/delay.h>
  52:/usr/lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h ****     \endcode
  53:/usr/lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h **** 
  54:/usr/lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  55:/usr/lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  56:/usr/lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  57:/usr/lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h ****     used.
  58:/usr/lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h **** 
  59:/usr/lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  60:/usr/lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  61:/usr/lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  62:/usr/lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  63:/usr/lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  64:/usr/lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  65:/usr/lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  66:/usr/lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  67:/usr/lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h **** 
  68:/usr/lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  69:/usr/lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  70:/usr/lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  71:/usr/lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  72:/usr/lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  73:/usr/lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  74:/usr/lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  75:/usr/lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h ****     routines linked into the application.
  76:/usr/lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h **** 
  77:/usr/lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  78:/usr/lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  79:/usr/lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  80:/usr/lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h **** 
  81:/usr/lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h **** */
  82:/usr/lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h **** 
  83:/usr/lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  84:/usr/lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h **** static inline void _delay_us(double __us) __attribute__((always_inline));
  85:/usr/lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h **** static inline void _delay_ms(double __ms) __attribute__((always_inline));
  86:/usr/lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h **** #endif
  87:/usr/lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h **** 
  88:/usr/lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h **** #ifndef F_CPU
  89:/usr/lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  90:/usr/lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  91:/usr/lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h **** # define F_CPU 1000000UL
  92:/usr/lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h **** #endif
  93:/usr/lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h **** 
  94:/usr/lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h **** #ifndef __OPTIMIZE__
  95:/usr/lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
  96:/usr/lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h **** #endif
  97:/usr/lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h **** 
  98:/usr/lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
  99:/usr/lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 100:/usr/lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h ****   __STDC_HOSTED__
 101:/usr/lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h **** #  include <math.h>
 102:/usr/lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h **** #endif
 103:/usr/lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h **** 
 104:/usr/lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h **** /**
 105:/usr/lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h ****    \ingroup util_delay
 106:/usr/lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h **** 
 107:/usr/lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 108:/usr/lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h **** 
 109:/usr/lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 110:/usr/lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 111:/usr/lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h **** 
 112:/usr/lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 113:/usr/lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h **** 
 114:/usr/lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 115:/usr/lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 116:/usr/lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 117:/usr/lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 118:/usr/lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 119:/usr/lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h **** 
 120:/usr/lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles(unsigned long)
 121:/usr/lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 122:/usr/lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 123:/usr/lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h ****    no delay i.e., 0ms.
 124:/usr/lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h **** 
 125:/usr/lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h ****    Conversion of __us into clock cycles may not always result in integer.
 126:/usr/lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h ****    By default, the clock cycles rounded up to next integer. This ensures that
 127:/usr/lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h ****    the user gets atleast __us microseconds of delay.
 128:/usr/lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h **** 
 129:/usr/lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h ****    Alternatively, user can define __DELAY_ROUND_DOWN__ and __DELAY_ROUND_CLOSEST__
 130:/usr/lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h ****    to round down and round to closest integer.
 131:/usr/lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h **** 
 132:/usr/lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h ****    Note: The new implementation of _delay_ms(double __ms) with 
 133:/usr/lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h ****     __builtin_avr_delay_cycles(unsigned long) support is not backward compatible. 
 134:/usr/lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h ****    User can define __DELAY_BACKWARD_COMPATIBLE__ to get a backward compatible delay.
 135:/usr/lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h ****    Also, the backward compatible
 136:/usr/lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h ****    algorithm will be chosen if the code is compiled in a <em>freestanding
 137:/usr/lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h ****    environment</em> (GCC option \c -ffreestanding), as the math functions
 138:/usr/lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h ****    required for rounding are not available to the compiler then.
 139:/usr/lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h **** 
 140:/usr/lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h ****  */
 141:/usr/lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h **** void
 142:/usr/lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h **** _delay_ms(double __ms)
 143:/usr/lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h **** {
 144:/usr/lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h **** 	uint16_t __ticks;
 145:/usr/lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h **** 	double __tmp ; 
 146:/usr/lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 147:/usr/lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 148:/usr/lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h ****   __STDC_HOSTED__
 149:/usr/lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 150:/usr/lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 151:/usr/lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 152:/usr/lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h **** 
 153:/usr/lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 154:/usr/lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 155:/usr/lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h **** 
 156:/usr/lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 157:/usr/lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 158:/usr/lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h **** 
 159:/usr/lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h **** 	#else
 160:/usr/lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h **** 		//round up by default
 161:/usr/lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 162:/usr/lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h **** 	#endif
 163:/usr/lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h **** 
 164:/usr/lib/gcc/avr/4.7.2/../../../../avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
  94               	.LM2:
  95 0002 EFEC      		ldi r30,lo8(1999)
  96 0004 F7E0      		ldi r31,hi8(1999)
  97 0006 3197      		1: sbiw r30,1
  98 0008 01F4      		brne 1b
  99 000a 00C0      		rjmp .
 100 000c 0000      		nop
 101               	.LBE5:
 102               	.LBE4:
 104               	.Ltext2:
  12:main.c        ****         _delay_ms(1);
  13:main.c        ****         ms--;
 106               	.LM3:
 107 000e 0197      		sbiw r24,1
 108               	.L2:
  11:main.c        ****     while(ms){
 110               	.LM4:
 111 0010 0097      		sbiw r24,0
 112 0012 01F4      		brne .L3
 113               	/* epilogue start */
  14:main.c        ****     }
  15:main.c        **** }
 115               	.LM5:
 116 0014 0895      		ret
 118               	.Lscope1:
 120               		.stabd	78,0,0
 121               		.section	.text.startup,"ax",@progbits
 123               	.global	main
 125               	main:
 126               		.stabd	46,0,0
  16:main.c        **** 
  17:main.c        **** int main(void)
  18:main.c        **** {
 128               	.LM6:
 129               	.LFBB2:
 130               	/* prologue: function */
 131               	/* frame size = 0 */
 132               	/* stack size = 0 */
 133               	.L__stack_usage = 0
  19:main.c        **** 	delay_ms(10); // Let the power stabilize.	
 135               	.LM7:
 136 0000 8AE0      		ldi r24,lo8(10)
 137 0002 90E0      		ldi r25,0
 138 0004 0E94 0000 		call delay_ms
  20:main.c        **** 	cli(); // Disable interrupts.
 140               	.LM8:
 141               	/* #APP */
 142               	 ;  20 "main.c" 1
 143 0008 F894      		cli
 144               	 ;  0 "" 2
  21:main.c        ****         
  22:main.c        ****     DDRB = 0b00000111; // Pins B0-2 are output.
 146               	.LM9:
 147               	/* #NOAPP */
 148 000a 87E0      		ldi r24,lo8(7)
 149 000c 84B9      		out 0x4,r24
  23:main.c        ****     
  24:main.c        ****     // Timer stuff for PWM
  25:main.c        ****     ICR1 = 200; // Freq.
 151               	.LM10:
 152 000e 88EC      		ldi r24,lo8(-56)
 153 0010 90E0      		ldi r25,0
 154 0012 9093 8700 		sts 134+1,r25
 155 0016 8093 8600 		sts 134,r24
  26:main.c        ****     OCR1A = 100; // Test start values.
 157               	.LM11:
 158 001a 84E6      		ldi r24,lo8(100)
 159 001c 90E0      		ldi r25,0
 160 001e 9093 8900 		sts 136+1,r25
 161 0022 8093 8800 		sts 136,r24
  27:main.c        ****     OCR1B = 100;
 163               	.LM12:
 164 0026 9093 8B00 		sts 138+1,r25
 165 002a 8093 8A00 		sts 138,r24
  28:main.c        ****     
  29:main.c        ****     TCCR1A = (1<<COM1A1)|(1<<COM1A0)|(1<<COM1B1); // OC1A = noninvert, OC1B = invert.
 167               	.LM13:
 168 002e 80EE      		ldi r24,lo8(-32)
 169 0030 8093 8000 		sts 128,r24
  30:main.c        **** 	TCCR1B = (1<<WGM13)|(1<<CS10); // Phase/Freq. correct PWM, Clk/1.
 171               	.LM14:
 172 0034 81E1      		ldi r24,lo8(17)
 173 0036 8093 8100 		sts 129,r24
  31:main.c        **** 
  32:main.c        **** 	PORTB |= (1<<PB0); // Enable controller.
 175               	.LM15:
 176 003a 289A      		sbi 0x5,0
 177               	.LBB6:
  33:main.c        **** 
  34:main.c        **** 	while(1) // Main loop.
  35:main.c        **** 	{
  36:main.c        ****         //OCR1A = 50; OCR1B = 50;
  37:main.c        ****         //delay_ms(4000);
  38:main.c        ****         OCR1A = 100; OCR1B = 100;
 179               	.LM16:
 180 003c 04E6      		ldi r16,lo8(100)
 181 003e 10E0      		ldi r17,0
 182               	.L6:
 183 0040 1093 8900 		sts 136+1,r17
 184 0044 0093 8800 		sts 136,r16
 185 0048 1093 8B00 		sts 138+1,r17
 186 004c 0093 8A00 		sts 138,r16
  39:main.c        ****         delay_ms(4000);
 188               	.LM17:
 189 0050 80EA      		ldi r24,lo8(-96)
 190 0052 9FE0      		ldi r25,lo8(15)
 191 0054 0E94 0000 		call delay_ms
 192 0058 C4E6      		ldi r28,lo8(100)
 193 005a D0E0      		ldi r29,0
 194               	.L5:
  40:main.c        **** 		
  41:main.c        **** 		uint8_t i;
  42:main.c        **** 		for(i=0; i<100; i++)
  43:main.c        **** 		{
  44:main.c        **** 			OCR1A = 100-i; OCR1B = OCR1A;
 196               	.LM18:
 197 005c D093 8900 		sts 136+1,r29
 198 0060 C093 8800 		sts 136,r28
 199 0064 8091 8800 		lds r24,136
 200 0068 9091 8900 		lds r25,136+1
 201 006c 9093 8B00 		sts 138+1,r25
 202 0070 8093 8A00 		sts 138,r24
  45:main.c        **** 			delay_ms(50);
 204               	.LM19:
 205 0074 82E3      		ldi r24,lo8(50)
 206 0076 90E0      		ldi r25,0
 207 0078 0E94 0000 		call delay_ms
 208 007c 2197      		sbiw r28,1
  42:main.c        **** 		for(i=0; i<100; i++)
 210               	.LM20:
 211 007e 01F4      		brne .L5
 212 0080 00C0      		rjmp .L6
 213               	.LBE6:
 215               	.Lscope2:
 217               		.stabd	78,0,0
 218               		.text
 220               	.Letext0:
 221               		.ident	"GCC: (GNU) 4.7.2"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccPhL2vt.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccPhL2vt.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccPhL2vt.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccPhL2vt.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccPhL2vt.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccPhL2vt.s:76     .text:0000000000000000 delay_ms
     /tmp/ccPhL2vt.s:125    .text.startup:0000000000000000 main

NO UNDEFINED SYMBOLS
