
pwm.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000056  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000056  000000ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00000c24  00000000  00000000  000000cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000bf9  00000000  00000000  00000cf0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  000018e9  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	09 c0       	rjmp	.+18     	; 0x14 <__ctors_end>
   2:	0e c0       	rjmp	.+28     	; 0x20 <__bad_interrupt>
   4:	0d c0       	rjmp	.+26     	; 0x20 <__bad_interrupt>
   6:	0c c0       	rjmp	.+24     	; 0x20 <__bad_interrupt>
   8:	0b c0       	rjmp	.+22     	; 0x20 <__bad_interrupt>
   a:	0a c0       	rjmp	.+20     	; 0x20 <__bad_interrupt>
   c:	09 c0       	rjmp	.+18     	; 0x20 <__bad_interrupt>
   e:	08 c0       	rjmp	.+16     	; 0x20 <__bad_interrupt>
  10:	07 c0       	rjmp	.+14     	; 0x20 <__bad_interrupt>
  12:	06 c0       	rjmp	.+12     	; 0x20 <__bad_interrupt>

00000014 <__ctors_end>:
  14:	11 24       	eor	r1, r1
  16:	1f be       	out	0x3f, r1	; 63
  18:	cf e9       	ldi	r28, 0x9F	; 159
  1a:	cd bf       	out	0x3d, r28	; 61
  1c:	02 d0       	rcall	.+4      	; 0x22 <main>
  1e:	19 c0       	rjmp	.+50     	; 0x52 <_exit>

00000020 <__bad_interrupt>:
  20:	ef cf       	rjmp	.-34     	; 0x0 <__vectors>

00000022 <main>:
// Target frequency: 38kHz

int main(void)
{
	// Timer0 settings.
	TCCR0A = (1<<COM0A0)|(1<<WGM01); // Toggle OC0A on compare.
  22:	82 e4       	ldi	r24, 0x42	; 66
  24:	8f bd       	out	0x2f, r24	; 47
	TCCR0B = (1<<CS00); // Enable system clock to timer, no prescale.
  26:	81 e0       	ldi	r24, 0x01	; 1
  28:	83 bf       	out	0x33, r24	; 51
	OCR0A = 245/2;
  2a:	9a e7       	ldi	r25, 0x7A	; 122
  2c:	96 bf       	out	0x36, r25	; 54
	DDRB = (1<<0); // PB0 = output
  2e:	87 bb       	out	0x17, r24	; 23

	uint8_t i;
		
	while(1)
	{
		i=20; // ms delay
  30:	84 e1       	ldi	r24, 0x14	; 20
		while(i)
		{
			_delay_ms(1);
			i--;
		}
		DDRB ^= (1<<0);
  32:	91 e0       	ldi	r25, 0x01	; 1
	uint8_t i;
		
	while(1)
	{
		i=20; // ms delay
		while(i)
  34:	88 23       	and	r24, r24
  36:	41 f0       	breq	.+16     	; 0x48 <__SREG__+0x9>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  38:	ef e5       	ldi	r30, 0x5F	; 95
  3a:	f9 e0       	ldi	r31, 0x09	; 9
  3c:	31 97       	sbiw	r30, 0x01	; 1
  3e:	f1 f7       	brne	.-4      	; 0x3c <main+0x1a>
  40:	00 c0       	rjmp	.+0      	; 0x42 <__SREG__+0x3>
  42:	00 00       	nop
		{
			_delay_ms(1);
			i--;
  44:	81 50       	subi	r24, 0x01	; 1
  46:	f6 cf       	rjmp	.-20     	; 0x34 <main+0x12>
		}
		DDRB ^= (1<<0);
  48:	87 b3       	in	r24, 0x17	; 23
  4a:	89 27       	eor	r24, r25
  4c:	87 bb       	out	0x17, r24	; 23

	uint8_t i;
		
	while(1)
	{
		i=20; // ms delay
  4e:	84 e1       	ldi	r24, 0x14	; 20
		{
			_delay_ms(1);
			i--;
		}
		DDRB ^= (1<<0);
    }
  50:	f3 cf       	rjmp	.-26     	; 0x38 <main+0x16>

00000052 <_exit>:
  52:	f8 94       	cli

00000054 <__stop_program>:
  54:	ff cf       	rjmp	.-2      	; 0x54 <__stop_program>
