
diggZ.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000006fe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  000006fe  00000792  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  00800078  00000716  000007aa  2**0
                  ALLOC
  3 .eeprom       00000002  00810000  00810000  000007aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         00000360  00000000  00000000  000007ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      0000005f  00000000  00000000  00000b0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_aranges 00000040  00000000  00000000  00000b6b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 000001b3  00000000  00000000  00000bab  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0000072f  00000000  00000000  00000d5e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000002d3  00000000  00000000  0000148d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000076e  00000000  00000000  00001760  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  000000c0  00000000  00000000  00001ed0  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00000260  00000000  00000000  00001f90  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000039a  00000000  00000000  000021f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000018  00000000  00000000  0000258a  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	26 c0       	rjmp	.+76     	; 0x4e <__ctors_end>
   2:	df c1       	rjmp	.+958    	; 0x3c2 <__vector_1>
   4:	3d c0       	rjmp	.+122    	; 0x80 <__bad_interrupt>
   6:	3c c0       	rjmp	.+120    	; 0x80 <__bad_interrupt>
   8:	3b c0       	rjmp	.+118    	; 0x80 <__bad_interrupt>
   a:	3a c0       	rjmp	.+116    	; 0x80 <__bad_interrupt>
   c:	39 c0       	rjmp	.+114    	; 0x80 <__bad_interrupt>
   e:	38 c0       	rjmp	.+112    	; 0x80 <__bad_interrupt>
  10:	37 c0       	rjmp	.+110    	; 0x80 <__bad_interrupt>
  12:	36 c0       	rjmp	.+108    	; 0x80 <__bad_interrupt>
  14:	35 c0       	rjmp	.+106    	; 0x80 <__bad_interrupt>
  16:	34 c0       	rjmp	.+104    	; 0x80 <__bad_interrupt>
  18:	33 c0       	rjmp	.+102    	; 0x80 <__bad_interrupt>
  1a:	ae c0       	rjmp	.+348    	; 0x178 <__vector_13>
  1c:	31 c0       	rjmp	.+98     	; 0x80 <__bad_interrupt>
  1e:	30 c0       	rjmp	.+96     	; 0x80 <__bad_interrupt>
  20:	2f c0       	rjmp	.+94     	; 0x80 <__bad_interrupt>
  22:	2e c0       	rjmp	.+92     	; 0x80 <__bad_interrupt>
  24:	2d c0       	rjmp	.+90     	; 0x80 <__bad_interrupt>

00000026 <numbertable>:
  26:	7e 30 6d 79 33 5b 5f 70 7f 73                       ~0my3[_p.s

00000030 <numbertable_p>:
  30:	26 00                                               &.

00000032 <alphatable>:
  32:	7d 1f 0d 3d 6f 47 7b 17 30 3c 57 0e 55 15 1d 67     }..=oG{.0<W.U..g
  42:	f3 05 5b 0f 1c 1c 5c 37 3b 6d                       ..[...\7;m

0000004c <alphatable_p>:
  4c:	32 00                                               2.

0000004e <__ctors_end>:
  4e:	11 24       	eor	r1, r1
  50:	1f be       	out	0x3f, r1	; 63
  52:	cf ed       	ldi	r28, 0xDF	; 223
  54:	cd bf       	out	0x3d, r28	; 61

00000056 <__do_copy_data>:
  56:	10 e0       	ldi	r17, 0x00	; 0
  58:	a0 e6       	ldi	r26, 0x60	; 96
  5a:	b0 e0       	ldi	r27, 0x00	; 0
  5c:	ee ef       	ldi	r30, 0xFE	; 254
  5e:	f6 e0       	ldi	r31, 0x06	; 6
  60:	02 c0       	rjmp	.+4      	; 0x66 <.do_copy_data_start>

00000062 <.do_copy_data_loop>:
  62:	05 90       	lpm	r0, Z+
  64:	0d 92       	st	X+, r0

00000066 <.do_copy_data_start>:
  66:	a8 37       	cpi	r26, 0x78	; 120
  68:	b1 07       	cpc	r27, r17
  6a:	d9 f7       	brne	.-10     	; 0x62 <.do_copy_data_loop>

0000006c <__do_clear_bss>:
  6c:	10 e0       	ldi	r17, 0x00	; 0
  6e:	a8 e7       	ldi	r26, 0x78	; 120
  70:	b0 e0       	ldi	r27, 0x00	; 0
  72:	01 c0       	rjmp	.+2      	; 0x76 <.do_clear_bss_start>

00000074 <.do_clear_bss_loop>:
  74:	1d 92       	st	X+, r1

00000076 <.do_clear_bss_start>:
  76:	a8 38       	cpi	r26, 0x88	; 136
  78:	b1 07       	cpc	r27, r17
  7a:	e1 f7       	brne	.-8      	; 0x74 <.do_clear_bss_loop>
  7c:	c4 d1       	rcall	.+904    	; 0x406 <main>
  7e:	3e c3       	rjmp	.+1660   	; 0x6fc <_exit>

00000080 <__bad_interrupt>:
  80:	bf cf       	rjmp	.-130    	; 0x0 <__vectors>

00000082 <display_one>:
  }
}



void display_one(uint8_t d) {
  82:	28 2f       	mov	r18, r24
  84:	80 ff       	sbrs	r24, 0
  86:	02 c0       	rjmp	.+4      	; 0x8c <display_one+0xa>
	if (d & 0x1)  // G 
		PORTD |= _BV(SEG_G);
  88:	91 9a       	sbi	0x12, 1	; 18
  8a:	01 c0       	rjmp	.+2      	; 0x8e <display_one+0xc>
	else
		PORTD &= ~_BV(SEG_G);
  8c:	91 98       	cbi	0x12, 1	; 18

	if (d & 0x2)  // F 
  8e:	21 ff       	sbrs	r18, 1
  90:	02 c0       	rjmp	.+4      	; 0x96 <display_one+0x14>
		PORTB  |= _BV(SEG_F);
  92:	c6 9a       	sbi	0x18, 6	; 24
  94:	01 c0       	rjmp	.+2      	; 0x98 <display_one+0x16>
	else
		PORTB &= ~_BV(SEG_F);
  96:	c6 98       	cbi	0x18, 6	; 24

	if (d & 0x4)  // E
  98:	22 ff       	sbrs	r18, 2
  9a:	02 c0       	rjmp	.+4      	; 0xa0 <display_one+0x1e>
		PORTB  |= _BV(SEG_E);
  9c:	c3 9a       	sbi	0x18, 3	; 24
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <display_one+0x20>
	else
		PORTB &= ~_BV(SEG_E);
  a0:	c3 98       	cbi	0x18, 3	; 24

	if (d & 0x8)  // D
  a2:	23 ff       	sbrs	r18, 3
  a4:	02 c0       	rjmp	.+4      	; 0xaa <display_one+0x28>
		PORTB  |= _BV(SEG_D);
  a6:	c0 9a       	sbi	0x18, 0	; 24
  a8:	01 c0       	rjmp	.+2      	; 0xac <display_one+0x2a>
	else
		PORTB &= ~_BV(SEG_D);
  aa:	c0 98       	cbi	0x18, 0	; 24

	if (d & 0x10)  // C
  ac:	24 ff       	sbrs	r18, 4
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <display_one+0x32>
		PORTB  |= _BV(SEG_C);
  b0:	c2 9a       	sbi	0x18, 2	; 24
  b2:	01 c0       	rjmp	.+2      	; 0xb6 <display_one+0x34>
	else
		PORTB &= ~_BV(SEG_C);
  b4:	c2 98       	cbi	0x18, 2	; 24

	if (d & 0x20)  // B
  b6:	25 ff       	sbrs	r18, 5
  b8:	02 c0       	rjmp	.+4      	; 0xbe <display_one+0x3c>
		PORTB  |= _BV(SEG_B);
  ba:	c4 9a       	sbi	0x18, 4	; 24
  bc:	01 c0       	rjmp	.+2      	; 0xc0 <display_one+0x3e>
	else
		PORTB &= ~_BV(SEG_B);
  be:	c4 98       	cbi	0x18, 4	; 24

	if (d & 0x40)  // A
  c0:	26 ff       	sbrs	r18, 6
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <display_one+0x46>
		PORTB  |= _BV(SEG_A);
  c4:	c5 9a       	sbi	0x18, 5	; 24
  c6:	01 c0       	rjmp	.+2      	; 0xca <display_one+0x48>
	else
		PORTB &= ~_BV(SEG_A);
  c8:	c5 98       	cbi	0x18, 5	; 24

	if (d & 0x80)  // dot
  ca:	87 ff       	sbrs	r24, 7
  cc:	02 c0       	rjmp	.+4      	; 0xd2 <display_one+0x50>
		PORTD  |= _BV(SEG_DP);
  ce:	96 9a       	sbi	0x12, 6	; 18
  d0:	08 95       	ret
	else
		PORTD &= ~_BV(SEG_DP);
  d2:	96 98       	cbi	0x12, 6	; 18
  d4:	08 95       	ret

000000d6 <display_digit>:
}

void display_digit(uint8_t digit, uint8_t value) {
  d6:	1f 93       	push	r17
  d8:	18 2f       	mov	r17, r24

	// turn them all off (to prevent ghosting)
	SEG_CC1_PORT |= _BV(SEG_CC1);
  da:	c1 9a       	sbi	0x18, 1	; 24
	SEG_CC2_PORT |= _BV(SEG_CC2);
  dc:	90 9a       	sbi	0x12, 0	; 18
	SEG_CC3_PORT |= _BV(SEG_CC3);
  de:	94 9a       	sbi	0x12, 4	; 18
	SEG_DCC_PORT |= _BV(SEG_DCC);	
  e0:	c7 9a       	sbi	0x18, 7	; 24

	// set the anodes
	if (value <= 9) {
  e2:	6a 30       	cpi	r22, 0x0A	; 10
  e4:	30 f4       	brcc	.+12     	; 0xf2 <__stack+0x13>
	  display_one(pgm_read_byte(numbertable_p + value));
  e6:	e6 2f       	mov	r30, r22
  e8:	f0 e0       	ldi	r31, 0x00	; 0
  ea:	ea 5d       	subi	r30, 0xDA	; 218
  ec:	ff 4f       	sbci	r31, 0xFF	; 255
  ee:	e4 91       	lpm	r30, Z
  f0:	09 c0       	rjmp	.+18     	; 0x104 <__stack+0x25>
	} else if ((value >= 'a') && (value <= 'z')) {
  f2:	86 2f       	mov	r24, r22
  f4:	81 56       	subi	r24, 0x61	; 97
  f6:	8a 31       	cpi	r24, 0x1A	; 26
  f8:	38 f4       	brcc	.+14     	; 0x108 <__stack+0x29>
	  display_one(pgm_read_byte(alphatable_p + value - 'a'));
  fa:	e6 2f       	mov	r30, r22
  fc:	f0 e0       	ldi	r31, 0x00	; 0
  fe:	ef 52       	subi	r30, 0x2F	; 47
 100:	f0 40       	sbci	r31, 0x00	; 0
 102:	e4 91       	lpm	r30, Z
 104:	8e 2f       	mov	r24, r30
 106:	03 c0       	rjmp	.+6      	; 0x10e <__stack+0x2f>
	} else if (value == ' ') {
 108:	60 32       	cpi	r22, 0x20	; 32
 10a:	11 f4       	brne	.+4      	; 0x110 <__stack+0x31>
		display_one(0x0);
 10c:	80 e0       	ldi	r24, 0x00	; 0
 10e:	b9 df       	rcall	.-142    	; 0x82 <display_one>
	}
	
	// turn on cathodes
	if (digit == 0) {
 110:	11 23       	and	r17, r17
 112:	11 f4       	brne	.+4      	; 0x118 <__stack+0x39>
		SEG_CC1_PORT &= ~_BV(SEG_CC1);
 114:	c1 98       	cbi	0x18, 1	; 24
 116:	0b c0       	rjmp	.+22     	; 0x12e <__stack+0x4f>
	} else if (digit == 1) {
 118:	11 30       	cpi	r17, 0x01	; 1
 11a:	11 f4       	brne	.+4      	; 0x120 <__stack+0x41>
		SEG_CC2_PORT &= ~_BV(SEG_CC2);
 11c:	90 98       	cbi	0x12, 0	; 18
 11e:	07 c0       	rjmp	.+14     	; 0x12e <__stack+0x4f>
	} else if (digit == 2) {
 120:	12 30       	cpi	r17, 0x02	; 2
 122:	11 f4       	brne	.+4      	; 0x128 <__stack+0x49>
		SEG_CC3_PORT &= ~_BV(SEG_CC3);
 124:	94 98       	cbi	0x12, 4	; 18
 126:	03 c0       	rjmp	.+6      	; 0x12e <__stack+0x4f>
	} else if (digit == 3) {
 128:	13 30       	cpi	r17, 0x03	; 3
 12a:	09 f4       	brne	.+2      	; 0x12e <__stack+0x4f>
		SEG_DCC_PORT &= ~_BV(SEG_DCC);
 12c:	c7 98       	cbi	0x18, 7	; 24
 12e:	1f 91       	pop	r17
 130:	08 95       	ret

00000132 <segments>:
	}
}

uint8_t segments(uint8_t value) {
 132:	e8 2f       	mov	r30, r24
	int x, i, j;

	if (value <= 9) {
 134:	8a 30       	cpi	r24, 0x0A	; 10
 136:	50 f4       	brcc	.+20     	; 0x14c <segments+0x1a>
	  x = pgm_read_byte(numbertable_p + value);
 138:	f0 e0       	ldi	r31, 0x00	; 0
 13a:	ea 5d       	subi	r30, 0xDA	; 218
 13c:	ff 4f       	sbci	r31, 0xFF	; 255
 13e:	e4 91       	lpm	r30, Z
 140:	f0 e0       	ldi	r31, 0x00	; 0
 142:	20 e0       	ldi	r18, 0x00	; 0
 144:	30 e0       	ldi	r19, 0x00	; 0
 146:	80 e0       	ldi	r24, 0x00	; 0
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	0d c0       	rjmp	.+26     	; 0x166 <segments+0x34>
	} else if ((value >= 'a') && (value <= 'z')) {
 14c:	81 56       	subi	r24, 0x61	; 97
 14e:	8a 31       	cpi	r24, 0x1A	; 26
 150:	18 f0       	brcs	.+6      	; 0x158 <segments+0x26>
 152:	80 e0       	ldi	r24, 0x00	; 0
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	08 95       	ret
	  x = pgm_read_byte(alphatable_p + value - 'a');
 158:	f0 e0       	ldi	r31, 0x00	; 0
 15a:	ef 52       	subi	r30, 0x2F	; 47
 15c:	f0 40       	sbci	r31, 0x00	; 0
 15e:	e4 91       	lpm	r30, Z
 160:	ef cf       	rjmp	.-34     	; 0x140 <segments+0xe>
	j = 0;

	for (i=0; i<8; i++) {
		if (x & 0x1)
			j++;
		x >>= 1;
 162:	f5 95       	asr	r31
 164:	e7 95       	ror	r30
	}
	
	j = 0;

	for (i=0; i<8; i++) {
		if (x & 0x1)
 166:	e0 fd       	sbrc	r30, 0
			j++;
 168:	01 96       	adiw	r24, 0x01	; 1
	  return 0x0;
	}
	
	j = 0;

	for (i=0; i<8; i++) {
 16a:	2f 5f       	subi	r18, 0xFF	; 255
 16c:	3f 4f       	sbci	r19, 0xFF	; 255
 16e:	28 30       	cpi	r18, 0x08	; 8
 170:	31 05       	cpc	r19, r1
 172:	b9 f7       	brne	.-18     	; 0x162 <segments+0x30>
		if (x & 0x1)
			j++;
		x >>= 1;
	}
	return j;
 174:	90 e0       	ldi	r25, 0x00	; 0
}
 176:	08 95       	ret

00000178 <__vector_13>:
    _delay_ms(10);
  }
}

//SIGNAL (SIG_OUTPUT_COMPARE0A) {
ISR (TIMER0_COMPA_vect) {
 178:	1f 92       	push	r1
 17a:	0f 92       	push	r0
 17c:	0f b6       	in	r0, 0x3f	; 63
 17e:	0f 92       	push	r0
 180:	11 24       	eor	r1, r1
 182:	2f 93       	push	r18
 184:	3f 93       	push	r19
 186:	4f 93       	push	r20
 188:	5f 93       	push	r21
 18a:	6f 93       	push	r22
 18c:	7f 93       	push	r23
 18e:	8f 93       	push	r24
 190:	9f 93       	push	r25
 192:	af 93       	push	r26
 194:	bf 93       	push	r27
 196:	ef 93       	push	r30
 198:	ff 93       	push	r31
  if (button_timer != 0xFFFF) {
 19a:	80 91 85 00 	lds	r24, 0x0085
 19e:	90 91 86 00 	lds	r25, 0x0086
 1a2:	8f 5f       	subi	r24, 0xFF	; 255
 1a4:	9f 4f       	sbci	r25, 0xFF	; 255
 1a6:	49 f0       	breq	.+18     	; 0x1ba <__vector_13+0x42>
    button_timer++;
 1a8:	80 91 85 00 	lds	r24, 0x0085
 1ac:	90 91 86 00 	lds	r25, 0x0086
 1b0:	01 96       	adiw	r24, 0x01	; 1
 1b2:	90 93 86 00 	sts	0x0086, r25
 1b6:	80 93 85 00 	sts	0x0085, r24
  }

  if (display_timer != 0xFFFF) {
 1ba:	80 91 7e 00 	lds	r24, 0x007E
 1be:	90 91 7f 00 	lds	r25, 0x007F
 1c2:	8f 5f       	subi	r24, 0xFF	; 255
 1c4:	9f 4f       	sbci	r25, 0xFF	; 255
 1c6:	b1 f1       	breq	.+108    	; 0x234 <__vector_13+0xbc>
    display_timer++;
 1c8:	80 91 7e 00 	lds	r24, 0x007E
 1cc:	90 91 7f 00 	lds	r25, 0x007F
 1d0:	01 96       	adiw	r24, 0x01	; 1
 1d2:	90 93 7f 00 	sts	0x007F, r25
 1d6:	80 93 7e 00 	sts	0x007E, r24
    if (display_timer >= SCROLL_SPEED) {
 1da:	80 91 7e 00 	lds	r24, 0x007E
 1de:	90 91 7f 00 	lds	r25, 0x007F
 1e2:	84 5f       	subi	r24, 0xF4	; 244
 1e4:	91 40       	sbci	r25, 0x01	; 1
 1e6:	30 f1       	brcs	.+76     	; 0x234 <__vector_13+0xbc>
      display_timer = 0;
 1e8:	10 92 7f 00 	sts	0x007F, r1
 1ec:	10 92 7e 00 	sts	0x007E, r1
      string_index++;
 1f0:	80 91 7d 00 	lds	r24, 0x007D
 1f4:	8f 5f       	subi	r24, 0xFF	; 255
 1f6:	80 93 7d 00 	sts	0x007D, r24
      if (string_index > strlen(display_string)+3)
 1fa:	80 91 7d 00 	lds	r24, 0x007D
 1fe:	a0 91 76 00 	lds	r26, 0x0076
 202:	b0 91 77 00 	lds	r27, 0x0077
 206:	fd 01       	movw	r30, r26
 208:	01 90       	ld	r0, Z+
 20a:	00 20       	and	r0, r0
 20c:	e9 f7       	brne	.-6      	; 0x208 <__vector_13+0x90>
 20e:	ea 1b       	sub	r30, r26
 210:	fb 0b       	sbc	r31, r27
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	32 96       	adiw	r30, 0x02	; 2
 216:	e8 17       	cp	r30, r24
 218:	f9 07       	cpc	r31, r25
 21a:	60 f4       	brcc	.+24     	; 0x234 <__vector_13+0xbc>
	string_index -= strlen(display_string);
 21c:	80 91 7d 00 	lds	r24, 0x007D
 220:	fd 01       	movw	r30, r26
 222:	01 90       	ld	r0, Z+
 224:	00 20       	and	r0, r0
 226:	e9 f7       	brne	.-6      	; 0x222 <__vector_13+0xaa>
 228:	31 97       	sbiw	r30, 0x01	; 1
 22a:	ea 1b       	sub	r30, r26
 22c:	fb 0b       	sbc	r31, r27
 22e:	8e 1b       	sub	r24, r30
 230:	80 93 7d 00 	sts	0x007D, r24
    }
  }

  if (PINA & 0x1) {
 234:	c8 9b       	sbis	0x19, 0	; 25
 236:	2b c0       	rjmp	.+86     	; 0x28e <__vector_13+0x116>
    if (poweroff_timer < POWEROFF_TIME) {
 238:	80 91 79 00 	lds	r24, 0x0079
 23c:	90 91 7a 00 	lds	r25, 0x007A
 240:	a0 91 7b 00 	lds	r26, 0x007B
 244:	b0 91 7c 00 	lds	r27, 0x007C
 248:	80 56       	subi	r24, 0x60	; 96
 24a:	9a 4e       	sbci	r25, 0xEA	; 234
 24c:	a0 40       	sbci	r26, 0x00	; 0
 24e:	b0 40       	sbci	r27, 0x00	; 0
 250:	a0 f4       	brcc	.+40     	; 0x27a <__vector_13+0x102>
      poweroff_timer++;
 252:	80 91 79 00 	lds	r24, 0x0079
 256:	90 91 7a 00 	lds	r25, 0x007A
 25a:	a0 91 7b 00 	lds	r26, 0x007B
 25e:	b0 91 7c 00 	lds	r27, 0x007C
 262:	01 96       	adiw	r24, 0x01	; 1
 264:	a1 1d       	adc	r26, r1
 266:	b1 1d       	adc	r27, r1
 268:	80 93 79 00 	sts	0x0079, r24
 26c:	90 93 7a 00 	sts	0x007A, r25
 270:	a0 93 7b 00 	sts	0x007B, r26
 274:	b0 93 7c 00 	sts	0x007C, r27
 278:	0a c0       	rjmp	.+20     	; 0x28e <__vector_13+0x116>
    } else {
      // time to sleep!
      // turn off all LEDs
      
      display_digit(9, 99);
 27a:	63 e6       	ldi	r22, 0x63	; 99
 27c:	89 e0       	ldi	r24, 0x09	; 9
 27e:	2b df       	rcall	.-426    	; 0xd6 <display_digit>
      MCUCR |= _BV(SM1) | _BV(SM0) | _BV(SE);
 280:	85 b7       	in	r24, 0x35	; 53
 282:	80 67       	ori	r24, 0x70	; 112
 284:	85 bf       	out	0x35, r24	; 53
      GIMSK = _BV(INT0);
 286:	80 e4       	ldi	r24, 0x40	; 64
 288:	8b bf       	out	0x3b, r24	; 59
      sei();
 28a:	78 94       	sei
      asm("sleep");
 28c:	88 95       	sleep
    }
  } // otherwise, its always on!
  
  
  if ((PINA & 0x2) && (number <= 999)) { /* display whatever is stored in the number variable */
 28e:	c9 9b       	sbis	0x19, 1	; 25
 290:	2f c0       	rjmp	.+94     	; 0x2f0 <__vector_13+0x178>
 292:	80 91 80 00 	lds	r24, 0x0080
 296:	90 91 81 00 	lds	r25, 0x0081
 29a:	88 5e       	subi	r24, 0xE8	; 232
 29c:	93 40       	sbci	r25, 0x03	; 3
 29e:	40 f5       	brcc	.+80     	; 0x2f0 <__vector_13+0x178>
    // display a number
    if (number >= 100) {
 2a0:	80 91 80 00 	lds	r24, 0x0080
 2a4:	90 91 81 00 	lds	r25, 0x0081
 2a8:	84 36       	cpi	r24, 0x64	; 100
 2aa:	91 05       	cpc	r25, r1
 2ac:	30 f0       	brcs	.+12     	; 0x2ba <__vector_13+0x142>
      digit1 = hundreds(number);
 2ae:	80 91 80 00 	lds	r24, 0x0080
 2b2:	90 91 81 00 	lds	r25, 0x0081
 2b6:	cf d1       	rcall	.+926    	; 0x656 <hundreds>
 2b8:	01 c0       	rjmp	.+2      	; 0x2bc <__vector_13+0x144>
    } else {
      digit1 = ' ';
 2ba:	80 e2       	ldi	r24, 0x20	; 32
 2bc:	80 93 87 00 	sts	0x0087, r24
    }
    
    if (number >= 10) {
 2c0:	80 91 80 00 	lds	r24, 0x0080
 2c4:	90 91 81 00 	lds	r25, 0x0081
 2c8:	0a 97       	sbiw	r24, 0x0a	; 10
 2ca:	30 f0       	brcs	.+12     	; 0x2d8 <__vector_13+0x160>
      digit2 = tens(number);
 2cc:	80 91 80 00 	lds	r24, 0x0080
 2d0:	90 91 81 00 	lds	r25, 0x0081
 2d4:	ce d1       	rcall	.+924    	; 0x672 <tens>
 2d6:	01 c0       	rjmp	.+2      	; 0x2da <__vector_13+0x162>
    } else {
      digit2 = ' ';
 2d8:	80 e2       	ldi	r24, 0x20	; 32
 2da:	80 93 82 00 	sts	0x0082, r24
    }
    
    digit3 = number % 10;
 2de:	80 91 80 00 	lds	r24, 0x0080
 2e2:	90 91 81 00 	lds	r25, 0x0081
 2e6:	6a e0       	ldi	r22, 0x0A	; 10
 2e8:	70 e0       	ldi	r23, 0x00	; 0
 2ea:	d6 d1       	rcall	.+940    	; 0x698 <__udivmodhi4>
 2ec:	80 93 83 00 	sts	0x0083, r24
  } else {
    // do whatever the main code sez
  }
  
  per_digit_timer--;
 2f0:	80 91 84 00 	lds	r24, 0x0084
 2f4:	81 50       	subi	r24, 0x01	; 1
 2f6:	80 93 84 00 	sts	0x0084, r24
  if (per_digit_timer == 0) {		
 2fa:	80 91 84 00 	lds	r24, 0x0084
 2fe:	88 23       	and	r24, r24
 300:	09 f0       	breq	.+2      	; 0x304 <__vector_13+0x18c>
 302:	4e c0       	rjmp	.+156    	; 0x3a0 <__vector_13+0x228>
    current_digit_displayed++;
 304:	80 91 78 00 	lds	r24, 0x0078
 308:	8f 5f       	subi	r24, 0xFF	; 255
 30a:	80 93 78 00 	sts	0x0078, r24
    if (current_digit_displayed >= 3)
 30e:	80 91 78 00 	lds	r24, 0x0078
 312:	83 30       	cpi	r24, 0x03	; 3
 314:	10 f0       	brcs	.+4      	; 0x31a <__vector_13+0x1a2>
      current_digit_displayed = 0;
 316:	10 92 78 00 	sts	0x0078, r1
    
    if (current_digit_displayed == 0) { 
 31a:	80 91 78 00 	lds	r24, 0x0078
 31e:	88 23       	and	r24, r24
 320:	99 f4       	brne	.+38     	; 0x348 <__vector_13+0x1d0>
      if (segments(digit1) == 0) {
 322:	80 91 87 00 	lds	r24, 0x0087
 326:	05 df       	rcall	.-502    	; 0x132 <segments>
 328:	88 23       	and	r24, r24
 32a:	29 f4       	brne	.+10     	; 0x336 <__vector_13+0x1be>
	SEG_CC1_PORT |= _BV(SEG_CC1);
 32c:	c1 9a       	sbi	0x18, 1	; 24
	current_digit_displayed = 1;
 32e:	81 e0       	ldi	r24, 0x01	; 1
 330:	80 93 78 00 	sts	0x0078, r24
 334:	09 c0       	rjmp	.+18     	; 0x348 <__vector_13+0x1d0>
      } else {
	display_digit(0, digit1);
 336:	60 91 87 00 	lds	r22, 0x0087
 33a:	80 e0       	ldi	r24, 0x00	; 0
 33c:	cc de       	rcall	.-616    	; 0xd6 <display_digit>
	per_digit_timer = segments(digit1);
 33e:	80 91 87 00 	lds	r24, 0x0087
 342:	f7 de       	rcall	.-530    	; 0x132 <segments>
 344:	80 93 84 00 	sts	0x0084, r24
      }
    }
    if (current_digit_displayed == 1) {
 348:	80 91 78 00 	lds	r24, 0x0078
 34c:	81 30       	cpi	r24, 0x01	; 1
 34e:	99 f4       	brne	.+38     	; 0x376 <__vector_13+0x1fe>
      if (segments(digit2) == 0) {
 350:	80 91 82 00 	lds	r24, 0x0082
 354:	ee de       	rcall	.-548    	; 0x132 <segments>
 356:	88 23       	and	r24, r24
 358:	29 f4       	brne	.+10     	; 0x364 <__vector_13+0x1ec>
	SEG_CC2_PORT |= _BV(SEG_CC2);
 35a:	90 9a       	sbi	0x12, 0	; 18
	current_digit_displayed = 2;
 35c:	82 e0       	ldi	r24, 0x02	; 2
 35e:	80 93 78 00 	sts	0x0078, r24
 362:	09 c0       	rjmp	.+18     	; 0x376 <__vector_13+0x1fe>
      } else {
	display_digit(1, digit2);
 364:	60 91 82 00 	lds	r22, 0x0082
 368:	81 e0       	ldi	r24, 0x01	; 1
 36a:	b5 de       	rcall	.-662    	; 0xd6 <display_digit>
	per_digit_timer = segments(digit2);
 36c:	80 91 82 00 	lds	r24, 0x0082
 370:	e0 de       	rcall	.-576    	; 0x132 <segments>
 372:	80 93 84 00 	sts	0x0084, r24
      }
    } 
    if (current_digit_displayed == 2) {
 376:	80 91 78 00 	lds	r24, 0x0078
 37a:	82 30       	cpi	r24, 0x02	; 2
 37c:	89 f4       	brne	.+34     	; 0x3a0 <__vector_13+0x228>
      if (segments(digit3) == 0) {
 37e:	80 91 83 00 	lds	r24, 0x0083
 382:	d7 de       	rcall	.-594    	; 0x132 <segments>
 384:	88 23       	and	r24, r24
 386:	19 f4       	brne	.+6      	; 0x38e <__vector_13+0x216>
	SEG_CC3_PORT |= _BV(SEG_CC3);
 388:	94 9a       	sbi	0x12, 4	; 18
	per_digit_timer = 1;
 38a:	81 e0       	ldi	r24, 0x01	; 1
 38c:	07 c0       	rjmp	.+14     	; 0x39c <__vector_13+0x224>
      } else {
	display_digit(2, digit3);
 38e:	60 91 83 00 	lds	r22, 0x0083
 392:	82 e0       	ldi	r24, 0x02	; 2
 394:	a0 de       	rcall	.-704    	; 0xd6 <display_digit>
	per_digit_timer = segments(digit3);
 396:	80 91 83 00 	lds	r24, 0x0083
 39a:	cb de       	rcall	.-618    	; 0x132 <segments>
 39c:	80 93 84 00 	sts	0x0084, r24
 3a0:	ff 91       	pop	r31
 3a2:	ef 91       	pop	r30
 3a4:	bf 91       	pop	r27
 3a6:	af 91       	pop	r26
 3a8:	9f 91       	pop	r25
 3aa:	8f 91       	pop	r24
 3ac:	7f 91       	pop	r23
 3ae:	6f 91       	pop	r22
 3b0:	5f 91       	pop	r21
 3b2:	4f 91       	pop	r20
 3b4:	3f 91       	pop	r19
 3b6:	2f 91       	pop	r18
 3b8:	0f 90       	pop	r0
 3ba:	0f be       	out	0x3f, r0	; 63
 3bc:	0f 90       	pop	r0
 3be:	1f 90       	pop	r1
 3c0:	18 95       	reti

000003c2 <__vector_1>:
volatile uint16_t display_timer = 0;
#define SCROLL_SPEED 500UL


//SIGNAL (SIG_INT0) {
ISR (INT0_vect) {
 3c2:	1f 92       	push	r1
 3c4:	0f 92       	push	r0
 3c6:	0f b6       	in	r0, 0x3f	; 63
 3c8:	0f 92       	push	r0
 3ca:	11 24       	eor	r1, r1
 3cc:	8f 93       	push	r24
 3ce:	9f 93       	push	r25
  GIMSK = 0;
 3d0:	1b be       	out	0x3b, r1	; 59
  poweroff_timer = 0;
 3d2:	10 92 79 00 	sts	0x0079, r1
 3d6:	10 92 7a 00 	sts	0x007A, r1
 3da:	10 92 7b 00 	sts	0x007B, r1
 3de:	10 92 7c 00 	sts	0x007C, r1
  button_timer == 0xFFFF;
 3e2:	80 91 85 00 	lds	r24, 0x0085
 3e6:	90 91 86 00 	lds	r25, 0x0086
 3ea:	04 c0       	rjmp	.+8      	; 0x3f4 <__vector_1+0x32>
 3ec:	84 ec       	ldi	r24, 0xC4	; 196
 3ee:	99 e0       	ldi	r25, 0x09	; 9
 3f0:	01 97       	sbiw	r24, 0x01	; 1
 3f2:	f1 f7       	brne	.-4      	; 0x3f0 <__vector_1+0x2e>
  while (! (BUTTON_PIN & _BV(BUTTON)))  {
 3f4:	82 9b       	sbis	0x10, 2	; 16
 3f6:	fa cf       	rjmp	.-12     	; 0x3ec <__vector_1+0x2a>
 3f8:	9f 91       	pop	r25
 3fa:	8f 91       	pop	r24
 3fc:	0f 90       	pop	r0
 3fe:	0f be       	out	0x3f, r0	; 63
 400:	0f 90       	pop	r0
 402:	1f 90       	pop	r1
 404:	18 95       	reti

00000406 <main>:
		x >>= 1;
	}
	return j;
}

int main(void) {
 406:	0f 93       	push	r16
 408:	1f 93       	push	r17
 40a:	cf 93       	push	r28
 40c:	df 93       	push	r29
  uint8_t button_state, last_button_state, cleared = 0;
  uint16_t temp;

  DDRB = 0xFF;
 40e:	8f ef       	ldi	r24, 0xFF	; 255
 410:	87 bb       	out	0x17, r24	; 23
  DDRD = 0xFF;
 412:	81 bb       	out	0x11, r24	; 17
  DDRA = 0x0; // the unused crystal pins are for changing the timeout.
 414:	1a ba       	out	0x1a, r1	; 26
  PORTA = 0xF; // but they have pullups
 416:	8f e0       	ldi	r24, 0x0F	; 15
 418:	8b bb       	out	0x1b, r24	; 27
  
  GIMSK = 0;
 41a:	1b be       	out	0x3b, r1	; 59
  
  BUTTON_DDR &= ~_BV(BUTTON);
 41c:	8a 98       	cbi	0x11, 2	; 17
  BUTTON_PORT |= _BV(BUTTON);
 41e:	92 9a       	sbi	0x12, 2	; 18
 420:	a0 e0       	ldi	r26, 0x00	; 0
 422:	b0 e0       	ldi	r27, 0x00	; 0
 424:	4d d1       	rcall	.+666    	; 0x6c0 <__eeprom_read_word_1C1D1E>
  
  number = eeprom_read_word(&stored_number);
 426:	f0 93 81 00 	sts	0x0081, r31
 42a:	e0 93 80 00 	sts	0x0080, r30
  
  // set up an interrupt that goes off @ 1KHz)
  TCCR0A = _BV(WGM01);
 42e:	82 e0       	ldi	r24, 0x02	; 2
 430:	80 bf       	out	0x30, r24	; 48
  TCCR0B = 2; // 500K/8 = 62.3KHz
 432:	83 bf       	out	0x33, r24	; 51
  OCR0A = 63; // divide that by 63 -> 1KHz
 434:	8f e3       	ldi	r24, 0x3F	; 63
 436:	86 bf       	out	0x36, r24	; 54
  TIMSK = _BV(OCIE0A); // turn on the interrupt
 438:	81 e0       	ldi	r24, 0x01	; 1
 43a:	89 bf       	out	0x39, r24	; 57
  sei(); // turn on interrupts
 43c:	78 94       	sei
  // now all the LED stuff (persistence of vision) is done in interrupts, so watch for button presses
  
  button_timer = 0xFFFF;
 43e:	8f ef       	ldi	r24, 0xFF	; 255
 440:	9f ef       	ldi	r25, 0xFF	; 255
 442:	90 93 86 00 	sts	0x0086, r25
 446:	80 93 85 00 	sts	0x0085, r24
 44a:	41 e0       	ldi	r20, 0x01	; 1
 44c:	11 e0       	ldi	r17, 0x01	; 1
 44e:	00 e0       	ldi	r16, 0x00	; 0
 450:	c0 e0       	ldi	r28, 0x00	; 0
 452:	d0 e0       	ldi	r29, 0x00	; 0
  while (1) {
    // first, debounce the switch by performing a lowpass filter: the button
    // must be pressed for 10ms (on or off) for it to count. otherwise we get
    // weird effects from the bouncing.

    if ((! (BUTTON_PIN & _BV(BUTTON))) && (button_state == 1)) {
 454:	82 99       	sbic	0x10, 2	; 16
 456:	1f c0       	rjmp	.+62     	; 0x496 <main+0x90>
 458:	41 30       	cpi	r20, 0x01	; 1
 45a:	e9 f4       	brne	.+58     	; 0x496 <main+0x90>
      poweroff_timer = 0;
 45c:	10 92 79 00 	sts	0x0079, r1
 460:	10 92 7a 00 	sts	0x007A, r1
 464:	10 92 7b 00 	sts	0x007B, r1
 468:	10 92 7c 00 	sts	0x007C, r1

      //button was just pressed
      // wait 10 ms and see if the button is still pressed the entire time
      button_timer = 0;
 46c:	10 92 86 00 	sts	0x0086, r1
 470:	10 92 85 00 	sts	0x0085, r1
 474:	02 c0       	rjmp	.+4      	; 0x47a <main+0x74>
      while (button_timer < 10) {
	if (BUTTON_PIN & _BV(BUTTON)) { // released
 476:	82 99       	sbic	0x10, 2	; 16
 478:	06 c0       	rjmp	.+12     	; 0x486 <main+0x80>
      poweroff_timer = 0;

      //button was just pressed
      // wait 10 ms and see if the button is still pressed the entire time
      button_timer = 0;
      while (button_timer < 10) {
 47a:	80 91 85 00 	lds	r24, 0x0085
 47e:	90 91 86 00 	lds	r25, 0x0086
 482:	0a 97       	sbiw	r24, 0x0a	; 10
 484:	c4 f3       	brlt	.-16     	; 0x476 <main+0x70>
	if (BUTTON_PIN & _BV(BUTTON)) { // released
	  break;
	}
      }
      if (button_timer >= 10) { // was held entire time
 486:	80 91 85 00 	lds	r24, 0x0085
 48a:	90 91 86 00 	lds	r25, 0x0086
 48e:	0a 97       	sbiw	r24, 0x0a	; 10
 490:	0c f0       	brlt	.+2      	; 0x494 <main+0x8e>
 492:	40 e0       	ldi	r20, 0x00	; 0
 494:	00 e0       	ldi	r16, 0x00	; 0
	button_state = 0;
      }
      cleared = 0;
    }
    
    if ((BUTTON_PIN & _BV(BUTTON)) && (!button_state)) {
 496:	82 9b       	sbis	0x10, 2	; 16
 498:	1f c0       	rjmp	.+62     	; 0x4d8 <main+0xd2>
 49a:	44 23       	and	r20, r20
 49c:	a1 f5       	brne	.+104    	; 0x506 <main+0x100>
      poweroff_timer = 0;
 49e:	10 92 79 00 	sts	0x0079, r1
 4a2:	10 92 7a 00 	sts	0x007A, r1
 4a6:	10 92 7b 00 	sts	0x007B, r1
 4aa:	10 92 7c 00 	sts	0x007C, r1

      // wait 10 ms and see if the button is released the entire time
      button_timer = 0;
 4ae:	10 92 86 00 	sts	0x0086, r1
 4b2:	10 92 85 00 	sts	0x0085, r1
 4b6:	02 c0       	rjmp	.+4      	; 0x4bc <main+0xb6>
      while (button_timer < 10) {
	if (! (BUTTON_PIN & _BV(BUTTON))) { // pressed
 4b8:	82 9b       	sbis	0x10, 2	; 16
 4ba:	06 c0       	rjmp	.+12     	; 0x4c8 <main+0xc2>
    if ((BUTTON_PIN & _BV(BUTTON)) && (!button_state)) {
      poweroff_timer = 0;

      // wait 10 ms and see if the button is released the entire time
      button_timer = 0;
      while (button_timer < 10) {
 4bc:	80 91 85 00 	lds	r24, 0x0085
 4c0:	90 91 86 00 	lds	r25, 0x0086
 4c4:	0a 97       	sbiw	r24, 0x0a	; 10
 4c6:	c4 f3       	brlt	.-16     	; 0x4b8 <main+0xb2>
	if (! (BUTTON_PIN & _BV(BUTTON))) { // pressed
	  break;
	}
      }
      if (button_timer >= 10) { // was held entire time
 4c8:	80 91 85 00 	lds	r24, 0x0085
 4cc:	90 91 86 00 	lds	r25, 0x0086
 4d0:	0a 97       	sbiw	r24, 0x0a	; 10
 4d2:	0c f0       	brlt	.+2      	; 0x4d6 <main+0xd0>
 4d4:	ab c0       	rjmp	.+342    	; 0x62c <main+0x226>
 4d6:	02 c0       	rjmp	.+4      	; 0x4dc <main+0xd6>
    }

    // debounce/lowpassing done, 
    // button_state tells whether the button is pressed (0) or released (1)
    // now see if it was a short or long press
    if (!button_state && last_button_state) { // just pressed
 4d8:	44 23       	and	r20, r20
 4da:	a9 f4       	brne	.+42     	; 0x506 <main+0x100>
      last_button_state = button_state;
      // do nothing
    }
   
    if (!button_state && !last_button_state && 
 4dc:	80 91 85 00 	lds	r24, 0x0085
 4e0:	90 91 86 00 	lds	r25, 0x0086
 4e4:	88 5b       	subi	r24, 0xB8	; 184
 4e6:	9b 40       	sbci	r25, 0x0B	; 11
 4e8:	0c f4       	brge	.+2      	; 0x4ec <main+0xe6>
 4ea:	9e c0       	rjmp	.+316    	; 0x628 <main+0x222>
	(button_timer >= LONG_PRESS_TIME)) { // pressed and held
      number = 0;
 4ec:	10 92 81 00 	sts	0x0081, r1
 4f0:	10 92 80 00 	sts	0x0080, r1
      eeprom_write_word(&stored_number, number);
 4f4:	80 91 80 00 	lds	r24, 0x0080
 4f8:	90 91 81 00 	lds	r25, 0x0081
 4fc:	de 01       	movw	r26, r28
 4fe:	0c 01       	movw	r0, r24
 500:	e4 d0       	rcall	.+456    	; 0x6ca <__eeprom_write_word_1C1D1E>
 502:	01 e0       	ldi	r16, 0x01	; 1
 504:	91 c0       	rjmp	.+290    	; 0x628 <main+0x222>
      cleared = 1; // just cleared
    }

   if (button_state && !last_button_state && !cleared) { // just released
 506:	11 23       	and	r17, r17
 508:	39 f5       	brne	.+78     	; 0x558 <main+0x152>
 50a:	00 23       	and	r16, r16
 50c:	29 f5       	brne	.+74     	; 0x558 <main+0x152>
      last_button_state = button_state;
      temp = number+1;
 50e:	20 91 80 00 	lds	r18, 0x0080
 512:	30 91 81 00 	lds	r19, 0x0081
 516:	2f 5f       	subi	r18, 0xFF	; 255
 518:	3f 4f       	sbci	r19, 0xFF	; 255
      number = 1001;
 51a:	89 ee       	ldi	r24, 0xE9	; 233
 51c:	93 e0       	ldi	r25, 0x03	; 3
 51e:	90 93 81 00 	sts	0x0081, r25
 522:	80 93 80 00 	sts	0x0080, r24
      digit1 = 'd';
 526:	84 e6       	ldi	r24, 0x64	; 100
 528:	80 93 87 00 	sts	0x0087, r24
      digit2 = 'u';
 52c:	85 e7       	ldi	r24, 0x75	; 117
 52e:	80 93 82 00 	sts	0x0082, r24
      digit3 = 'g';
 532:	87 e6       	ldi	r24, 0x67	; 103
 534:	80 93 83 00 	sts	0x0083, r24
 538:	84 e2       	ldi	r24, 0x24	; 36
 53a:	94 ef       	ldi	r25, 0xF4	; 244
 53c:	01 97       	sbiw	r24, 0x01	; 1
 53e:	f1 f7       	brne	.-4      	; 0x53c <main+0x136>
      _delay_ms(250);
      //_delay_ms(250);
      //_delay_ms(250);
      number = temp;
 540:	30 93 81 00 	sts	0x0081, r19
 544:	20 93 80 00 	sts	0x0080, r18
      eeprom_write_word(&stored_number, number); 
 548:	80 91 80 00 	lds	r24, 0x0080
 54c:	90 91 81 00 	lds	r25, 0x0081
 550:	de 01       	movw	r26, r28
 552:	0c 01       	movw	r0, r24
 554:	ba d0       	rcall	.+372    	; 0x6ca <__eeprom_write_word_1C1D1E>
 556:	14 2f       	mov	r17, r20
    }


   // do special stuff
    if ((number >= 1000) || !(PINA & 0x2)) {
 558:	80 91 80 00 	lds	r24, 0x0080
 55c:	90 91 81 00 	lds	r25, 0x0081
 560:	88 5e       	subi	r24, 0xE8	; 232
 562:	93 40       	sbci	r25, 0x03	; 3
 564:	10 f4       	brcc	.+4      	; 0x56a <main+0x164>
 566:	c9 99       	sbic	0x19, 1	; 25
 568:	75 cf       	rjmp	.-278    	; 0x454 <main+0x4e>
      if (number == 1000) 
 56a:	80 91 80 00 	lds	r24, 0x0080
 56e:	90 91 81 00 	lds	r25, 0x0081
 572:	88 5e       	subi	r24, 0xE8	; 232
 574:	93 40       	sbci	r25, 0x03	; 3
 576:	11 f4       	brne	.+4      	; 0x57c <main+0x176>
	string_index = 0;
 578:	10 92 7d 00 	sts	0x007D, r1

      digit1 = display_string[string_index%strlen(display_string)];
 57c:	20 91 76 00 	lds	r18, 0x0076
 580:	30 91 77 00 	lds	r19, 0x0077
 584:	80 91 7d 00 	lds	r24, 0x007D
 588:	f9 01       	movw	r30, r18
 58a:	01 90       	ld	r0, Z+
 58c:	00 20       	and	r0, r0
 58e:	e9 f7       	brne	.-6      	; 0x58a <main+0x184>
 590:	31 97       	sbiw	r30, 0x01	; 1
 592:	e2 1b       	sub	r30, r18
 594:	f3 0b       	sbc	r31, r19
 596:	90 e0       	ldi	r25, 0x00	; 0
 598:	bf 01       	movw	r22, r30
 59a:	7e d0       	rcall	.+252    	; 0x698 <__udivmodhi4>
 59c:	f9 01       	movw	r30, r18
 59e:	e8 0f       	add	r30, r24
 5a0:	f9 1f       	adc	r31, r25
 5a2:	80 81       	ld	r24, Z
 5a4:	80 93 87 00 	sts	0x0087, r24
      digit2 = display_string[(string_index+1)%strlen(display_string)];
 5a8:	80 91 7d 00 	lds	r24, 0x007D
 5ac:	f9 01       	movw	r30, r18
 5ae:	01 90       	ld	r0, Z+
 5b0:	00 20       	and	r0, r0
 5b2:	e9 f7       	brne	.-6      	; 0x5ae <main+0x1a8>
 5b4:	31 97       	sbiw	r30, 0x01	; 1
 5b6:	e2 1b       	sub	r30, r18
 5b8:	f3 0b       	sbc	r31, r19
 5ba:	90 e0       	ldi	r25, 0x00	; 0
 5bc:	01 96       	adiw	r24, 0x01	; 1
 5be:	bf 01       	movw	r22, r30
 5c0:	6b d0       	rcall	.+214    	; 0x698 <__udivmodhi4>
 5c2:	f9 01       	movw	r30, r18
 5c4:	e8 0f       	add	r30, r24
 5c6:	f9 1f       	adc	r31, r25
 5c8:	80 81       	ld	r24, Z
 5ca:	80 93 82 00 	sts	0x0082, r24
      digit3 = display_string[(string_index+2)%strlen(display_string)];
 5ce:	80 91 7d 00 	lds	r24, 0x007D
 5d2:	f9 01       	movw	r30, r18
 5d4:	01 90       	ld	r0, Z+
 5d6:	00 20       	and	r0, r0
 5d8:	e9 f7       	brne	.-6      	; 0x5d4 <main+0x1ce>
 5da:	31 97       	sbiw	r30, 0x01	; 1
 5dc:	e2 1b       	sub	r30, r18
 5de:	f3 0b       	sbc	r31, r19
 5e0:	90 e0       	ldi	r25, 0x00	; 0
 5e2:	02 96       	adiw	r24, 0x02	; 2
 5e4:	bf 01       	movw	r22, r30
 5e6:	58 d0       	rcall	.+176    	; 0x698 <__udivmodhi4>
 5e8:	28 0f       	add	r18, r24
 5ea:	39 1f       	adc	r19, r25
 5ec:	f9 01       	movw	r30, r18
 5ee:	80 81       	ld	r24, Z
 5f0:	80 93 83 00 	sts	0x0083, r24
      if (number == 1000)
 5f4:	80 91 80 00 	lds	r24, 0x0080
 5f8:	90 91 81 00 	lds	r25, 0x0081
 5fc:	88 5e       	subi	r24, 0xE8	; 232
 5fe:	93 40       	sbci	r25, 0x03	; 3
 600:	21 f4       	brne	.+8      	; 0x60a <main+0x204>
 602:	88 ea       	ldi	r24, 0xA8	; 168
 604:	91 e6       	ldi	r25, 0x61	; 97
 606:	01 97       	sbiw	r24, 0x01	; 1
 608:	f1 f7       	brne	.-4      	; 0x606 <main+0x200>
	_delay_ms(100);
      number = 1001;
 60a:	89 ee       	ldi	r24, 0xE9	; 233
 60c:	93 e0       	ldi	r25, 0x03	; 3
 60e:	90 93 81 00 	sts	0x0081, r25
 612:	80 93 80 00 	sts	0x0080, r24
      poweroff_timer = 0;
 616:	10 92 79 00 	sts	0x0079, r1
 61a:	10 92 7a 00 	sts	0x007A, r1
 61e:	10 92 7b 00 	sts	0x007B, r1
 622:	10 92 7c 00 	sts	0x007C, r1
 626:	16 cf       	rjmp	.-468    	; 0x454 <main+0x4e>
 628:	10 e0       	ldi	r17, 0x00	; 0
 62a:	96 cf       	rjmp	.-212    	; 0x558 <main+0x152>
 62c:	41 e0       	ldi	r20, 0x01	; 1
 62e:	6b cf       	rjmp	.-298    	; 0x506 <main+0x100>

00000630 <delay_ms>:
#include <avr/io.h>      // this contains all the IO port definitions

void delay_ms(unsigned char ms)
{
 630:	2a ef       	ldi	r18, 0xFA	; 250
 632:	30 e0       	ldi	r19, 0x00	; 0

00000634 <L_dl18>:
 634:	e2 2f       	mov	r30, r18
 636:	f3 2f       	mov	r31, r19

00000638 <L_dl28>:
 638:	31 97       	sbiw	r30, 0x01	; 1
 63a:	f1 f7       	brne	.-4      	; 0x638 <L_dl28>
 63c:	a8 95       	wdr
 63e:	8a 95       	dec	r24
 640:	c9 f7       	brne	.-14     	; 0x634 <L_dl18>
 642:	08 95       	ret

00000644 <digits>:
		);
}



uint8_t digits(uint16_t n) {
 644:	84 36       	cpi	r24, 0x64	; 100
 646:	91 05       	cpc	r25, r1
 648:	18 f0       	brcs	.+6      	; 0x650 <digits+0xc>
	if (n >= 100)
 64a:	83 e0       	ldi	r24, 0x03	; 3
 64c:	90 e0       	ldi	r25, 0x00	; 0
 64e:	08 95       	ret
 650:	82 e0       	ldi	r24, 0x02	; 2
 652:	90 e0       	ldi	r25, 0x00	; 0
	  return 3;
	if (n >= 10);
	return 2;
	return 1;
}
 654:	08 95       	ret

00000656 <hundreds>:


uint8_t hundreds(uint16_t n) {
 656:	20 e0       	ldi	r18, 0x00	; 0
 658:	30 e0       	ldi	r19, 0x00	; 0
 65a:	02 c0       	rjmp	.+4      	; 0x660 <hundreds+0xa>
	uint8_t i=0;
	
	while (n >= 100) {
		n-=100;
 65c:	84 56       	subi	r24, 0x64	; 100
 65e:	90 40       	sbci	r25, 0x00	; 0
 660:	42 2f       	mov	r20, r18
 662:	2f 5f       	subi	r18, 0xFF	; 255
 664:	3f 4f       	sbci	r19, 0xFF	; 255


uint8_t hundreds(uint16_t n) {
	uint8_t i=0;
	
	while (n >= 100) {
 666:	84 36       	cpi	r24, 0x64	; 100
 668:	91 05       	cpc	r25, r1
 66a:	c0 f7       	brcc	.-16     	; 0x65c <hundreds+0x6>
		n-=100;
		i++;
	}
	return i;
}
 66c:	84 2f       	mov	r24, r20
 66e:	90 e0       	ldi	r25, 0x00	; 0
 670:	08 95       	ret

00000672 <tens>:

uint8_t tens(uint16_t n) {
 672:	02 c0       	rjmp	.+4      	; 0x678 <tens+0x6>
	uint8_t i=0;
	
	while (n >= 100) {
		n-=100;
 674:	84 56       	subi	r24, 0x64	; 100
 676:	90 40       	sbci	r25, 0x00	; 0
}

uint8_t tens(uint16_t n) {
	uint8_t i=0;
	
	while (n >= 100) {
 678:	84 36       	cpi	r24, 0x64	; 100
 67a:	91 05       	cpc	r25, r1
 67c:	d8 f7       	brcc	.-10     	; 0x674 <tens+0x2>
 67e:	20 e0       	ldi	r18, 0x00	; 0
 680:	30 e0       	ldi	r19, 0x00	; 0
 682:	01 c0       	rjmp	.+2      	; 0x686 <tens+0x14>
		n-=100;
	}
	while (n >= 10) {
		n-=10;
 684:	0a 97       	sbiw	r24, 0x0a	; 10
 686:	42 2f       	mov	r20, r18
 688:	2f 5f       	subi	r18, 0xFF	; 255
 68a:	3f 4f       	sbci	r19, 0xFF	; 255
	uint8_t i=0;
	
	while (n >= 100) {
		n-=100;
	}
	while (n >= 10) {
 68c:	8a 30       	cpi	r24, 0x0A	; 10
 68e:	91 05       	cpc	r25, r1
 690:	c8 f7       	brcc	.-14     	; 0x684 <tens+0x12>
		n-=10;
		i++;
	}
	return i;
}
 692:	84 2f       	mov	r24, r20
 694:	90 e0       	ldi	r25, 0x00	; 0
 696:	08 95       	ret

00000698 <__udivmodhi4>:
 698:	aa 1b       	sub	r26, r26
 69a:	bb 1b       	sub	r27, r27
 69c:	51 e1       	ldi	r21, 0x11	; 17
 69e:	07 c0       	rjmp	.+14     	; 0x6ae <__udivmodhi4_ep>

000006a0 <__udivmodhi4_loop>:
 6a0:	aa 1f       	adc	r26, r26
 6a2:	bb 1f       	adc	r27, r27
 6a4:	a6 17       	cp	r26, r22
 6a6:	b7 07       	cpc	r27, r23
 6a8:	10 f0       	brcs	.+4      	; 0x6ae <__udivmodhi4_ep>
 6aa:	a6 1b       	sub	r26, r22
 6ac:	b7 0b       	sbc	r27, r23

000006ae <__udivmodhi4_ep>:
 6ae:	88 1f       	adc	r24, r24
 6b0:	99 1f       	adc	r25, r25
 6b2:	5a 95       	dec	r21
 6b4:	a9 f7       	brne	.-22     	; 0x6a0 <__udivmodhi4_loop>
 6b6:	80 95       	com	r24
 6b8:	90 95       	com	r25
 6ba:	bc 01       	movw	r22, r24
 6bc:	cd 01       	movw	r24, r26
 6be:	08 95       	ret

000006c0 <__eeprom_read_word_1C1D1E>:
 6c0:	09 d0       	rcall	.+18     	; 0x6d4 <__eeprom_read_byte_1C1D1E>
 6c2:	e0 2d       	mov	r30, r0
 6c4:	07 d0       	rcall	.+14     	; 0x6d4 <__eeprom_read_byte_1C1D1E>
 6c6:	f0 2d       	mov	r31, r0
 6c8:	08 95       	ret

000006ca <__eeprom_write_word_1C1D1E>:
 6ca:	0c d0       	rcall	.+24     	; 0x6e4 <__eeprom_write_byte_1C1D1E>
 6cc:	01 2c       	mov	r0, r1
 6ce:	0a d0       	rcall	.+20     	; 0x6e4 <__eeprom_write_byte_1C1D1E>
 6d0:	11 24       	eor	r1, r1
 6d2:	08 95       	ret

000006d4 <__eeprom_read_byte_1C1D1E>:
 6d4:	e1 99       	sbic	0x1c, 1	; 28
 6d6:	fe cf       	rjmp	.-4      	; 0x6d4 <__eeprom_read_byte_1C1D1E>
 6d8:	bf bb       	out	0x1f, r27	; 31
 6da:	ae bb       	out	0x1e, r26	; 30
 6dc:	e0 9a       	sbi	0x1c, 0	; 28
 6de:	11 96       	adiw	r26, 0x01	; 1
 6e0:	0d b2       	in	r0, 0x1d	; 29
 6e2:	08 95       	ret

000006e4 <__eeprom_write_byte_1C1D1E>:
 6e4:	e1 99       	sbic	0x1c, 1	; 28
 6e6:	fe cf       	rjmp	.-4      	; 0x6e4 <__eeprom_write_byte_1C1D1E>
 6e8:	bf bb       	out	0x1f, r27	; 31
 6ea:	ae bb       	out	0x1e, r26	; 30
 6ec:	0d ba       	out	0x1d, r0	; 29
 6ee:	11 96       	adiw	r26, 0x01	; 1
 6f0:	0f b6       	in	r0, 0x3f	; 63
 6f2:	f8 94       	cli
 6f4:	e2 9a       	sbi	0x1c, 2	; 28
 6f6:	e1 9a       	sbi	0x1c, 1	; 28
 6f8:	0f be       	out	0x3f, r0	; 63
 6fa:	08 95       	ret

000006fc <_exit>:
 6fc:	ff cf       	rjmp	.-2      	; 0x6fc <_exit>
