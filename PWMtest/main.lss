
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  0000011c  00000190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000011c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         00000bb8  00000000  00000000  00000190  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000879  00000000  00000000  00000d48  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  000015c1  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 4b 00 	call	0x96	; 0x96 <main>
  78:	0c 94 8c 00 	jmp	0x118	; 0x118 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <delay_ms>:
#include <avr/io.h>           // Defines pins, ports, etc to make programs easier to read
#include <util/delay.h>

void delay_ms(uint16_t ms)
{
    while(ms){
  80:	07 c0       	rjmp	.+14     	; 0x90 <delay_ms+0x10>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  82:	ef ec       	ldi	r30, 0xCF	; 207
  84:	f7 e0       	ldi	r31, 0x07	; 7
  86:	31 97       	sbiw	r30, 0x01	; 1
  88:	f1 f7       	brne	.-4      	; 0x86 <delay_ms+0x6>
  8a:	00 c0       	rjmp	.+0      	; 0x8c <delay_ms+0xc>
  8c:	00 00       	nop
        _delay_ms(1);
        ms--;
  8e:	01 97       	sbiw	r24, 0x01	; 1
#include <avr/io.h>           // Defines pins, ports, etc to make programs easier to read
#include <util/delay.h>

void delay_ms(uint16_t ms)
{
    while(ms){
  90:	00 97       	sbiw	r24, 0x00	; 0
  92:	b9 f7       	brne	.-18     	; 0x82 <delay_ms+0x2>
        _delay_ms(1);
        ms--;
    }
}
  94:	08 95       	ret

00000096 <main>:

int main(void)
{
	delay_ms(10); // Let the power stabilize.	
  96:	8a e0       	ldi	r24, 0x0A	; 10
  98:	90 e0       	ldi	r25, 0x00	; 0
  9a:	0e 94 40 00 	call	0x80	; 0x80 <delay_ms>
	cli(); // Disable interrupts.
  9e:	f8 94       	cli
        
    DDRB = 0b00000111; // Pins B0-2 are output.
  a0:	87 e0       	ldi	r24, 0x07	; 7
  a2:	84 b9       	out	0x04, r24	; 4
    
    // Timer stuff for PWM
    ICR1 = 200; // Freq.
  a4:	88 ec       	ldi	r24, 0xC8	; 200
  a6:	90 e0       	ldi	r25, 0x00	; 0
  a8:	90 93 87 00 	sts	0x0087, r25
  ac:	80 93 86 00 	sts	0x0086, r24
    OCR1A = 100; // Test start values.
  b0:	84 e6       	ldi	r24, 0x64	; 100
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	90 93 89 00 	sts	0x0089, r25
  b8:	80 93 88 00 	sts	0x0088, r24
    OCR1B = 100;
  bc:	90 93 8b 00 	sts	0x008B, r25
  c0:	80 93 8a 00 	sts	0x008A, r24
    
    TCCR1A = (1<<COM1A1)|(1<<COM1A0)|(1<<COM1B1); // OC1A = noninvert, OC1B = invert.
  c4:	80 ee       	ldi	r24, 0xE0	; 224
  c6:	80 93 80 00 	sts	0x0080, r24
	TCCR1B = (1<<WGM13)|(1<<CS10); // Phase/Freq. correct PWM, Clk/1.
  ca:	81 e1       	ldi	r24, 0x11	; 17
  cc:	80 93 81 00 	sts	0x0081, r24

	PORTB |= (1<<PB0); // Enable controller.
  d0:	28 9a       	sbi	0x05, 0	; 5

	while(1) // Main loop.
	{
        //OCR1A = 50; OCR1B = 50;
        //delay_ms(4000);
        OCR1A = 100; OCR1B = 100;
  d2:	04 e6       	ldi	r16, 0x64	; 100
  d4:	10 e0       	ldi	r17, 0x00	; 0
  d6:	10 93 89 00 	sts	0x0089, r17
  da:	00 93 88 00 	sts	0x0088, r16
  de:	10 93 8b 00 	sts	0x008B, r17
  e2:	00 93 8a 00 	sts	0x008A, r16
        delay_ms(4000);
  e6:	80 ea       	ldi	r24, 0xA0	; 160
  e8:	9f e0       	ldi	r25, 0x0F	; 15
  ea:	0e 94 40 00 	call	0x80	; 0x80 <delay_ms>
  ee:	c4 e6       	ldi	r28, 0x64	; 100
  f0:	d0 e0       	ldi	r29, 0x00	; 0
		
		uint8_t i;
		for(i=0; i<100; i++)
		{
			OCR1A = 100-i; OCR1B = OCR1A;
  f2:	d0 93 89 00 	sts	0x0089, r29
  f6:	c0 93 88 00 	sts	0x0088, r28
  fa:	80 91 88 00 	lds	r24, 0x0088
  fe:	90 91 89 00 	lds	r25, 0x0089
 102:	90 93 8b 00 	sts	0x008B, r25
 106:	80 93 8a 00 	sts	0x008A, r24
			delay_ms(50);
 10a:	82 e3       	ldi	r24, 0x32	; 50
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	0e 94 40 00 	call	0x80	; 0x80 <delay_ms>
 112:	21 97       	sbiw	r28, 0x01	; 1
        //delay_ms(4000);
        OCR1A = 100; OCR1B = 100;
        delay_ms(4000);
		
		uint8_t i;
		for(i=0; i<100; i++)
 114:	71 f7       	brne	.-36     	; 0xf2 <main+0x5c>
 116:	df cf       	rjmp	.-66     	; 0xd6 <main+0x40>

00000118 <_exit>:
 118:	f8 94       	cli

0000011a <__stop_program>:
 11a:	ff cf       	rjmp	.-2      	; 0x11a <__stop_program>
