
interrupt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000092  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000001  00800060  00000092  00000106  2**0
                  ALLOC
  2 .stab         00000360  00000000  00000000  00000108  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000005f  00000000  00000000  00000468  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000020  00000000  00000000  000004c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000029  00000000  00000000  000004e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000000b8  00000000  00000000  00000510  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000007f  00000000  00000000  000005c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000000ea  00000000  00000000  00000647  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000030  00000000  00000000  00000734  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000098  00000000  00000000  00000764  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000018  00000000  00000000  000007fc  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2a c0       	rjmp	.+84     	; 0x58 <__bad_interrupt>
   4:	29 c0       	rjmp	.+82     	; 0x58 <__bad_interrupt>
   6:	28 c0       	rjmp	.+80     	; 0x58 <__bad_interrupt>
   8:	27 c0       	rjmp	.+78     	; 0x58 <__bad_interrupt>
   a:	26 c0       	rjmp	.+76     	; 0x58 <__bad_interrupt>
   c:	25 c0       	rjmp	.+74     	; 0x58 <__bad_interrupt>
   e:	24 c0       	rjmp	.+72     	; 0x58 <__bad_interrupt>
  10:	23 c0       	rjmp	.+70     	; 0x58 <__bad_interrupt>
  12:	22 c0       	rjmp	.+68     	; 0x58 <__bad_interrupt>
  14:	21 c0       	rjmp	.+66     	; 0x58 <__bad_interrupt>
  16:	20 c0       	rjmp	.+64     	; 0x58 <__bad_interrupt>
  18:	1f c0       	rjmp	.+62     	; 0x58 <__bad_interrupt>
  1a:	1e c0       	rjmp	.+60     	; 0x58 <__bad_interrupt>
  1c:	1d c0       	rjmp	.+58     	; 0x58 <__bad_interrupt>
  1e:	1c c0       	rjmp	.+56     	; 0x58 <__bad_interrupt>
  20:	1b c0       	rjmp	.+54     	; 0x58 <__bad_interrupt>
  22:	1a c0       	rjmp	.+52     	; 0x58 <__bad_interrupt>
  24:	19 c0       	rjmp	.+50     	; 0x58 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf ed       	ldi	r28, 0xDF	; 223
  2c:	cd bf       	out	0x3d, r28	; 61

0000002e <__do_copy_data>:
  2e:	10 e0       	ldi	r17, 0x00	; 0
  30:	a0 e6       	ldi	r26, 0x60	; 96
  32:	b0 e0       	ldi	r27, 0x00	; 0
  34:	e2 e9       	ldi	r30, 0x92	; 146
  36:	f0 e0       	ldi	r31, 0x00	; 0
  38:	02 c0       	rjmp	.+4      	; 0x3e <.do_copy_data_start>

0000003a <.do_copy_data_loop>:
  3a:	05 90       	lpm	r0, Z+
  3c:	0d 92       	st	X+, r0

0000003e <.do_copy_data_start>:
  3e:	a0 36       	cpi	r26, 0x60	; 96
  40:	b1 07       	cpc	r27, r17
  42:	d9 f7       	brne	.-10     	; 0x3a <.do_copy_data_loop>

00000044 <__do_clear_bss>:
  44:	10 e0       	ldi	r17, 0x00	; 0
  46:	a0 e6       	ldi	r26, 0x60	; 96
  48:	b0 e0       	ldi	r27, 0x00	; 0
  4a:	01 c0       	rjmp	.+2      	; 0x4e <.do_clear_bss_start>

0000004c <.do_clear_bss_loop>:
  4c:	1d 92       	st	X+, r1

0000004e <.do_clear_bss_start>:
  4e:	a1 36       	cpi	r26, 0x61	; 97
  50:	b1 07       	cpc	r27, r17
  52:	e1 f7       	brne	.-8      	; 0x4c <.do_clear_bss_loop>
  54:	11 d0       	rcall	.+34     	; 0x78 <main>
  56:	1c c0       	rjmp	.+56     	; 0x90 <_exit>

00000058 <__bad_interrupt>:
  58:	d3 cf       	rjmp	.-90     	; 0x0 <__vectors>

0000005a <INTERRUPT>:
//#include <avr/signal.h>
#include <util/delay.h>


INTERRUPT(SIG_OUTPUT_COMPARE1A)
{
  5a:	80 91 60 00 	lds	r24, 0x0060
  5e:	88 23       	and	r24, r24
  60:	21 f0       	breq	.+8      	; 0x6a <INTERRUPT+0x10>
  static uint8_t ledon;

  if (ledon) 
  {
    ledon = 0;
  62:	10 92 60 00 	sts	0x0060, r1
    PORTB = 0;
  66:	18 ba       	out	0x18, r1	; 24
  68:	04 c0       	rjmp	.+8      	; 0x72 <INTERRUPT+0x18>
  }
  else
  {
    ledon = 1;
  6a:	81 e0       	ldi	r24, 0x01	; 1
  6c:	80 93 60 00 	sts	0x0060, r24
    PORTB = 1;
  70:	88 bb       	out	0x18, r24	; 24
  }
  return(0);
}
  72:	80 e0       	ldi	r24, 0x00	; 0
  74:	90 e0       	ldi	r25, 0x00	; 0
  76:	08 95       	ret

00000078 <main>:


void main(){
  78:	81 e0       	ldi	r24, 0x01	; 1
  7a:	87 bb       	out	0x17, r24	; 23
  DDRB = 1; // Assign PB1 to outpot status
  //PORTB = 1; // Turn PB1 on 
  
  TIMSK = _BV(OCIE1A);
  7c:	80 e4       	ldi	r24, 0x40	; 64
  7e:	89 bf       	out	0x39, r24	; 57
  TCCR1B = _BV(CS12)    // 256 prescale
  80:	8c e0       	ldi	r24, 0x0C	; 12
  82:	8e bd       	out	0x2e, r24	; 46
         | _BV(WGM12);  // CTC mode, TOP = OCR1A
  OCR1A = 15625;        // count up to TOP   1hz with 8 meg system clock
  84:	89 e0       	ldi	r24, 0x09	; 9
  86:	9d e3       	ldi	r25, 0x3D	; 61
  88:	9b bd       	out	0x2b, r25	; 43
  8a:	8a bd       	out	0x2a, r24	; 42
  while (1)
    asm volatile("nop" ::);  // we spin!  Could also put processor to sleep
  8c:	00 00       	nop
  8e:	fe cf       	rjmp	.-4      	; 0x8c <main+0x14>

00000090 <_exit>:
  90:	ff cf       	rjmp	.-2      	; 0x90 <_exit>
